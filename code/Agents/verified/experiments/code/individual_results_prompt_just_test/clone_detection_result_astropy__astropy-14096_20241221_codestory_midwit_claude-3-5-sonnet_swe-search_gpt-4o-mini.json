{
    "instance_id": "astropy__astropy-14096",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "astropy/coordinates/sky_coordinate.py": "index ab475f7d0d..e2ed86c6b3 100644\n         Overrides getattr to return coordinates that this can be transformed\n         to, based on the alias attr in the primary transform graph.\n         \"\"\"\n# First check if this is a property or method defined on the class\nif attr in type(self).__dict__:\nreturn object.__getattribute__(self, attr)\n\n         if \"_sky_coord_frame\" in self.__dict__:\n             if self._is_name(attr):\n                 return self  # Should this be a deepcopy of self?\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..7fa7888b41\nfrom astropy.coordinates import SkyCoord\n\n\nclass custom_coord(SkyCoord):\n@property\ndef prop(self):\nreturn self.random_attr\n\n\nc = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')\nc.prop\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "astropy/coordinates/sky_coordinate.py": "             if frame_cls is not None and self.frame.is_transformable_to(frame_cls):\n                 return self.transform_to(attr)\n \n# Call __getattribute__; this will give correct exception.\nreturn self.__getattribute__(attr)\n \n     def __setattr__(self, attr, val):\n         # This is to make anything available through __getattr__ immutable\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 defines a property and behavior of a custom class that inherits from 'SkyCoord', specifically indicating how to manipulate and access coordinate attributes, while the code in code sample 2 modifies and sets attributes related to framing in a class structure. Code sample 1 involves checking if an attribute exists and optionally returning a deep copy, whereas code sample 2 involves the condition that checks if a frame can be transformed and then manages attribute setting and retrieval.\", \"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they serve different purposes in manipulating class attributes and are syntactically dissimilar, lacking identical structure or content that would categorize them as clones.\"}"
}