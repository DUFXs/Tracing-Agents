{
    "instance_id": "django__django-11095",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/contrib/admin/options.py": "index 5e7b23f9a0..519fd4b361 100644\n     def __str__(self):\n         return \"%s.%s\" % (self.model._meta.app_label, self.__class__.__name__)\n \ndef get_inlines(self, request, obj=None):\n\"\"\"\nHook for specifying inline classes based on the request or model instance.\nDefault implementation returns self.inlines.\n\"\"\"\nreturn self.inlines\n\n     def get_inline_instances(self, request, obj=None):\n         inline_instances = []\nfor inline_class in self.get_inlines(request, obj):\n             inline = inline_class(self.model, self.admin_site)\n             if request:\n                 if not (inline.has_view_or_change_permission(request, obj) or\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..a044098744\nimport os\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')\nimport django\nfrom django.conf import settings\nif not settings.configured:\nsettings.configure(\nINSTALLED_APPS=['django.contrib.admin', 'django.contrib.contenttypes', 'django.contrib.auth'],\nDATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},\n)\ndjango.setup()\n\nfrom django.contrib import admin\nfrom django.contrib.auth.models import User\nfrom django.db import models\nfrom django.test import RequestFactory\n\n# Example models for demonstration\nclass Author(models.Model):\nclass Meta:\napp_label = 'admin'  # Use admin app since it's already in INSTALLED_APPS\nname = models.CharField(max_length=100)\nis_staff = models.BooleanField(default=False)\n\ndef __str__(self):\nreturn self.name\n\nclass Book(models.Model):\nclass Meta:\napp_label = 'admin'\ntitle = models.CharField(max_length=100)\nauthor = models.ForeignKey(Author, on_delete=models.CASCADE)\n\ndef __str__(self):\nreturn self.title\n\nclass Review(models.Model):\nclass Meta:\napp_label = 'admin'\nbook = models.ForeignKey(Book, on_delete=models.CASCADE)\ntext = models.TextField()\n\ndef __str__(self):\nreturn f\"Review of {self.book}\"\n\n# Inline admin classes\nclass BookInline(admin.TabularInline):\nmodel = Book\n\nclass ReviewInline(admin.TabularInline):\nmodel = Review\n\n# Current behavior - cannot dynamically change inlines based on request/obj\nclass CurrentAuthorAdmin(admin.ModelAdmin):\ninlines = [BookInline, ReviewInline]\n\n# Desired behavior - can dynamically change inlines based on request/obj\nclass DesiredAuthorAdmin(admin.ModelAdmin):\ndef get_inlines(self, request, obj=None):\n# Example: Only show ReviewInline for staff authors\nif obj and obj.is_staff:\nreturn [BookInline, ReviewInline]\nreturn [BookInline]\n\nif __name__ == \"__main__\":\n# Create a request with a mock user\nfactory = RequestFactory()\nrequest = factory.get('/')\nrequest.user = type('MockUser', (), {\n'is_active': True,\n'is_staff': True,\n'has_perm': lambda self, perm: True,  # Mock user has all permissions\n'__str__': lambda self: \"Mock User\",\n})()\n\n# Create test objects\nauthor1 = Author(name=\"Regular Author\", is_staff=False)\nauthor2 = Author(name=\"Staff Author\", is_staff=True)\n\n# Test current behavior\ncurrent_admin = CurrentAuthorAdmin(Author, admin.site)\ncurrent_inlines = current_admin.get_inline_instances(request)\nprint(\"Current behavior:\")\nprint(f\"- Number of inlines for any author: {len(current_inlines)}\")  # Always 2\nprint(f\"- Cannot dynamically change inlines based on author properties\")\n\n# Test desired behavior with the new hook\ndesired_admin = DesiredAuthorAdmin(Author, admin.site)\ndesired_inlines1 = desired_admin.get_inline_instances(request, obj=author1)\ndesired_inlines2 = desired_admin.get_inline_instances(request, obj=author2)\nprint(\"\\nDesired behavior:\")\nprint(f\"- Number of inlines for regular author: {len(desired_inlines1)}\")  # Should be 1\nprint(f\"- Number of inlines for staff author: {len(desired_inlines2)}\")    # Should be 2\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/contrib/admin/options.py": "             return self.fieldsets\n         return [(None, {'fields': self.get_fields(request, obj)})]\n \ndef get_inlines(self, request, obj):\n\"\"\"Hook for specifying custom inlines.\"\"\"\nreturn self.inlines\n\n     def get_ordering(self, request):\n         \"\"\"\n         Hook for specifying field ordering.\n \n     def get_inline_instances(self, request, obj=None):\n         inline_instances = []\nfor inline_class in self.get_inlines(request, obj):\n             inline = inline_class(self.model, self.admin_site)\n             if request:\n                 if not (inline.has_view_or_change_permission(request, obj) or\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 defines Django model admin classes and their inline behaviors. It specifies how to dynamically return inline classes based on certain conditions, such as whether an author is staff. The sample includes a demonstration with mock users to test the functionality of the admin for different author types. Meanwhile, code sample 2 seems to include a snippet from a Django ModelAdmin that retrieves inline instances, but the functionality is incomplete since it doesn't fully encapsulate the inline customization shown in sample 1. It contains the beginnings of a similar pattern but lacks the complete logic and context of the first sample.\", \"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they lack similar logic and functionality, and sample 2 does not provide the complete context or operations seen in sample 1.\"}"
}