{
    "instance_id": "django__django-13809",
    "agent": "20241202_agentless-1.5_claude-3.5-sonnet-20241022",
    "agent_patch": {
        "django/core/management/commands/runserver.py": "index 85f7e9c..51b32b1 100644\n             '--noreload', action='store_false', dest='use_reloader',\n             help='Tells Django to NOT use the auto-reloader.',\n         )\nparser.add_argument(\n'--skip-checks', action='store_true',\nhelp='Skip system checks.',\n)\n \n     def execute(self, *args, **options):\n         if options['no_color']:\n         shutdown_message = options.get('shutdown_message', '')\n         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'\n \nif not options['skip_checks']:\nself.stdout.write(\"Performing system checks...\\n\\n\")\nself.check(display_num_errors=True)\n# Need to check migrations here, so can't use the\n# requires_migrations_check attribute.\nself.check_migrations()\n         now = datetime.now().strftime('%B %d, %Y - %X')\n         self.stdout.write(now)\n         self.stdout.write((\n         except KeyboardInterrupt:\n             if shutdown_message:\n                 self.stdout.write(shutdown_message)\nsys.exit(0)\n"
    },
    "ground_truth_patch": {
        "django/core/management/commands/runserver.py": "             '--noreload', action='store_false', dest='use_reloader',\n             help='Tells Django to NOT use the auto-reloader.',\n         )\nparser.add_argument(\n'--skip-checks', action='store_true',\nhelp='Skip system checks.',\n)\n \n     def execute(self, *args, **options):\n         if options['no_color']:\n         shutdown_message = options.get('shutdown_message', '')\n         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'\n \nif not options['skip_checks']:\nself.stdout.write('Performing system checks...\\n\\n')\nself.check(display_num_errors=True)\n         # Need to check migrations here, so can't use the\n         # requires_migrations_check attribute.\n         self.check_migrations()\n"
    },
    "response": "{\n\"explanation\": \"The code in code sample 1 is part of Django's runserver command implementation. It adds command-line arguments for server configuration and implements an execute method that performs system checks, checks migrations, displays timing information, and handles keyboard interrupts. The code in code sample 2 is also part of the same Django runserver command, containing the same argument parsing and initial part of the execute method, including system checks and migration checks, but it's missing the datetime display and keyboard interrupt handling code.\",\n\"is_clone\": true,\n\"classification\": \"type-3\",\n\"reasoning\": \"These code samples are type-3 clones because they share the same basic structure and most of the code is identical, but code sample 1 contains additional statements that are not present in code sample 2. Specifically, code sample 1 has extra functionality for displaying the current time and handling keyboard interrupts (datetime.now() display and KeyboardInterrupt exception handling). The core functionality (argument parsing, system checks, and migration checks) remains the same in both samples, but code sample 1 is an extended version with additional features. This matches the definition of type-3 clones where statements can be added, modified, or removed while maintaining syntactic similarity.\"\n}"
}