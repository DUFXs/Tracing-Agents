{
    "instance_id": "django__django-12325",
    "agent": "20241202_agentless-1.5_claude-3.5-sonnet-20241022",
    "agent_patch": {
        "django/db/models/base.py": "index 77c04dd..7e72f00 100644\n             # Skip concrete parent classes.\n             if base != new_class and not base._meta.abstract:\n                 continue\n# Locate OneToOneField instances marked as parent links\n             for field in base._meta.local_fields:\nif isinstance(field, OneToOneField) and getattr(field.remote_field, 'parent_link', False):\n                     related = resolve_relation(new_class, field.remote_field.model)\n                     parent_links[make_model_tuple(related)] = field\n \n"
    },
    "ground_truth_patch": {
        "django/db/models/base.py": "                 continue\n             # Locate OneToOneField instances.\n             for field in base._meta.local_fields:\nif isinstance(field, OneToOneField) and field.remote_field.parent_link:\n                     related = resolve_relation(new_class, field.remote_field.model)\n                     parent_links[make_model_tuple(related)] = field\n \n",
        "django/db/models/options.py": " \n from django.apps import apps\n from django.conf import settings\nfrom django.core.exceptions import FieldDoesNotExist\n from django.db import connections\n from django.db.models import Manager\n from django.db.models.fields import AutoField\n                     field = already_created[0]\n                 field.primary_key = True\n                 self.setup_pk(field)\n             else:\n                 auto = AutoField(verbose_name='ID', primary_key=True, auto_created=True)\n                 model.add_to_class('id', auto)\n"
    },
    "response": "{\n\"explanation\": \"The code in code sample 1 is a Django model class processing snippet that iterates through base classes and looks for OneToOneField instances marked as parent links using getattr(field.remote_field, 'parent_link', False). The code in code sample 2 contains two parts: the first part is similar model processing code that checks for OneToOneField instances using field.remote_field.parent_link, and the second part (in options.py) is unrelated code about setting up primary keys.\",\n\"is_clone\": true,\n\"classification\": \"type-2\",\n\"reasoning\": \"These code samples are type-2 clones because the core logic in both samples is identical, with only minor differences in how they access the parent_link attribute. Sample 1 uses getattr(field.remote_field, 'parent_link', False) while sample 2 directly accesses field.remote_field.parent_link. The structure, flow, and purpose of the code remain the same - both iterate through fields looking for OneToOneField instances marked as parent links and store them in parent_links dictionary. The difference is just in identifier access patterns, which is characteristic of type-2 clones. The additional unrelated code in sample 2 (options.py) can be ignored for this comparison as it's not part of the cloned segment.\"\n}"
}