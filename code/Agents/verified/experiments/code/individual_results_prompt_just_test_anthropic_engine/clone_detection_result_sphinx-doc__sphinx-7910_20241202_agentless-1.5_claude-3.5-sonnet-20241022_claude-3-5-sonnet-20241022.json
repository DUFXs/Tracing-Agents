{
    "instance_id": "sphinx-doc__sphinx-7910",
    "agent": "20241202_agentless-1.5_claude-3.5-sonnet-20241022",
    "agent_patch": {
        "sphinx/ext/napoleon/__init__.py": "index 38d35d1..c74c9da 100644\n                         mod_path = cls_path.split('.')\n                         cls = functools.reduce(getattr, mod_path, mod)\n                     else:\nfrom sphinx.util.inspect import unwrap_all\nunwrapped = unwrap_all(obj)\ncls = unwrapped.__globals__[cls_path]\n                 except Exception:\n                     cls_is_owner = False\n                 else:\n                     (is_private and inc_private) or\n                     (is_init and inc_init)):\n                 return False\nreturn None\n"
    },
    "ground_truth_patch": {
        "sphinx/ext/napoleon/__init__.py": " from sphinx import __display_version__ as __version__\n from sphinx.application import Sphinx\n from sphinx.ext.napoleon.docstring import GoogleDocstring, NumpyDocstring\nfrom sphinx.util import inspect\n \n \n class Config:\n                         mod_path = cls_path.split('.')\n                         cls = functools.reduce(getattr, mod_path, mod)\n                     else:\ncls = inspect.unwrap(obj).__globals__[cls_path]\n                 except Exception:\n                     cls_is_owner = False\n                 else:\n"
    },
    "response": "{\n\"explanation\": \"The code in code sample 1 and code sample 2 both appear to be part of a class attribute resolution mechanism in Sphinx's Napoleon extension. Both samples contain logic to resolve a class path: first attempting to split and traverse a dotted path using functools.reduce, and if that fails, falling back to accessing the class through the object's globals dictionary. The main difference is in how they unwrap the object: sample 1 uses 'unwrap_all' from sphinx.util.inspect, while sample 2 uses 'inspect.unwrap'.\",\n\"is_clone\": true,\n\"classification\": \"type-3\",\n\"reasoning\": \"These code samples are type-3 clones because they share the same basic structure and purpose, with minor modifications in the implementation. The key differences are:\n1. Sample 2 includes additional import statements at the beginning\n2. Sample 1 uses 'unwrap_all' while sample 2 uses 'inspect.unwrap'\n3. Sample 1 includes additional code at the end (the private/init checking logic)\nThe core functionality remains similar, but there are added and modified statements, making this a type-3 clone rather than type-1 or type-2.\"\n}"
}