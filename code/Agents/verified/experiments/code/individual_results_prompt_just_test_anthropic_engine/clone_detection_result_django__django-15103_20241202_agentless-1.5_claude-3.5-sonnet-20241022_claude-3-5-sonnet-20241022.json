{
    "instance_id": "django__django-15103",
    "agent": "20241202_agentless-1.5_claude-3.5-sonnet-20241022",
    "agent_patch": {
        "django/template/defaultfilters.py": "index d1f3941..c45de4d 100644\n \n \n @register.filter(is_safe=True)\ndef json_script(value, element_id=None):\n     \"\"\"\n     Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n     tag.\n",
        "django/utils/html.py": "index 7cf5a9b..471b46d 100644\n }\n \n \ndef json_script(value, element_id=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\nif element_id is None:\nreturn format_html(\n'<script type=\"application/json\">{}</script>',\nmark_safe(json_str)\n)\n     return format_html(\n         '<script id=\"{}\" type=\"application/json\">{}</script>',\n         element_id, mark_safe(json_str)\n"
    },
    "ground_truth_patch": {
        "django/template/defaultfilters.py": "@register.filter(is_safe=True)\ndef json_script(value, element_id=None):\n    \"\"\"\n         Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n    tag (with an optional id).\n    \"\"\"\n    return _json_script(value, element_id)\n",
        "django/utils/html.py": " }\n \n \ndef json_script(value, element_id=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\nif element_id:\ntemplate = '<script id=\"{}\" type=\"application/json\">{}</script>'\nargs = (element_id, mark_safe(json_str))\nelse:\ntemplate = '<script type=\"application/json\">{}</script>'\nargs = (mark_safe(json_str),)\nreturn format_html(template, *args)\n \n \n def conditional_escape(text):\n"
    },
    "response": "{\n\"explanation\": \"The code in code sample 1 and code sample 2 both implement a json_script function that takes a value and an optional element_id parameter. Both functions convert a value to JSON and wrap it in a <script> tag with type='application/json'. The main difference is in the implementation structure: Sample 1 uses a direct if-else with format_html calls, while Sample 2 uses variables to store the template and arguments before calling format_html.\",\n\"is_clone\": true,\n\"classification\": \"type-3\",\n\"reasoning\": \"These code samples are type-3 clones because they perform the same functionality (converting a value to JSON and wrapping it in a script tag) but have slightly different implementation structures. Both versions handle the presence/absence of element_id, but Sample 2 introduces additional variables (template and args) and uses a more modular approach with *args unpacking. The core logic and outcome are the same, but the code structure has been modified, which is characteristic of a type-3 clone. The modifications don't change the functionality but represent a refactoring of how the same logic is expressed.\"\n}"
}