{
    "instance_id": "django__django-12774",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/db/models/query.py": "index d9c9b0db04..7bb6db95b2 100644\n     DJANGO_VERSION_PICKLE_KEY, IntegrityError, NotSupportedError, connections,\n     router, transaction,\n )\nfrom django.db.models import AutoField, DateField, DateTimeField, sql, UniqueConstraint\n from django.db.models.constants import LOOKUP_SEP\n from django.db.models.deletion import Collector\n from django.db.models.expressions import Case, Expression, F, Value, When\n         \"\"\"\n         assert not self.query.is_sliced, \\\n             \"Cannot use 'limit' or 'offset' with in_bulk\"\nif field_name != 'pk':\nfield = self.model._meta.get_field(field_name)\nis_unique = field.unique\nif not is_unique:\n# Check if there's a UniqueConstraint that makes this field unique\nfor constraint in self.model._meta.constraints:\nif isinstance(constraint, UniqueConstraint) and constraint.fields == (field_name,) and constraint.condition is None:\nis_unique = True\nbreak\nif not is_unique:\nraise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n         if id_list is not None:\n             if not id_list:\n                 return {}\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..671652235a\nfrom django.db import models\nfrom django.conf import settings\nimport os\n\n# Configure minimal settings\nsettings.configure(\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:',\n}\n},\nINSTALLED_APPS=[],\nDEFAULT_AUTO_FIELD='django.db.models.AutoField',\n)\n\nimport django\ndjango.setup()\n\n# Create your test model\nclass Article(models.Model):\nslug = models.CharField(max_length=255)\n\nclass Meta:\napp_label = 'myapp'\nconstraints = [\nmodels.UniqueConstraint(fields=[\"slug\"], name=\"article_slug_unq\")\n]\n\n# Create the tables\nfrom django.db import connection\nwith connection.schema_editor() as schema_editor:\nschema_editor.create_model(Article)\n\n# Create some test data\nArticle.objects.create(slug=\"test-1\")\nArticle.objects.create(slug=\"test-2\")\n\n# Try to use in_bulk with the uniquely constrained field\ntry:\nresult = Article.objects.in_bulk(field_name=\"slug\")\nprint(\"Success! in_bulk worked with UniqueConstraint field\")\nprint(f\"Result: {result}\")\nexcept ValueError as e:\nprint(f\"Error occurred as expected: {str(e)}\")\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/db/models/query.py": "         \"\"\"\n         assert not self.query.is_sliced, \\\n             \"Cannot use 'limit' or 'offset' with in_bulk\"\nopts = self.model._meta\nunique_fields = [\nconstraint.fields[0]\nfor constraint in opts.total_unique_constraints\nif len(constraint.fields) == 1\n]\nif (\nfield_name != 'pk' and\nnot opts.get_field(field_name).unique and\nfield_name not in unique_fields\n):\n             raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n         if id_list is not None:\n             if not id_list:\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 is part of a Django model query that checks if a specified field name is unique within the model for a method known as in_bulk. It verifies whether the field name provided is not the primary key and checks if the field is unique or if there's a UniqueConstraint on it, raising a ValueError if these conditions are not met. Code sample 2, on the other hand, is performing a similar operation but utilizes a different approach. It builds a list of unique fields from the model's constraints and checks if the provided field name is not the primary key and is not among these unique fields. If these conditions are not satisfied, it raises the same ValueError.\", \"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they share a similar structure and purpose but differ in implementation details and contain additional, modified, or removed statements.\"}"
}