{
    "instance_id": "psf__requests-1142",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "reproduce_error.py": "new file mode 100644\nindex 00000000..d13f5a7e\nimport requests\nfrom requests.models import Request, PreparedRequest\n\ndef test_content_length_header():\n# Test GET request without body\nprint(\"Testing GET request without body:\")\nreq = Request('GET', 'http://example.com')\nprepped = req.prepare()\nprint(\"Request Headers:\", prepped.headers)\nprint(\"\\n\")\n\n# Test GET request with body (although unusual)\nprint(\"Testing GET request with body:\")\nreq = Request('GET', 'http://example.com', data='test')\nprepped = req.prepare()\nprint(\"Request Headers:\", prepped.headers)\nprint(\"\\n\")\n\n# Test POST request (should always have Content-Length)\nprint(\"Testing POST request:\")\nreq = Request('POST', 'http://example.com', data='test')\nprepped = req.prepare()\nprint(\"Request Headers:\", prepped.headers)\n\nif __name__ == \"__main__\":\ntest_content_length_header()\n\\ No newline at end of file\n",
        "requests/models.py": "index 99260453..01ea1092 100644\n         self.body = body\n \n     def prepare_content_length(self, body):\n# Don't set Content-Length for GET requests unless there's a body\nif self.method == 'GET' and not body:\nif 'Content-Length' in self.headers:\ndel self.headers['Content-Length']\nreturn\n\n# Set Content-Length if we have a body\nif body is not None:\nlength = super_len(body)\nif length:\nself.headers['Content-Length'] = str(length)\nelse:\nself.headers['Content-Length'] = '0'\nelif self.method not in ('GET', 'HEAD'):\n# Set Content-Length to 0 for methods that may have a body\n# but don't have one. Skip for GET/HEAD requests.\nself.headers['Content-Length'] = '0'\n         if hasattr(body, 'seek') and hasattr(body, 'tell'):\n             body.seek(0, 2)\n             self.headers['Content-Length'] = str(body.tell())\n"
    },
    "ground_truth_patch": {
        "requests/models.py": "         self.body = body\n \n     def prepare_content_length(self, body):\n         if hasattr(body, 'seek') and hasattr(body, 'tell'):\n             body.seek(0, 2)\n             self.headers['Content-Length'] = str(body.tell())\n             body.seek(0, 0)\n         elif body is not None:\n             self.headers['Content-Length'] = str(len(body))\nelif self.method not in ('GET', 'HEAD'):\nself.headers['Content-Length'] = '0'\n \n     def prepare_auth(self, auth):\n         \"\"\"Prepares the given HTTP auth data.\"\"\"\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 is a test suite that sends various HTTP requests (GET and POST) to a specified URL ('http://example.com') using the 'requests' library. It specifically tests how the 'Content-Length' header is handled for GET requests with and without a body as well as for POST requests. The function 'test_content_length_header()' prints out the request headers of each type of request made. On the other hand, the code in code sample 2 is a method 'prepare_content_length' within a class (likely within the same requests library) that is responsible for setting the 'Content-Length' header for a request based on the provided body. It includes logic to handle cases for GET requests where the body may or may not be present, and it also manages the situation where the body is a seekable object. It seems to be part of the internal operation of preparing requests, focusing on the 'Content-Length' header. \", \"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because the first sample is a standalone test function for making HTTP requests, while the second sample is an internal method related to handling HTTP request preparation. They serve different purposes in the codebase, and while they may share some functionality via the handling of the 'Content-Length' header, they are not clones of each other in any defined type.\"}"
}