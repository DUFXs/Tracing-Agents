{
    "instance_id": "sphinx-doc__sphinx-8269",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "sphinx/builders/linkcheck.py": "index 9b54afc7c..c65e378a4 100644\n             kwargs['headers'] = get_request_headers()\n \n             try:\n# First check if the base URL is valid\ntry:\n# try a HEAD request first, which should be easier on\n# the server and the network\nresponse = requests.head(req_url, config=self.app.config,\nauth=auth_info, **kwargs)\nresponse.raise_for_status()\nexcept HTTPError:\n# retry with GET request if that fails, some servers\n# don't like HEAD requests.\nresponse = requests.get(req_url, stream=True, config=self.app.config,\nauth=auth_info, **kwargs)\nresponse.raise_for_status()\n\n# Only check anchor if base URL is valid and anchors are enabled\n                 if anchor and self.app.config.linkcheck_anchors:\n                     # Read the whole document and see if #anchor exists\nif not response.headers.get('content-type', '').startswith('text/html'):\n# Skip anchor check for non-HTML content\nreturn 'working', '', 0\n\n                     response = requests.get(req_url, stream=True, config=self.app.config,\nauth=auth_info, **kwargs)\n                     found = check_anchor(response, unquote(anchor))\n                     if not found:\n                         raise Exception(__(\"Anchor '%s' not found\") % anchor)\n             except HTTPError as err:\n\n                 if err.response.status_code == 401:\n                     # We'll take \"Unauthorized\" as working.\n                     return 'working', ' - unauthorized', 0\n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n     }\n\n"
    },
    "ground_truth_patch": {
        "sphinx/builders/linkcheck.py": "                     # Read the whole document and see if #anchor exists\n                     response = requests.get(req_url, stream=True, config=self.app.config,\n                                             auth=auth_info, **kwargs)\nresponse.raise_for_status()\n                     found = check_anchor(response, unquote(anchor))\n \n                     if not found:\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 sets a request header for an HTTP request and attempts to perform a HEAD request to check a URL, handling potential HTTP errors and falling back to a GET request if necessary. It further checks if the anchor exists in the document if the base URL is valid. The code in code sample 2 is a fragment that extracts part of the same logic from the first sample, where it retrieves content using a GET request, raises an error if there are issues, and checks for the existence of an anchor. \", \"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they both perform similar checking for the anchor after attempting an HTTP GET request, but code sample 2 omits surrounding context and additional error handling present in code sample 1.\"}"
}