{
    "instance_id": "django__django-12325",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "django/db/models/base.py": "index 8ea6c05ef9..b22701346b 100644\n             # Skip concrete parent classes.\n             if base != new_class and not base._meta.abstract:\n                 continue\n# Locate OneToOneField instances marked as parent links\nparent_links_count = {}\n             for field in base._meta.local_fields:\nif isinstance(field, OneToOneField) and getattr(field.remote_field, 'parent_link', False):\n                     related = resolve_relation(new_class, field.remote_field.model)\nrelated_tuple = make_model_tuple(related)\nparent_links_count[related_tuple] = parent_links_count.get(related_tuple, 0) + 1\nif parent_links_count[related_tuple] > 1:\nraise ValueError(\n\"Multiple parent links found for '%s' - only one link \"\n\"can be marked as parent_link=True\" % related.__name__\n)\nparent_links[related_tuple] = field\n\n \n         # Track fields inherited from base models.\n         inherited_attributes = set()\n \n \n model_unpickle.__safe_for_unpickle__ = True\n\n\ndiff --git \"a/django/db/models/base.py\\\"\" \"b/django/db/models/base.py\\\"\"\nnew file mode 100644\nindex 0000000000..a134692239\n# Locate OneToOneField instances marked as parent links\nparent_links_count = {}\nfor field in base._meta.local_fields:\nif isinstance(field, OneToOneField) and getattr(field.remote_field, 'parent_link', False):\nrelated = resolve_relation(new_class, field.remote_field.model)\nrelated_tuple = make_model_tuple(related)\nparent_links_count[related_tuple] = parent_links_count.get(related_tuple, 0) + 1\nif parent_links_count[related_tuple] > 1:\nraise ValueError(\n\"Multiple parent links found for '%s' - only one link \"\n\"can be marked as parent_link=True\" % related.__name__\n)\nparent_links[related_tuple] = field\n",
        "test_mti.py": "new file mode 100644\nindex 0000000000..bbcc83180c\nfrom django.db import models\nfrom django.conf import settings\nimport django\nimport os\n\n# Configure minimal Django settings\nsettings.configure(\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:',\n}\n},\nINSTALLED_APPS=[\n'django.contrib.contenttypes',\n],\n)\ndjango.setup()\n\n# Define the models that demonstrate the issue\nclass Document(models.Model):\nclass Meta:\napp_label = 'django.contrib.contenttypes'\n\nclass Picking(Document):\n# Multiple fields with parent_link=True should raise an error\ndocument_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\norigin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT, parent_link=True)\n\nclass Meta:\napp_label = 'django.contrib.contenttypes'\n\nprint(\"Model created successfully\")\n\n"
    },
    "ground_truth_patch": {
        "django/db/models/base.py": "                 continue\n             # Locate OneToOneField instances.\n             for field in base._meta.local_fields:\nif isinstance(field, OneToOneField) and field.remote_field.parent_link:\n                     related = resolve_relation(new_class, field.remote_field.model)\n                     parent_links[make_model_tuple(related)] = field\n \n",
        "django/db/models/options.py": " \n from django.apps import apps\n from django.conf import settings\nfrom django.core.exceptions import FieldDoesNotExist\n from django.db import connections\n from django.db.models import Manager\n from django.db.models.fields import AutoField\n                     field = already_created[0]\n                 field.primary_key = True\n                 self.setup_pk(field)\n             else:\n                 auto = AutoField(verbose_name='ID', primary_key=True, auto_created=True)\n                 model.add_to_class('id', auto)\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 is concerned with iterating over the local fields of a Django model's base class, checking if each field is a OneToOneField marked as a parent link, and maintaining a count of these links. If more than one parent link is found for a model, it raises a ValueError. Additionally, it initializes a set to track inherited model attributes. In contrast, the code in code sample 2 also checks for OneToOneField instances, but it does not raise an error if multiple instances are found. The focus seems to be on locating these fields rather than maintaining a count. Moreover, it includes references to several Django settings and models, including option management for models, but is not directly related to the concept of 'parent links.'\", \"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they perform different functions, and while they share some common elements (use of OneToOneField), their implementations and purposes differ significantly.\"}"
}