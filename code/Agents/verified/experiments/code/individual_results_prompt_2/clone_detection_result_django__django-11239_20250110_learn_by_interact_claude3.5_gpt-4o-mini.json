{
    "instance_id": "django__django-11239",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "django/db/backends/postgresql/client.py": "index cf4df76882..a48e442889 100644\n         subprocess_env = os.environ.copy()\n         if passwd:\n             subprocess_env['PGPASSWORD'] = str(passwd)\n\n# Add SSL parameters\nssl_params = {\n'sslmode': 'PGSSLMODE',\n'sslcert': 'PGSSLCERT',\n'sslkey': 'PGSSLKEY',\n'sslrootcert': 'PGSSLROOTCERT',\n}\nfor param, env_var in ssl_params.items():\nif param in conn_params:\nsubprocess_env[env_var] = str(conn_params[param])\n\n         try:\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n \n     def runshell(self):\n         DatabaseClient.runshell_db(self.connection.get_connection_params())\n\n",
        "reproduce.py": "new file mode 100644\nindex 0000000000..1c949b391f\nimport os\nos.environ['DJANGO_SETTINGS_MODULE'] = 'reproduce_settings'\n\n# Create settings file\nwith open('reproduce_settings.py', 'w') as f:\nf.write('''\nDATABASES = {\n'default': {\n'ENGINE': 'django.db.backends.postgresql',\n'NAME': 'testdb',\n'USER': 'testuser',\n'HOST': 'localhost',\n'PORT': '5432',\n'OPTIONS': {\n'sslmode': 'verify-ca',\n'sslrootcert': 'ca.crt',\n'sslcert': 'client_cert_chain.crt',\n'sslkey': 'client_key.key'\n}\n}\n}\nSECRET_KEY = 'dummy'\n''')\n\n# Debug: print connection params and environment variables\nfrom django.db import connections\nconnection = connections['default']\nparams = connection.get_connection_params()\nprint(\"\\nConnection Parameters:\")\nfor param in ['sslmode', 'sslrootcert', 'sslcert', 'sslkey']:\nif param in params:\nprint(f\"{param}: {params[param]}\")\n\n# Get environment variables that would be set\nsubprocess_env = os.environ.copy()\nssl_params = {\n'sslmode': 'PGSSLMODE',\n'sslcert': 'PGSSLCERT',\n'sslkey': 'PGSSLKEY',\n'sslrootcert': 'PGSSLROOTCERT',\n}\nfor param, env_var in ssl_params.items():\nif param in params:\nsubprocess_env[env_var] = str(params[param])\n\nprint(\"\\nEnvironment Variables:\")\nfor env_var in ['PGSSLMODE', 'PGSSLCERT', 'PGSSLKEY', 'PGSSLROOTCERT']:\nif env_var in subprocess_env:\nprint(f\"{env_var}: {subprocess_env[env_var]}\")\n\nfrom django.core.management import execute_from_command_line\nexecute_from_command_line(['manage.py', 'dbshell'])\n\n",
        "reproduce_settings.py": "new file mode 100644\nindex 0000000000..3b14b3c01e\n\nDATABASES = {\n'default': {\n'ENGINE': 'django.db.backends.postgresql',\n'NAME': 'testdb',\n'USER': 'testuser',\n'HOST': 'localhost',\n'PORT': '5432',\n'OPTIONS': {\n'sslmode': 'verify-ca',\n'sslrootcert': 'ca.crt',\n'sslcert': 'client_cert_chain.crt',\n'sslkey': 'client_key.key'\n}\n}\n}\nSECRET_KEY = 'dummy'\n\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/db/backends/postgresql/client.py": "         dbname = conn_params.get('database', '')\n         user = conn_params.get('user', '')\n         passwd = conn_params.get('password', '')\nsslmode = conn_params.get('sslmode', '')\nsslrootcert = conn_params.get('sslrootcert', '')\nsslcert = conn_params.get('sslcert', '')\nsslkey = conn_params.get('sslkey', '')\n \n         if user:\n             args += ['-U', user]\n         subprocess_env = os.environ.copy()\n         if passwd:\n             subprocess_env['PGPASSWORD'] = str(passwd)\nif sslmode:\nsubprocess_env['PGSSLMODE'] = str(sslmode)\nif sslrootcert:\nsubprocess_env['PGSSLROOTCERT'] = str(sslrootcert)\nif sslcert:\nsubprocess_env['PGSSLCERT'] = str(sslcert)\nif sslkey:\nsubprocess_env['PGSSLKEY'] = str(sslkey)\n         try:\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 is managing PostgreSQL connection parameters by setting up environment variables based on the given credentials and SSL parameters, while code sample 2 similarly retrieves and sets connection parameters along with SSL settings but focuses on different aspects like user and database information. Both samples share the goal of configuring the database connection environment but differ in the specifics of how they do so.\", \"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they are syntactically similar in approach to setting up environment variables for a PostgreSQL connection, but they include modified statements and parameter handling.\"}"
}