{
    "instance_id": "django__django-14349",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/core/validators.py": "index a385819510..3dbe42626d 100644\n     def __call__(self, value):\n         if not isinstance(value, str):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n\n# Check for control characters that should not be in URLs\nif any(c in value for c in '\\n\\r\\t'):\nraise ValidationError(self.message, code=self.code, params={'value': value})\n\n         # Check if the scheme is valid.\n         scheme = value.split('://')[0].lower()\n         if scheme not in self.schemes:\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..7e44fa623c\nfrom django.core.validators import URLValidator\nfrom django.core.exceptions import ValidationError\n\ndef test_url_validator():\nvalidator = URLValidator()\n\n# Test cases with newlines that should fail\ntest_cases = [\n'http://www.djangoproject.com/\\n',\n'http://[::ffff:192.9.5.5]\\n',\n'http://example.com\\r',\n'http://example.com\\t'\n]\n\nfor url in test_cases:\ntry:\nvalidator(url)\nprint(f\"FAIL: ValidationError not raised for {repr(url)}\")\nexcept ValidationError:\nprint(f\"PASS: ValidationError correctly raised for {repr(url)}\")\n\nif __name__ == '__main__':\ntest_url_validator()\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/core/validators.py": "         r'\\Z', re.IGNORECASE)\n     message = _('Enter a valid URL.')\n     schemes = ['http', 'https', 'ftp', 'ftps']\nunsafe_chars = frozenset('\\t\\r\\n')\n \n     def __init__(self, schemes=None, **kwargs):\n         super().__init__(**kwargs)\n     def __call__(self, value):\n         if not isinstance(value, str):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\nif self.unsafe_chars.intersection(value):\nraise ValidationError(self.message, code=self.code, params={'value': value})\n         # Check if the scheme is valid.\n         scheme = value.split('://')[0].lower()\n         if scheme not in self.schemes:\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 defines a function to validate URLs by checking if the input is a string and raising a ValidationError if it contains control characters or if the URL scheme is invalid. It uses a method within the URLValidator class. The second code sample (code sample 2) contains similar functionality, establishing the URLValidator class with its constructor and a similar method for raising a ValidationError based on URL validation, notably by checking against unsafe characters and the URL scheme. Both code samples handle URL validation but with different structural representations.\", \"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they exhibit syntactical similarities in URL validation but also incorporate added or modified statements, particularly around handling unsafe characters in code sample 2.\"}"
}