{
    "instance_id": "sphinx-doc__sphinx-8459",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "reproduce_error.py": "new file mode 100644\nindex 000000000..c3f6ba1bd\nimport os\nimport tempfile\nimport textwrap\nfrom pathlib import Path\n\n# Create a temporary directory for our test documentation\nwith tempfile.TemporaryDirectory() as tmpdir:\n# Create the Python module with our test code\nmodule_dir = Path(tmpdir) / \"mymodule\"\nmodule_dir.mkdir()\n\n# Create types.py\nwith open(module_dir / \"types.py\", \"w\") as f:\nf.write(textwrap.dedent(\"\"\"\nfrom __future__ import annotations\nfrom typing import Any, Dict\n\nJSONObject = Dict[str, Any]\n\ndef sphinx_doc(data: JSONObject) -> JSONObject:\n\\\"\\\"\\\"Does it work.\n\nArgs:\ndata: Does it args.\n\nReturns:\nDoes it work in return.\n\\\"\\\"\\\"\nreturn {}\n\"\"\"))\n\n# Create __init__.py to make it a package\nwith open(module_dir / \"__init__.py\", \"w\") as f:\nf.write(\"\")\n\n# Create conf.py\nwith open(Path(tmpdir) / \"conf.py\", \"w\") as f:\nf.write(textwrap.dedent(\"\"\"\nimport os\nimport sys\nsys.path.insert(0, os.path.abspath('.'))\n\nproject = 'Test'\ncopyright = '2023'\nauthor = 'Test'\n\nextensions = ['sphinx.ext.autodoc', 'sphinx.ext.napoleon']\n\nautodoc_typehints = 'description'\nautodoc_type_aliases = {\n'JSONObject': 'mymodule.types.JSONObject',\n}\n\"\"\"))\n\n# Create index.rst\nwith open(Path(tmpdir) / \"index.rst\", \"w\") as f:\nf.write(textwrap.dedent(\"\"\"\nTest Documentation\n=================\n\n.. autofunction:: mymodule.types.sphinx_doc\n\"\"\"))\n\n# Build the documentation\nos.system(f\"sphinx-build -b html {tmpdir} {tmpdir}/build/html\")\n\n# Print the generated HTML file to see the output\nwith open(Path(tmpdir) / \"build/html/index.html\", \"r\") as f:\ncontent = f.read()\nprint(\"Generated documentation:\")\nprint(content)\n\\ No newline at end of file\n",
        "sphinx/ext/autodoc/typehints.py": "index 70cbc3ba1..d9cdc1dff 100644\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\nsig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\nannotation[param.name] = typing.stringify(param.annotation, app.config.autodoc_type_aliases)\n             if sig.return_annotation is not sig.empty:\nannotation['return'] = typing.stringify(sig.return_annotation, app.config.autodoc_type_aliases)\n     except (TypeError, ValueError):\n         pass\n \n",
        "sphinx/util/typing.py": "index 18649433b..17b785c74 100644\n             return ':obj:`%s.%s`' % (cls.__module__, qualname)\n \n \ndef stringify(annotation: Any, type_aliases: Dict[str, str] = None) -> str:\n     \"\"\"Stringify type annotation object.\"\"\"\n     if isinstance(annotation, str):\n         if annotation.startswith(\"'\") and annotation.endswith(\"'\"):\n     elif annotation is Ellipsis:\n         return '...'\n \n# Check if the full path of the annotation matches any type alias\nif type_aliases:\nfull_name = f\"{getattr(annotation, '__module__', '')}.{getattr(annotation, '__qualname__', '')}\"\nfor alias_name, alias_path in type_aliases.items():\nif alias_path == full_name:\nreturn alias_name\n\n     if sys.version_info >= (3, 7):  # py37+\n         return _stringify_py37(annotation)\n     else:\n"
    },
    "ground_truth_patch": {
        "sphinx/ext/autodoc/typehints.py": "         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\nsig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 includes a patch that creates various files for setting up a Python module, which includes a function definition and documentation-related files. It also sets up a Sphinx documentation build process. The main focus is on generating and managing the documentation for a Python module. On the other hand, the code sample 2 focuses solely on a snippet from a file related to handling type hints in Sphinx, dealing specifically with function annotations for callable objects. It extracts and processes the annotations from function signatures. \", \"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they serve different purposes and functionalities; code sample 1 is about building a module and its documentation, while code sample 2 is centered around extracting type annotations, which constitutes a different context.\"}"
}