{
    "instance_id": "django__django-10914",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/conf/global_settings.py": "index acee9887d2..f659c60ee7 100644\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\nFILE_UPLOAD_PERMISSIONS = 0o644  # Set default file upload permissions to -rw-r--r--\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..332b2bda0e\nimport os\nimport tempfile\nfrom django.conf import settings\nfrom django.core.files.storage import FileSystemStorage\nfrom django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\nfrom django.test.utils import override_settings\n\n# Configure Django settings\nsettings.configure()\n\ndef test_file_permissions():\n# Create a temporary directory for our test\nwith tempfile.TemporaryDirectory() as temp_dir:\nstorage = FileSystemStorage(location=temp_dir)\n\n# Test with small file (uses MemoryUploadedFile internally)\nsmall_content = b\"Small file content\"\nsmall_file = SimpleUploadedFile(\"small.txt\", small_content)\nsmall_path = storage.save(\"small.txt\", small_file)\nsmall_full_path = os.path.join(temp_dir, small_path)\nsmall_perms = oct(os.stat(small_full_path).st_mode & 0o777)\nprint(f\"Small file permissions: {small_perms}\")\n\n# Test with large file (uses TemporaryUploadedFile)\nlarge_content = b\"x\" * (2 * 1024 * 1024)  # 2MB file\ntemp_file = TemporaryUploadedFile(\"large.txt\", \"text/plain\", len(large_content), None)\ntemp_file.write(large_content)\ntemp_file.seek(0)\nlarge_path = storage.save(\"large.txt\", temp_file)\nlarge_full_path = os.path.join(temp_dir, large_path)\nlarge_perms = oct(os.stat(large_full_path).st_mode & 0o777)\nprint(f\"Large file permissions: {large_perms}\")\n\ntemp_file.close()\n\nif __name__ == \"__main__\":\ntest_file_permissions()\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/conf/global_settings.py": "# The numeric mode to set newly-uploaded files to. The value should be a mode\n# you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\nFILE_UPLOAD_PERMISSIONS = 0o644\n\n# The numeric mode to assign to newly-created directories, when uploading files.\n# The value should be a mode as you'd pass to os.chmod;\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 is a script that tests file upload permissions in a Django application by creating temporary files, assigning them to a FileSystemStorage, and checking their permissions using os.stat. The script prints out the permissions of both a small and a large file uploaded for testing. The code in code sample 2 defines a constant in Django configuration that sets the numeric mode for newly-uploaded files, specifically indicating it should be -rw-r--r-- (0o644).\", \"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they have different purposes; code sample 1 is a functional script that tests file upload permissions at runtime, while code sample 2 is a configuration setting. They are not similar in functionality or structure.\"}"
}