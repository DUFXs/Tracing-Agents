{
    "instance_id": "matplotlib__matplotlib-25311",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "lib/matplotlib/legend.py": "index ff6abdb958..1ec49d49f0 100644\n         self._update = update\n \n         super().__init__(legend, legend._legend_box, use_blit=use_blit)\n\ndef __getstate__(self):\n\"\"\"Get state information for pickling.\"\"\"\nstate = self.__dict__.copy()\n# Remove unpicklable canvas reference\nstate.pop('canvas', None)\nstate.pop('cids', None)  # Remove event connection ids\nstate.pop('ref_artist', None)  # Remove artist reference\nstate.pop('got_artist', None)  # Remove artist flag\nreturn state\n\ndef __setstate__(self, state):\n\"\"\"Set state information for unpickling.\"\"\"\nself.__dict__ = state.copy()\n# Initialize canvas-related attributes as None\nself.canvas = None\nself.cids = []\nself.ref_artist = None\nself.got_artist = False\n \n     def finalize_offset(self):\n         if self._update == \"loc\":\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..376fea5eeb\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_draggable_legend():\n# Test 1: Basic draggable legend\nfig1 = plt.figure()\nax1 = fig1.add_subplot(111)\ntime = [0, 1, 2, 3, 4]\nspeed = [40, 43, 45, 47, 48]\nax1.plot(time, speed, label=\"speed\")\nleg1 = ax1.legend()\nleg1.set_draggable(True)\n\ntry:\npickle_data = pickle.dumps(fig1)\nprint(\"Test 1 (Basic draggable legend): Success\")\nexcept Exception as e:\nprint(f\"Test 1 (Basic draggable legend) failed: {str(e)}\")\n\n# Test 2: Multiple draggable legends\nfig2 = plt.figure()\nax2 = fig2.add_subplot(111)\nax2.plot(time, speed, label=\"speed 1\")\nax2.plot([x * 2 for x in speed], label=\"speed 2\")\nleg2 = ax2.legend()\nleg2.set_draggable(True)\n\ntry:\npickle_data = pickle.dumps(fig2)\nprint(\"Test 2 (Multiple plots with draggable legend): Success\")\nexcept Exception as e:\nprint(f\"Test 2 (Multiple plots with draggable legend) failed: {str(e)}\")\n\n# Test 3: Unpickle and verify legend is still draggable\ntry:\nfig_unpickled = pickle.loads(pickle_data)\nlegend = fig_unpickled.axes[0].get_legend()\nassert legend.get_draggable() == True\nprint(\"Test 3 (Unpickle and verify draggable state): Success\")\nexcept Exception as e:\nprint(f\"Test 3 (Unpickle and verify draggable state) failed: {str(e)}\")\n\nif __name__ == \"__main__\":\ntest_pickle_draggable_legend()\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "lib/matplotlib/offsetbox.py": "         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n         self._use_blit = use_blit and self.canvas.supports_blit\n         self.cids = [\n             self.canvas.callbacks._connect_picklable(\n                 'button_release_event', self.on_release),\n         ]\n \n# A property, not an attribute, to maintain picklability.\ncanvas = property(lambda self: self.ref_artist.figure.canvas)\n\n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n             dx = evt.x - self.mouse_x\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 defines methods for getting and setting the state of an object (potentially a draggable legend in a matplotlib context) for pickling and unpickling, including managing attributes like canvas and cids. It also has a method to finalize offsets based on an update state. The code in code sample 2 appears to be handling events related to artist objects in a graphical context (likely related to drag-and-drop functionality), specifically ensuring pickability and managing cursor movement during a drag operation. Both samples involve functionality related to draggable legends or artists in the matplotlib library.\", \"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they serve different purposes and functionalities in the context of a matplotlib application, despite both being related to pickling and artist handling.\"}"
}