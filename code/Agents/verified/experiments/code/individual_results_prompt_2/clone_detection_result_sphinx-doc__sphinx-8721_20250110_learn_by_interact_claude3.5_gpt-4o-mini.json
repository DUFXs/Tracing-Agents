{
    "instance_id": "sphinx-doc__sphinx-8721",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "sphinx/ext/viewcode.py": "index a7d52a91c..ee63101db 100644\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\nif app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\nreturn\nhighlighter = app.builder.highlighter  # type: ignore\nurito = app.builder.get_relative_uri\n\nmodnames = set(env._viewcode_modules)  # type: ignore\n\n\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n \n         'env_version': 1,\n         'parallel_read_safe': True\n     }\n\n\n\ndiff --git a/sphinx/ext/viewcode.py line=183 b/sphinx/ext/viewcode.py line=183\nnew file mode 100644\nindex 000000000..b77ff51d4\nif app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\nreturn\ndiff --git a/sphinx/ext/viewcode.py lines=183-184 b/sphinx/ext/viewcode.py lines=183-184\nnew file mode 100644\nindex 000000000..8415ba299\nif not hasattr(env, '_viewcode_modules'):\nreturn\nif app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\nreturn\n",
        "test_sphinx_project/Makefile": "new file mode 100644\nindex 000000000..1f25c4799\n# Minimal makefile for Sphinx documentation\n#\n\n# You can set these variables from the command line, and also\n# from the environment for the first two.\nSPHINXOPTS    ?=\nSPHINXBUILD   ?= sphinx-build\nSOURCEDIR     = source\nBUILDDIR      = build\n\n.PHONY: help html epub clean\n\nhelp:\n@$(SPHINXBUILD) -M help \"$(SOURCEDIR)\" \"$(BUILDDIR)\" $(SPHINXOPTS) $(O)\n\nhtml:\n$(SPHINXBUILD) -b html \"$(SOURCEDIR)\" \"$(BUILDDIR)/html\" $(SPHINXOPTS) $(O)\n\nepub:\n$(SPHINXBUILD) -b epub \"$(SOURCEDIR)\" \"$(BUILDDIR)/epub\" $(SPHINXOPTS) $(O)\n\nclean:\nrm -rf $(BUILDDIR)/*\n",
        "test_sphinx_project/source/conf.py": "new file mode 100644\nindex 000000000..917be583d\nimport os\nimport sys\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nproject = 'Test Project'\ncopyright = '2024'\nauthor = 'Test'\n\nextensions = [\n'sphinx.ext.viewcode',\n'sphinx.ext.autodoc'\n]\nviewcode_enable_epub = True\n\nhtml_theme = 'alabaster'\n\n\n\n\n\n",
        "test_sphinx_project/source/index.rst": "new file mode 100644\nindex 000000000..f278ae5ab\nWelcome to Test Project's documentation!\n======================================\n\n.. automodule:: test_module\n:members:\n",
        "test_sphinx_project/test_module.py": "new file mode 100644\nindex 000000000..693ccec12\n\"\"\"Test module for viewcode.\"\"\"\n\ndef example_function():\n\"\"\"Example function.\"\"\"\nreturn \"Hello world\"\n\nclass ExampleClass:\n\"\"\"Example class.\"\"\"\n\ndef method(self):\n\"\"\"Example method.\"\"\"\nreturn \"Hello from method\"\n\n"
    },
    "ground_truth_patch": {
        "sphinx/ext/viewcode.py": "     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\nif app.builder.name == \"singlehtml\":\nreturn\nif app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\nreturn\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n \n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 sets the environment for an Sphinx application, checks if the application is able to generate 'epub' output, and initializes highlighter and URI functions. It also manages a set of viewcode modules. The code in code sample 2 has similar checks for the application name and prepares the highlighter and URI functions but specifically checks for a 'singlehtml' configuration instead of 'epub'.\",\"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they are syntactically similar but differ in the checks made on the application name, changing from 'epub' to 'singlehtml', which adds a modified statement.\"}"
}