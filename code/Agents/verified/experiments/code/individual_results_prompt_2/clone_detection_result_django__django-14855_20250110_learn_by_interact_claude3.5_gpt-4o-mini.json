{
    "instance_id": "django__django-14855",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "django/contrib/admin/helpers.py": "index dd154f72ee..9b752f7ec6 100644\n             remote_field.model._meta.model_name,\n         )\n         try:\nurl = reverse(url_name, args=[quote(remote_obj.pk)], current_app=self.model_admin.admin_site.name)\n             return format_html('<a href=\"{}\">{}</a>', url, remote_obj)\n         except NoReverseMatch:\n             return str(remote_obj)\n \n\n     def contents(self):\n         from django.contrib.admin.templatetags.admin_list import _boolean_icon\n         field, obj, model_admin = self.field['field'], self.form.instance, self.model_admin\n                 self.extend(inline_formset.non_form_errors())\n                 for errors_in_inline_form in inline_formset.errors:\n                     self.extend(errors_in_inline_form.values())\n\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..689632ede4\nimport os\nimport django\nfrom django.conf import settings\nfrom django.core.management import call_command\n\n# Configure Django settings first\nsettings.configure(\nDEBUG=True,\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:'\n}\n},\nINSTALLED_APPS=[\n'django.contrib.admin',\n'django.contrib.auth',\n'django.contrib.contenttypes',\n'django.contrib.sessions',\n'django.contrib.messages',\n'django.contrib.staticfiles',\n'__main__',  # Add this module as an app\n],\nMIDDLEWARE=[\n'django.middleware.security.SecurityMiddleware',\n'django.contrib.sessions.middleware.SessionMiddleware',\n'django.middleware.common.CommonMiddleware',\n'django.middleware.csrf.CsrfViewMiddleware',\n'django.contrib.auth.middleware.AuthenticationMiddleware',\n'django.contrib.messages.middleware.MessageMiddleware',\n],\nROOT_URLCONF=__name__,\n)\n\ndjango.setup()\n\nfrom django.contrib.admin import AdminSite\nfrom django.contrib.admin.helpers import AdminReadonlyField\nfrom django.db import models, connection\nfrom django.forms import ModelForm\nfrom django.urls import path, include\n\n# Create test models\nclass Author(models.Model):\nname = models.CharField(max_length=100)\n\ndef __str__(self):\nreturn self.name\n\nclass Meta:\napp_label = 'main'\n\nclass Book(models.Model):\ntitle = models.CharField(max_length=100)\nauthor = models.ForeignKey(Author, on_delete=models.CASCADE)\n\ndef __str__(self):\nreturn self.title\n\nclass Meta:\napp_label = 'main'\n\n# Create custom admin site\nclass CustomAdminSite(AdminSite):\nsite_url = '/custom-admin/'\nname = 'custom_admin'\n\n# Create model admin\nfrom django.contrib import admin\n\nclass BookAdmin(admin.ModelAdmin):\nreadonly_fields = ('author',)\n\n# Set up environment\ncustom_admin = CustomAdminSite()\ncustom_admin.register(Book, BookAdmin)\ncustom_admin.register(Author)\n\n# URL patterns\nurlpatterns = [\npath('custom-admin/', custom_admin.urls),\n]\n\nif __name__ == '__main__':\n# Create database tables directly\nwith connection.schema_editor() as schema_editor:\nschema_editor.create_model(Author)\nschema_editor.create_model(Book)\n\n# Create test data\nauthor = Author.objects.create(name='Test Author')\nbook = Book.objects.create(title='Test Book', author=author)\n\n# Create form instance\nclass BookForm(ModelForm):\nclass Meta:\nmodel = Book\nfields = ['title', 'author']\n\n# Get model admin\nbook_admin = custom_admin._registry[Book]\n\n# Create readonly field\nform = BookForm(instance=book)\nreadonly_field = AdminReadonlyField(form, 'author', is_first=True, model_admin=book_admin)\n\n# Test URL generation\nprint(\"\\nTesting URL generation:\")\nurl = readonly_field.get_admin_url(book._meta.get_field('author').remote_field, author)\nprint(f\"Generated URL HTML: {url}\")\n\n# Verify the URL contains custom-admin\nif '/custom-admin/' in str(url):\nprint(\"\\nSuccess: URL contains custom admin prefix\")\nelse:\nprint(\"\\nFail: URL does not contain custom admin prefix\")\n\n"
    },
    "ground_truth_patch": {
        "django/contrib/admin/helpers.py": "             remote_field.model._meta.model_name,\n         )\n         try:\nurl = reverse(\nurl_name,\nargs=[quote(remote_obj.pk)],\ncurrent_app=self.model_admin.admin_site.name,\n)\n             return format_html('<a href=\"{}\">{}</a>', url, remote_obj)\n         except NoReverseMatch:\n             return str(remote_obj)\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 is part of a Django application that manages the display of related objects in the admin interface. It uses the Django admin functionality to format a hyperlink for a related object, handling instances where the URL cannot be reversed. The code also includes a method to extend error handling for inline formsets, capturing non-form errors. On the other hand, code sample 2 is a snippet that focuses on generating a URL for a related object using the Django reverse function, also within the admin context, but it does so in a slightly different formatting style. Specifically, it shows the argument unpacking in a more expanded way, maintaining the same logical structure but differing in how the parameters are presented in the call to `reverse()`.\", \"is_clone\": true, \"classification\": \"type-1\", \"reasoning\": \"These code samples are type-1 clones because they are identical in logic and functionality, with only differences in whitespace and layout.\"}"
}