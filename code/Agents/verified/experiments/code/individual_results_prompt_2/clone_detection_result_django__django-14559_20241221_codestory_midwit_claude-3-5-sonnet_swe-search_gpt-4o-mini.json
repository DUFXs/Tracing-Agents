{
    "instance_id": "django__django-14559",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/db/models/query.py": "index 387deca527..f5bafd8ab4 100644\n     def bulk_update(self, objs, fields, batch_size=None):\n         \"\"\"\n         Update the given fields in each of the given objects in the database.\nReturns the number of rows matched.\n         \"\"\"\n         if batch_size is not None and batch_size < 0:\n             raise ValueError('Batch size must be a positive integer.')\n         if any(f.primary_key for f in fields):\n             raise ValueError('bulk_update() cannot be used with primary key fields.')\n         if not objs:\nreturn 0\n         # PK is used twice in the resulting update query, once in the filter\n         # and once in the WHEN. Each field will also have one CAST.\n         max_batch_size = connections[self.db].ops.bulk_batch_size(['pk', 'pk'] + fields, objs)\n                     case_statement = Cast(case_statement, output_field=field)\n                 update_kwargs[field.attname] = case_statement\n             updates.append(([obj.pk for obj in batch_objs], update_kwargs))\nrows_matched = 0\n         with transaction.atomic(using=self.db, savepoint=False):\n             for pks, update_kwargs in updates:\nrows_matched += self.filter(pk__in=pks).update(**update_kwargs)\nreturn rows_matched\n     bulk_update.alters_data = True\n \n     def get_or_create(self, defaults=None, **kwargs):\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..5b032ee294\nfrom django.conf import settings\nfrom django.db import connection, models\nimport os\n\n# Configure minimal Django settings\nminimal_settings = {\n'DATABASES': {\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:',\n}\n},\n'INSTALLED_APPS': ['django.contrib.contenttypes'],\n'USE_TZ': False,\n}\n\nsettings.configure(**minimal_settings)\n\nimport django\ndjango.setup()\n\nclass TestModel(models.Model):\nname = models.CharField(max_length=100)\nvalue = models.IntegerField()\n\nclass Meta:\napp_label = 'contenttypes'\n\ndef main():\n# Create tables\nwith connection.schema_editor() as schema_editor:\nschema_editor.create_model(TestModel)\n\n# Create and save some test objects\nobjs = []\nfor i in range(5):\nobj = TestModel.objects.create(name=f\"test{i}\", value=i)\nobjs.append(obj)\n\n# Update all values to be their double\nfor obj in objs:\nobj.value *= 2\n\n# Demonstrate bulk_update() return value\nresult = TestModel.objects.bulk_update(objs, ['value'])\nprint(f\"bulk_update() returns: {result}\")  # Should print 5\n\n# For comparison, show what update() returns\nupdate_result = TestModel.objects.filter(value__lt=6).update(value=10)\nprint(f\"update() returns: {update_result}\")  # Should print 3\n\nif __name__ == '__main__':\nmain()\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/db/models/query.py": "         if any(f.primary_key for f in fields):\n             raise ValueError('bulk_update() cannot be used with primary key fields.')\n         if not objs:\nreturn 0\n         # PK is used twice in the resulting update query, once in the filter\n         # and once in the WHEN. Each field will also have one CAST.\n         max_batch_size = connections[self.db].ops.bulk_batch_size(['pk', 'pk'] + fields, objs)\n                     case_statement = Cast(case_statement, output_field=field)\n                 update_kwargs[field.attname] = case_statement\n             updates.append(([obj.pk for obj in batch_objs], update_kwargs))\nrows_updated = 0\n         with transaction.atomic(using=self.db, savepoint=False):\n             for pks, update_kwargs in updates:\nrows_updated += self.filter(pk__in=pks).update(**update_kwargs)\nreturn rows_updated\n     bulk_update.alters_data = True\n \n     def get_or_create(self, defaults=None, **kwargs):\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 contains the implementation of the 'bulk_update' method in a Django model, which is responsible for updating the specified fields of multiple objects efficiently in the database. It checks for issues with the inputs, including batch size and primary key constraints. It also performs the actual bulk update within a transaction. The code sample additionally includes the 'get_or_create' method definition, but lacks its implementation details. In contrast, code sample 2 is a shortened version of the same 'bulk_update' method, which includes similar logic but has some minor differences such as variable names (using 'rows_updated' instead of 'rows_matched').\", \"is_clone\": true, \"classification\": \"type-2\", \"reasoning\": \"These code samples are type-2 clones because they are identical apart from changes in whitespace, layout, and some identifier names, retaining the overall logic and structure.\"}"
}