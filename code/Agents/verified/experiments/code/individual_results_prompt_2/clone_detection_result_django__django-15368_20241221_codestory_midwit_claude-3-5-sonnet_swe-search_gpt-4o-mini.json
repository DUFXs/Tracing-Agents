{
    "instance_id": "django__django-15368",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/db/models/query.py": "index f8d848e926..3c234d8241 100644\n                 when_statements = []\n                 for obj in batch_objs:\n                     attr = getattr(obj, field.attname)\nif not isinstance(attr, (Expression, F)):\n                         attr = Value(attr, output_field=field)\n                     when_statements.append(When(pk=obj.pk, then=attr))\n                 case_statement = Case(*when_statements, output_field=field)\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..f15be882ee\nfrom django.db import models\nfrom django.db.models import F\nimport os\nimport django\n\n# Set up Django settings\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n\n# Configure minimal settings\nfrom django.conf import settings\nif not settings.configured:\nsettings.configure(\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:',\n}\n},\nINSTALLED_APPS=[\n'django.contrib.contenttypes',\n'django.contrib.auth',\n],\nDEBUG=True,\n)\n\ndjango.setup()\n\n# Create test model\nclass TestModel(models.Model):\nname = models.CharField(max_length=100)\nc8 = models.CharField(max_length=100)\n\nclass Meta:\napp_label = 'test_app'\n\n# Create tables\nfrom django.db import connection\nwith connection.schema_editor() as schema_editor:\nschema_editor.create_model(TestModel)\n\n# Create test data\ntest_obj = TestModel.objects.create(name='test_name', c8='original')\n\n# Try to update using F expression\ntest_obj.c8 = F('name')\nTestModel.objects.bulk_update([test_obj], ['c8'])\n\n# Check the result\ntest_obj.refresh_from_db()\nprint(f\"Updated c8 value: {test_obj.c8}\")\n\n# Print the last SQL query\nfrom django.db import connection\nprint(\"\\nLast SQL query:\")\nprint(connection.queries[-1]['sql'])\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/db/models/query.py": " from django.db.models import AutoField, DateField, DateTimeField, sql\n from django.db.models.constants import LOOKUP_SEP, OnConflict\n from django.db.models.deletion import Collector\nfrom django.db.models.expressions import Case, F, Ref, Value, When\n from django.db.models.functions import Cast, Trunc\n from django.db.models.query_utils import FilteredRelation, Q\n from django.db.models.sql.constants import CURSOR, GET_ITERATOR_CHUNK_SIZE\n                 when_statements = []\n                 for obj in batch_objs:\n                     attr = getattr(obj, field.attname)\nif not hasattr(attr, 'resolve_expression'):\n                         attr = Value(attr, output_field=field)\n                     when_statements.append(When(pk=obj.pk, then=attr))\n                 case_statement = Case(*when_statements, output_field=field)\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 is part of a Django context where it deals with creating a case statement for bulk updating a model based on conditions, using the When and Case constructs from Django's ORM. The code iterates through a batch of objects, retrieves an attribute, and prepares a list of conditions (when_statements) for the update operation. In code sample 2, the snippet appears to be a similar section from the Django codebase, where it also prepares a list of when_statements for a case statement, but checks for attribute resolution rather than type checking, which implies a different function or framed context.\", \"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they are syntactically similar but differ in the logic used to determine whether the attribute requires modification; one uses isinstance while the other uses hasattr.\"}"
}