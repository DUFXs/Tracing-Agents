{
    "instance_id": "mwaskom__seaborn-3069",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "seaborn/_core/scales.py": "index bbd71ec1..02cb3db8 100644\n         return Identity()\n \n \n@dataclass\n @dataclass\n class Nominal(Scale):\n     \"\"\"\n \n     _priority: ClassVar[int] = 3\n \ndef _extend_limits(self, axis, n_categories):\n\"\"\"Extend the axis limits by 0.5 on both sides.\"\"\"\nnew_vmin, new_vmax = -0.5, n_categories - 0.5\naxis.set_view_interval(new_vmin, new_vmax)\naxis.set_data_interval(new_vmin, new_vmax)\nif hasattr(axis, 'axes'):\nif axis.axis_name == 'x':\naxis.axes.set_xlim(new_vmin, new_vmax)\nelse:\naxis.axes.set_ylim(new_vmin, new_vmax)\n\ndef _hide_grid(self, axis):\n\"\"\"Hide the grid for this axis.\"\"\"\nif hasattr(axis, 'axes'):\naxis.axes.grid(False, axis=axis.axis_name)\n\ndef _invert_y_axis(self, axis):\n\"\"\"Invert the y-axis if this is a y-axis scale.\"\"\"\nif hasattr(axis, 'axes') and axis.axis_name == 'y':\naxis.axes.invert_yaxis()\n\n     def _setup(\n         self, data: Series, prop: Property, axis: Axis | None = None,\n     ) -> Scale:\n             name = None  # To work around mpl<3.4 compat issues\n \n             def set_default_locators_and_formatters(self, axis):\nsuper().set_default_locators_and_formatters(axis)\n \n         mpl_scale = CatScale(data.name)\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n \n# Apply categorical plot customizations\nn_categories = len(units_seed)\nnew._extend_limits(axis, n_categories)\nnew._hide_grid(axis)\nnew._invert_y_axis(axis)\n \n         new._matplotlib_scale = mpl_scale\n \n         return np.sign(x) * np.power(np.abs(x), 1 / exp)\n \n     return forward, inverse\n\n"
    },
    "ground_truth_patch": {
        "seaborn/_core/plot.py": " from seaborn._stats.base import Stat\n from seaborn._core.data import PlotData\n from seaborn._core.moves import Move\nfrom seaborn._core.scales import Scale, Nominal\n from seaborn._core.subplots import Subplots\n from seaborn._core.groupby import GroupBy\n from seaborn._core.properties import PROPERTIES, Property\n             # This only affects us when sharing *paired* axes. This is a novel/niche\n             # behavior, so we will raise rather than hack together a workaround.\n             if axis is not None and Version(mpl.__version__) < Version(\"3.4.0\"):\n                 paired_axis = axis in p._pair_spec.get(\"structure\", {})\n                 cat_scale = isinstance(scale, Nominal)\n                 ok_dim = {\"x\": \"col\", \"y\": \"row\"}[axis]\n             ax = sub[\"ax\"]\n             for axis in \"xy\":\n                 axis_key = sub[axis]\naxis_obj = getattr(ax, f\"{axis}axis\")\n \n                 # Axis limits\n                 if axis_key in p._limits:\n                         hi = cast(float, hi) + 0.5\n                     ax.set(**{f\"{axis}lim\": (lo, hi)})\n \n# Nominal scale special-casing\nif isinstance(self._scales.get(axis_key), Nominal):\naxis_obj.grid(False, which=\"both\")\nif axis_key not in p._limits:\nnticks = len(axis_obj.get_major_ticks())\nlo, hi = -.5, nticks - .5\nif axis == \"y\":\nlo, hi = hi, lo\nset_lim = getattr(ax, f\"set_{axis}lim\")\nset_lim(lo, hi, auto=None)\n\n         engine_default = None if p._target is not None else \"tight\"\n         layout_engine = p._layout_spec.get(\"engine\", engine_default)\n         set_layout_engine(self._figure, layout_engine)\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 defines a class `Nominal` that represents a specific scaling mechanism in a plotting library, with methods to extend axis limits, hide grid lines, and invert the y-axis. It also includes a setup function for initializing a scale based on data. On the other hand, code sample 2 is related to plot configurations and handling axis limits within a plotting framework, using checks for paired axes and special handling for nominal scales. Both snippets deal with scaling and axis adjustments in a plotting library, but they focus on different aspects of that functionality.\", \"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they serve different purposes in the plotting framework, with code sample 1 being concerned with scale implementation, and code sample 2 managing plot layout and axis limits.\"}"
}