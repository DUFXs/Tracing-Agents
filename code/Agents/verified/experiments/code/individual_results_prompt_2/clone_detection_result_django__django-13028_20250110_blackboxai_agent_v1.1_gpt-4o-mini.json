{
    "instance_id": "django__django-13028",
    "agent": "20250110_blackboxai_agent_v1.1",
    "agent_patch": {
        ".gitignore": "index 238fb3a200..521baaa795 100644\n tests/.coverage\n build/\n tests/report/\n.aider/\n",
        "django/db/models/sql/query.py": "index ce18098fd2..891d25b36d 100644\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n# Skip filterable check for model instances\nif hasattr(expression, '_meta'):\nreturn\n         if not getattr(expression, 'filterable', True):\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n"
    },
    "ground_truth_patch": {
        "django/db/models/sql/query.py": " \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\nif (\nhasattr(expression, 'resolve_expression') and\nnot getattr(expression, 'filterable', True)\n):\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n                 'clause.'\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 defines a method called 'check_filterable' that checks if a given expression can be used in a WHERE clause within a database query. It raises a NotSupportedError if the expression is not filterable. The method also includes a check for model instances to skip filterable checks. The code in code sample 2 also defines a method 'check_filterable' which serves a similar purpose; it issues an error if the expression cannot be used in a WHERE clause, but it introduces an additional condition that checks if 'resolve_expression' is present in the expression before determining filterability. This indicates a difference in the logic of the two methods.\", \"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because while they are syntactically similar, they have added, modified, or removed statements. Code sample 2 introduces a new check for 'resolve_expression', thereby changing the logic significantly.\"}"
}