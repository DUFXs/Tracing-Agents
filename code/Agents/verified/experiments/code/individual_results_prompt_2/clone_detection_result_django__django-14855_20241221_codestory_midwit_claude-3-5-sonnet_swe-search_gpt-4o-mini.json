{
    "instance_id": "django__django-14855",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/contrib/admin/helpers.py": "index dd154f72ee..209fecd6c8 100644\n             remote_field.model._meta.model_name,\n         )\n         try:\nurl = reverse(\nurl_name,\nargs=[quote(remote_obj.pk)],\ncurrent_app=self.model_admin.admin_site.name if self.model_admin else None\n)\n             return format_html('<a href=\"{}\">{}</a>', url, remote_obj)\n         except NoReverseMatch:\n             return str(remote_obj)\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..f9d2ae86b1\nimport os\nimport django\nfrom django.conf import settings\nfrom django.contrib import admin\nfrom django.db import models\nfrom django.test import TestCase, RequestFactory\nfrom django.urls import path, reverse\n\n# Configure Django settings\nif not settings.configured:\nsettings.configure(\nDEBUG=True,\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:',\n}\n},\nINSTALLED_APPS=[\n'django.contrib.contenttypes',\n'django.contrib.auth',\n'django.contrib.admin',\n'django.contrib.sessions',\n],\nMIDDLEWARE=[\n'django.contrib.sessions.middleware.SessionMiddleware',\n'django.contrib.auth.middleware.AuthenticationMiddleware',\n],\nROOT_URLCONF='__main__',\nSECRET_KEY='dummy-key-for-tests',\n)\ndjango.setup()\n\n# Create test models\nclass Author(models.Model):\nname = models.CharField(max_length=100)\n\ndef __str__(self):\nreturn self.name\n\nclass Meta:\napp_label = 'admin'  # Use existing app_label\n\nclass Book(models.Model):\ntitle = models.CharField(max_length=100)\nauthor = models.ForeignKey(Author, on_delete=models.CASCADE)\n\ndef __str__(self):\nreturn self.title\n\nclass Meta:\napp_label = 'admin'  # Use existing app_label\n\n# Create custom admin site\nclass CustomAdminSite(admin.AdminSite):\nsite_url = '/custom-admin'\nsite_header = 'Custom Admin'\nsite_title = 'Custom Admin Portal'\nindex_title = 'Welcome to Custom Admin'\n\ncustom_admin_site = CustomAdminSite(name='custom_admin')\n\n# Register models with custom admin\nclass BookAdmin(admin.ModelAdmin):\nreadonly_fields = ['author']\n\ncustom_admin_site.register(Book, BookAdmin)\ncustom_admin_site.register(Author)\n\n# URL patterns\nurlpatterns = [\npath('custom-admin/', custom_admin_site.urls),\npath('admin/', admin.site.urls),\n]\n\n# Main execution\nif __name__ == '__main__':\n# Create database tables\nfrom django.db import connection\nwith connection.schema_editor() as schema_editor:\nschema_editor.create_model(Author)\nschema_editor.create_model(Book)\n\n# Set up the test environment\nfactory = RequestFactory()\nrequest = factory.get('/custom-admin/')\n\n# Create test data\nauthor = Author(name=\"Test Author\")\nauthor.save()\nbook = Book(title=\"Test Book\", author=author)\nbook.save()\n\n# Get the admin form\nbook_admin = BookAdmin(Book, custom_admin_site)\nform = book_admin.get_form(request)(instance=book)\n\n# Create readonly field instance\nfrom django.contrib.admin.helpers import AdminReadonlyField\nreadonly_field = AdminReadonlyField(form, 'author', is_first=True, model_admin=book_admin)\n\n# Get the URL for the author link\nresult = readonly_field.get_admin_url(Book._meta.get_field('author').remote_field, author)\nprint(f\"Generated URL in result: {result}\")\n\n# The URL should contain '/custom-admin/' but currently contains '/admin/'\nif '/admin/' in str(result) and not '/custom-admin/' in str(result):\nprint(\"ERROR: URL contains '/admin/' instead of '/custom-admin/'\")\nelse:\nprint(\"SUCCESS: URL contains correct admin path\")\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/contrib/admin/helpers.py": "             remote_field.model._meta.model_name,\n         )\n         try:\nurl = reverse(\nurl_name,\nargs=[quote(remote_obj.pk)],\ncurrent_app=self.model_admin.admin_site.name,\n)\n             return format_html('<a href=\"{}\">{}</a>', url, remote_obj)\n         except NoReverseMatch:\n             return str(remote_obj)\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 appears to handle the generation of a URL for an admin interface in Django using the reverse function, while the code in code sample 2 is a fragment that is a portion of the same logic that generates a URL for the same purpose, but with slight differences in formatting. Sample 1 includes more context and additional logic around creating URLs and managing exceptions, whereas sample 2 contains only the core logic related to generating the URL and returning a formatted HTML string for the link.\", \"is_clone\": true, \"classification\": \"type-1\", \"reasoning\": \"These code samples are type-1 clones because they are identical in logic and functionality, differing only in whitespace and layout.\"}"
}