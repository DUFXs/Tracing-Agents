{
    "instance_id": "django__django-15022",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/contrib/admin/options.py": "index 66f3396a6b..70bdeb8beb 100644\n         if search_fields and search_term:\n             orm_lookups = [construct_search(str(search_field))\n                            for search_field in search_fields]\nsearch_terms = []\n             for bit in smart_split(search_term):\n                 if bit.startswith(('\"', \"'\")) and bit[0] == bit[-1]:\n                     bit = unescape_string_literal(bit)\nsearch_terms.append(bit)\n\n# Combine all terms into a single Q object\nfinal_query = None\nfor bit in search_terms:\n                 or_queries = models.Q(\n                     *((orm_lookup, bit) for orm_lookup in orm_lookups),\n                     _connector=models.Q.OR,\n                 )\nif final_query is None:\nfinal_query = or_queries\nelse:\nfinal_query &= or_queries\n\nif final_query:\nqueryset = queryset.filter(final_query)\n\n             may_have_duplicates |= any(\n                 lookup_spawns_duplicates(self.opts, search_spec)\n                 for search_spec in orm_lookups\n"
    },
    "ground_truth_patch": {
        "django/contrib/admin/options.py": "         if search_fields and search_term:\n             orm_lookups = [construct_search(str(search_field))\n                            for search_field in search_fields]\nterm_queries = []\n             for bit in smart_split(search_term):\n                 if bit.startswith(('\"', \"'\")) and bit[0] == bit[-1]:\n                     bit = unescape_string_literal(bit)\n                     *((orm_lookup, bit) for orm_lookup in orm_lookups),\n                     _connector=models.Q.OR,\n                 )\nterm_queries.append(or_queries)\nqueryset = queryset.filter(models.Q(*term_queries))\n             may_have_duplicates |= any(\n                 lookup_spawns_duplicates(self.opts, search_spec)\n                 for search_spec in orm_lookups\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 constructs search terms from provided search fields and filters a queryset based on these terms combined into a final Q object. Specifically, it checks for duplicate search terms and builds an OR query with the constructed lookups. The code in code sample 2 performs similar functionality, but it uses 'term_queries' instead of 'search_terms' and does not use a final query object; instead, it directly appends to 'term_queries' and filters the queryset based on that. Both samples aim to filter a queryset based on a search term derived from fields, but have notable differences in their structure and variables.\", \"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they are syntactically similar, but they include added or modified statements such as variable names and the way the final result is structured.\"}"
}