{
    "instance_id": "django__django-11964",
    "agent": "20250117_wandb_programmer_o1_crosscheck5",
    "agent_patch": {
        "django/db/models/enums.py": "index bbe362a6ab..d8ede84636 100644\n \n class Choices(enum.Enum, metaclass=ChoicesMeta):\n     \"\"\"Class for creating enumerated choices.\"\"\"\ndef __str__(self):\nreturn str(self.value)\n\n \n \n class IntegerChoices(int, Choices):\n",
        "script_test_enum_bug/__init__.py": "new file mode 100644\nindex 0000000000..e69de29bb2\n",
        "script_test_enum_bug/apps.py": "new file mode 100644\nindex 0000000000..65b068d2c6\nfrom django.apps import AppConfig\n\nclass ScriptTestEnumBugConfig(AppConfig):\nname = 'script_test_enum_bug'\n",
        "script_test_enum_bug/models.py": "new file mode 100644\nindex 0000000000..bab2c7f06c\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\nclass MyChoice(models.TextChoices):\nFIRST_CHOICE = \"first\", _(\"The first choice\")\nSECOND_CHOICE = \"second\", _(\"The second choice\")\n\nclass MyObject(models.Model):\nmy_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n\nclass Meta:\napp_label = \"script_test_enum_bug\"\n",
        "script_test_enum_bug/tests.py": "new file mode 100644\nindex 0000000000..4373957e93\nimport sys\nfrom django.test import TestCase\nfrom .models import MyObject, MyChoice\n\nclass EnumBugTest(TestCase):\ndef test_created_object_is_str(self):\nobj = MyObject(my_str_value=MyChoice.FIRST_CHOICE)\nif str(obj.my_str_value) != \"first\":\nprint(f'FAIL: Unexpected str() of new object field: {str(obj.my_str_value)}')\nsys.exit(1)\nobj.save()\nretrieved = MyObject.objects.get(pk=obj.pk)\nif str(retrieved.my_str_value) != \"first\":\nprint(f'FAIL: Unexpected str() of retrieved object field: {str(retrieved.my_str_value)}')\nsys.exit(1)\nprint(\"PASS: test_enum_bug completed successfully.\")\n",
        "scripts/__init__.py": "new file mode 100644\nindex 0000000000..8b13789179\n\n",
        "scripts/test_enum_bug.py": "new file mode 100644\nindex 0000000000..b684327ccf\nimport sys\nimport os\nimport django\nfrom django.conf import settings\nfrom django.test.utils import get_runner\n\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\n\nif not settings.configured:\nsettings.configure(\nSECRET_KEY='test',\nINSTALLED_APPS=[\n'django.contrib.contenttypes',\n'django.contrib.auth',\n'script_test_enum_bug.apps.ScriptTestEnumBugConfig',\n],\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:',\n}\n},\nMIDDLEWARE=[],\nTEMPLATES=[],\nMIGRATION_MODULES={'script_test_enum_bug': None},\n)\n\ndjango.setup()\n\nif __name__ == '__main__':\ntest_runner = get_runner(settings)()\nfailures = test_runner.run_tests(['script_test_enum_bug'])\nsys.exit(bool(failures))\n"
    },
    "ground_truth_patch": {
        "django/db/models/enums.py": " \n class Choices(enum.Enum, metaclass=ChoicesMeta):\n     \"\"\"Class for creating enumerated choices.\"\"\"\n\ndef __str__(self):\n\"\"\"\nUse value when cast to str, so that Choices set as model instance\nattributes are rendered as expected in templates and similar contexts.\n\"\"\"\nreturn str(self.value)\n \n \n class IntegerChoices(int, Choices):\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 defines a class 'Choices' that extends 'enum.Enum', along with a method '__str__' for string representation, and a subclass 'IntegerChoices' that extends from 'int' and 'Choices'. The code sample 2 contains a fragment of the same 'Choices' class and the '__str__' method with slight differences in whitespace and formatting. The descriptions of the classes are similar, focusing on creating enumerated choices in Django models. However, sample 2 does not fully include integer choices or any additional functionality present in sample 1.\", \"is_clone\": true, \"classification\": \"type-1\", \"reasoning\": \"These code samples are type-1 clones because they are identical except for differences in whitespace and layout without changing any logic or functionality.\"}"
}