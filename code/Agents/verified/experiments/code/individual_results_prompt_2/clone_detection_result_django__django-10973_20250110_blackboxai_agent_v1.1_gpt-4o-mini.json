{
    "instance_id": "django__django-10973",
    "agent": "20250110_blackboxai_agent_v1.1",
    "agent_patch": {
        ".gitignore": "index 238fb3a200..521baaa795 100644\n tests/.coverage\n build/\n tests/report/\n.aider/\n",
        "django/db/backends/postgresql/client.py": "index 7fca6eff30..83e7f193f4 100644\n             args += ['-p', str(port)]\n         args += [dbname]\n \n         sigint_handler = signal.getsignal(signal.SIGINT)\n         try:\n# Set up environment with PGPASSWORD if password is provided\nenv = os.environ.copy()\n             if passwd:\n                 try:\n# Verify password can be encoded in current locale\npasswd.encode()\nenv['PGPASSWORD'] = passwd\n                 except UnicodeEncodeError:\n                     # If the current locale can't encode the data, let the\n                     # user input the password manually.\n                     pass\n\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\nsubprocess.run(args, check=True, env=env)\n         finally:\n             # Restore the original SIGINT handler.\n             signal.signal(signal.SIGINT, sigint_handler)\n# Clean up PGPASSWORD from env if we set it\nif passwd and 'PGPASSWORD' in env:\ndel env['PGPASSWORD']\n \n     def runshell(self):\n         DatabaseClient.runshell_db(self.connection.get_connection_params())\n"
    },
    "ground_truth_patch": {
        "django/db/backends/postgresql/client.py": " import signal\n import subprocess\n \n from django.db.backends.base.client import BaseDatabaseClient\n \n \n class DatabaseClient(BaseDatabaseClient):\n     executable_name = 'psql'\n \n             args += ['-p', str(port)]\n         args += [dbname]\n \n         sigint_handler = signal.getsignal(signal.SIGINT)\nsubprocess_env = os.environ.copy()\nif passwd:\nsubprocess_env['PGPASSWORD'] = str(passwd)\n         try:\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\nsubprocess.run(args, check=True, env=subprocess_env)\n         finally:\n             # Restore the original SIGINT handler.\n             signal.signal(signal.SIGINT, sigint_handler)\n \n     def runshell(self):\n         DatabaseClient.runshell_db(self.connection.get_connection_params())\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 is responsible for setting up an environment for establishing a connection to a PostgreSQL database. It checks for a password and sets the PGPASSWORD environment variable if one exists. It also handles interrupt signals during queries. The code in code sample 2 serves a similar purpose, where it sets up the environment variables including PGPASSWORD and processes the signal handling. However, it initializes 'subprocess_env' slightly differently. Both samples implement a method 'runshell' that calls a database method with connection parameters.\", \"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they are syntactically similar with modifications in code structure and variable names, yet they fulfill the same functionality.\"}"
}