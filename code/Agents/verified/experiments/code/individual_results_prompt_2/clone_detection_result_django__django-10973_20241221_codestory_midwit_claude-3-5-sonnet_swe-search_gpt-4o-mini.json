{
    "instance_id": "django__django-10973",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/db/backends/postgresql/client.py": "index 7fca6eff30..cf31b84801 100644\n import signal\n import subprocess\n \n from django.db.backends.base.client import BaseDatabaseClient\n \n \n class DatabaseClient(BaseDatabaseClient):\n     executable_name = 'psql'\n \n             args += ['-p', str(port)]\n         args += [dbname]\n \nenv = os.environ.copy()\nif passwd:\nenv['PGPASSWORD'] = passwd\n\n         sigint_handler = signal.getsignal(signal.SIGINT)\n         try:\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\nsubprocess.run(args, env=env, check=True)\n         finally:\n             # Restore the original SIGINT handler.\n             signal.signal(signal.SIGINT, sigint_handler)\n \n     def runshell(self):\n         DatabaseClient.runshell_db(self.connection.get_connection_params())\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..c2624ace62\nfrom django.db.backends.postgresql.client import DatabaseClient\n\n# Test with various connection parameters\ntest_cases = [\n{\n# Basic case with just database name\n'database': 'test_db',\n},\n{\n# Full case with all parameters\n'database': 'test_db',\n'user': 'test_user',\n'password': 'test_pass',\n'host': 'localhost',\n'port': '5432',\n},\n{\n# Case with special characters in password\n'database': 'test_db',\n'user': 'test_user',\n'password': 'test:pass@123',\n'host': 'localhost',\n},\n]\n\nprint(\"Testing PostgreSQL client with different connection parameters...\")\nfor i, params in enumerate(test_cases, 1):\nprint(f\"\\nTest case {i}:\")\nprint(f\"Parameters: {params}\")\ntry:\n# This will try to connect to PostgreSQL\n# Note: This will actually try to run psql, so it might fail if PostgreSQL\n# is not installed or the credentials are invalid. That's expected and OK\n# for testing the implementation.\nDatabaseClient.runshell_db(params)\nexcept Exception as e:\nprint(f\"Got expected error (if PostgreSQL is not configured): {e}\")\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/db/backends/postgresql/client.py": " import signal\n import subprocess\n \n from django.db.backends.base.client import BaseDatabaseClient\n \n \n class DatabaseClient(BaseDatabaseClient):\n     executable_name = 'psql'\n \n             args += ['-p', str(port)]\n         args += [dbname]\n \n         sigint_handler = signal.getsignal(signal.SIGINT)\nsubprocess_env = os.environ.copy()\nif passwd:\nsubprocess_env['PGPASSWORD'] = str(passwd)\n         try:\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\nsubprocess.run(args, check=True, env=subprocess_env)\n         finally:\n             # Restore the original SIGINT handler.\n             signal.signal(signal.SIGINT, sigint_handler)\n \n     def runshell(self):\n         DatabaseClient.runshell_db(self.connection.get_connection_params())\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 defines a `DatabaseClient` class that manages a connection to a PostgreSQL database using the `psql` executable. It configures some connection parameters, handles environment variables for passwords, and ensures that a signal handler for SIGINT is restored after running a subprocess command. It also includes a `runshell` method to initiate a database session with specific connection parameters. The code sample 2 contains a similar `DatabaseClient` class with almost identical functionality but includes minor modifications, such as the naming of the environment variable and how the password is assigned. Additionally, it organizes the subprocess call slightly differently. \", \"is_clone\": true, \"classification\": \"type-2\", \"reasoning\": \"These code samples are type-2 clones because they are identical in structure and purpose, with differences in variable names, minor layout changes, and some modification in comments which do not alter the functional equivalence.\"}"
}