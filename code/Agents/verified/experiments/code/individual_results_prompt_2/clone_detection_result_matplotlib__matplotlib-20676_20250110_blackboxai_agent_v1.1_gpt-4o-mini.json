{
    "instance_id": "matplotlib__matplotlib-20676",
    "agent": "20250110_blackboxai_agent_v1.1",
    "agent_patch": {
        ".gitignore": "index a334bf2874..b052ddac06 100644\n lib/matplotlib/backends/web_backend/package-lock.json\n \n LICENSE/LICENSE_QHULL\n.aider/\n",
        "lib/matplotlib/widgets.py": "index a199e45d40..bb59552eda 100644\n \n         if self.direction == 'horizontal':\n             trans = ax.get_xaxis_transform()\nxlims = ax.get_xlim()\nw, h = xlims[1] - xlims[0], 1\nself._rect = Rectangle((xlims[0], 0), w, h,\ntransform=trans,\nvisible=False,\n**self._rectprops)\n         else:\n             trans = ax.get_yaxis_transform()\nylims = ax.get_ylim()\nw, h = 1, ylims[1] - ylims[0]\nself._rect = Rectangle((0, ylims[0]), w, h,\n                                transform=trans,\n                                visible=False,\n                                **self._rectprops)\n             self.update()\n \n         v = event.xdata if self.direction == 'horizontal' else event.ydata\nif v is None:  # Don't process events outside data range\nreturn False\n\n         # self._pressv and self._prev are deprecated but we still need to\n         # maintain them\n         self._pressv = v\n             # visibility to False and extents to (v, v)\n             # update will be called when setting the extents\n             self.visible = False\n# Only set extents if we have valid data coordinates\nif v is not None:\nself.extents = v, v\n             # We need to set the visibility back, so the span selector will be\n             # drawn when necessary (span width > 0)\n             self.visible = True\n"
    },
    "ground_truth_patch": {
        "lib/matplotlib/widgets.py": "             self.artists.append(self._rect)\n \n     def _setup_edge_handle(self, props):\n# Define initial position using the axis bounds to keep the same bounds\nif self.direction == 'horizontal':\npositions = self.ax.get_xbound()\nelse:\npositions = self.ax.get_ybound()\nself._edge_handles = ToolLineHandles(self.ax, positions,\n                                              direction=self.direction,\n                                              line_props=props,\n                                              useblit=self.useblit)\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 defines behavior for a rectangular selection tool in a plotting application, where it manages the visibility and dimensions of a rectangle based on user input, depending on the direction (horizontal or vertical). It also processes events to ensure that the rectangle's properties are updated based on the user's actions. In contrast, code sample 2 deals with setting up edge handles for a selection tool, using axis bounds to determine the initial position of the handles. It creates instances of 'ToolLineHandles' for visual interaction on the plot based on the direction. Both samples are part of a tool for interactive selection in a plotting library, but they deal with different aspects of that tool's functionality.\", \"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they serve different functional purposes within the selection tool, with sample 1 focusing on rectangle management and sample 2 on edge handle setup.\"}"
}