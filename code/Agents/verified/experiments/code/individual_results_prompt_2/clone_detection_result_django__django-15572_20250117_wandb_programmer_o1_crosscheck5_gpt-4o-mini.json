{
    "instance_id": "django__django-15572",
    "agent": "20250117_wandb_programmer_o1_crosscheck5",
    "agent_patch": {
        "django/template/autoreload.py": "index 84c8554165..faca5779cf 100644\n def get_template_directories():\n     # Iterate through each template backend and find\n     # any template_loader that has a 'get_dirs' method.\n# Collect the directories, filtering out Django templates\n# and ignoring empty entries.\nfrom pathlib import Path\nfrom django.template import engines\nfrom django.template.backends.django import DjangoTemplates\nfrom django.utils._os import to_path\nfrom django.utils.autoreload import is_django_path\n\n     cwd = Path.cwd()\n     items = set()\n     for backend in engines.all():\n         if not isinstance(backend, DjangoTemplates):\n             continue\n \n# Skip empty strings in backend.engine.dirs\nitems.update(cwd / to_path(d) for d in backend.engine.dirs if d)\n \n         for loader in backend.engine.template_loaders:\n             if not hasattr(loader, \"get_dirs\"):\n                 continue\n# Skip empty directories\n             items.update(\n                 cwd / to_path(directory)\n                 for directory in loader.get_dirs()\nif directory and not is_django_path(directory)\n             )\n     return items\n \n \n\n def reset_loaders():\n     for backend in engines.all():\n         if not isinstance(backend, DjangoTemplates):\n",
        "scripts/test_autoreload_empty_string.py": "new file mode 100644\nindex 0000000000..2ed095f7a5\nimport sys\nfrom pathlib import Path\nfrom django.conf import settings\nimport django\n\ndef main():\nprint(\"Testing Django autoreload behavior with an empty string in TEMPLATES['DIRS'].\")\n\n# Configure Django with minimal settings\nif not settings.configured:\nsettings.configure(\nDEBUG=True,\nSECRET_KEY='test_key',\nINSTALLED_APPS=[],\nTEMPLATES=[\n{\n'BACKEND': 'django.template.backends.django.DjangoTemplates',\n'DIRS': [\"\"],  # Introduce the empty string bug\n'APP_DIRS': True,\n}\n]\n)\n\ndjango.setup()\n\ntry:\nfrom django.template.autoreload import get_template_directories\nexcept ImportError as e:\nprint(f\"Could not import necessary modules: {e}\")\nsys.exit(2)\n\nproject_root = Path.cwd()\nprint(f\"Project root is: {project_root}\")\n\n# Collect template directories\ndirectories = get_template_directories()\nprint(\"Collected template directories:\")\nfor d in directories:\nprint(f\"  {d}\")\n\n# Check if project root is in directories\nif project_root in directories:\nprint(\"Bug present: empty string in TEMPLATES['DIRS'] caused project root to appear in get_template_directories.\")\nsys.exit(1)\nelse:\nprint(\"Bug NOT present: empty string did NOT cause project root in get_template_directories.\")\nsys.exit(0)\n\nif __name__ == '__main__':\nmain()\n"
    },
    "ground_truth_patch": {
        "django/template/autoreload.py": "         if not isinstance(backend, DjangoTemplates):\n             continue\n \nitems.update(cwd / to_path(dir) for dir in backend.engine.dirs if dir)\n \n         for loader in backend.engine.template_loaders:\n             if not hasattr(loader, \"get_dirs\"):\n             items.update(\n                 cwd / to_path(directory)\n                 for directory in loader.get_dirs()\nif directory and not is_django_path(directory)\n             )\n     return items\n \n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 defines a function `get_template_directories()` that collects template directories from various backends in Django, filtering out empty directories and Django template paths. It also defines a function `reset_loaders()` that checks the backends. The code in code sample 2 is a partial section taken from the `get_template_directories()` function, showing logic for checking instances of backends, updating item directories, and skipping empty directories. Both samples deal with the functionality related to template directories in Django.\", \"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because code sample 2 is a subset of the functionality present in code sample 1. They have added and removed lines relative to the complete code, modifying the context but maintaining related roles in the same function.\"}"
}