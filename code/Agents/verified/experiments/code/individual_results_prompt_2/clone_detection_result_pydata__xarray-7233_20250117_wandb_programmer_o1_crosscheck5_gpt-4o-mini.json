{
    "instance_id": "pydata__xarray-7233",
    "agent": "20250117_wandb_programmer_o1_crosscheck5",
    "agent_patch": {
        "test_coarsen_nondim_coord.py": "new file mode 100644\nindex 00000000..e714255c\n#!/usr/bin/env python\n\nimport sys\nimport xarray as xr\nimport numpy as np\n\nprint(\"Starting test for coarsen construct nondim coords bug...\")\n\nda = xr.DataArray(np.arange(24), dims=[\"time\"])\nda = da.assign_coords(day=365 * da)\nds = da.to_dataset(name=\"T\")\n\nds_coarsened = ds.coarsen(time=12).construct(time=(\"year\", \"month\"))\n\nprint(\"Coordinates in coarsened dataset:\", list(ds_coarsened.coords.keys()))\n\nif \"day\" not in ds_coarsened.coords:\nprint(\"ERROR: 'day' is not in coarsened coords. Test FAIL.\")\nsys.exit(1)\nelse:\nprint(\"'day' is still a coordinate in coarsened DS. Test PASS.\")\nsys.exit(0)\n",
        "xarray/core/rolling.py": "index c194ec08..2f8dba80 100644\n         self,\n         window_dim=None,\n         keep_attrs=None,\n**window_dim_kwargs\n     ) -> T_Xarray:\n         from .dataarray import DataArray\n         from .dataset import Dataset\n\n         window_dim = either_dict_or_kwargs(\n             window_dim, window_dim_kwargs, \"Coarsen.construct\"\n         )\n         if not window_dim:\nraise ValueError(\"Either window_dim or window_dim_kwargs need to be specified.\")\n\n         bad_new_dims = tuple(\n             win\n             for win, dims in window_dim.items()\n             raise ValueError(\n                 f\"Please provide exactly two dimension names for the following coarsening dimensions: {bad_new_dims}\"\n             )\n\n         if keep_attrs is None:\n             keep_attrs = _get_keep_attrs(default=True)\n\n         missing_dims = set(window_dim) - set(self.windows)\n         if missing_dims:\n             raise ValueError(\n             raise ValueError(\n                 f\"'window_dim' includes dimensions that will not be coarsened: {extra_windows}\"\n             )\n\n         reshaped = Dataset()\n         if isinstance(self.obj, DataArray):\n             obj = self.obj._to_temp_dataset()\n         else:\n             obj = self.obj\n\n         reshaped.attrs = obj.attrs if keep_attrs else {}\n\n         for key, var in obj.variables.items():\n             reshaped_dims = tuple(\n                 itertools.chain(*[window_dim.get(dim, [dim]) for dim in list(var.dims)])\n                 reshaped[key] = (reshaped_dims, reshaped_var, attrs)\n             else:\n                 reshaped[key] = var\n\nshould_be_coords = {c for c in self.obj.coords if c in reshaped.variables}\n         result = reshaped.set_coords(should_be_coords)\n\n         if isinstance(self.obj, DataArray):\n             return self.obj._from_temp_dataset(result)\n         else:\n             return result\n\n \n \n class DataArrayCoarsen(Coarsen[\"DataArray\"]):\n"
    },
    "ground_truth_patch": {
        "xarray/core/rolling.py": "             else:\n                 reshaped[key] = var\n \n# should handle window_dim being unindexed\nshould_be_coords = (set(window_dim) & set(self.obj.coords)) | set(\nself.obj.coords\n)\n         result = reshaped.set_coords(should_be_coords)\n         if isinstance(self.obj, DataArray):\n             return self.obj._from_temp_dataset(result)\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 initializes a test for a bug in the coarsening construct for non-dimensional coordinates in xarray, creating a DataArray and modifying its coordinates before coarsening it. It checks if a specific coordinate ('day') exists in the coarsened dataset after constructing it, and prints the result accordingly. In contrast, code sample 2 consists of a part of the implementation for a Coarsen class in the xarray library, specifically handling the reshaping of a dataset and managing coordinates, without the checks and print statements found in sample 1.\", \"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they serve different purposes: sample 1 is focused on testing and output, while sample 2 is part of the library implementation managing surfacing coordinates.\"}"
}