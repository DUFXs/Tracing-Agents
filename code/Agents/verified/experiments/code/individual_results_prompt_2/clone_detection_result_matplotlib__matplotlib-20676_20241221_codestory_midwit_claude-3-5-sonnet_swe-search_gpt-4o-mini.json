{
    "instance_id": "matplotlib__matplotlib-20676",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "lib/matplotlib/widgets.py": "index a199e45d40..4a78493536 100644\n             self.canvas = ax.figure.canvas\n             self.connect_default_events()\n \n# Get current axis limits\nxmin, xmax = ax.get_xlim()\nymin, ymax = ax.get_ylim()\n\n         if self.direction == 'horizontal':\n# For horizontal selector, use data coordinates for x and axes coordinates for y\nself._rect = Rectangle((xmin, 0), xmax - xmin, 1,\ntransform=ax.get_xaxis_transform(),\nvisible=False,\n**self._rectprops)\n         else:\n# For vertical selector, use data coordinates for y and axes coordinates for x\nself._rect = Rectangle((0, ymin), 1, ymax - ymin,\ntransform=ax.get_yaxis_transform(),\n                                visible=False,\n                                **self._rectprops)\n \n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..5ac27a1c1c\nfrom matplotlib import pyplot as plt\nfrom matplotlib.widgets import SpanSelector\n\nfig, ax = plt.subplots()\nax.plot([10, 20], [10, 20])\nss = SpanSelector(ax, print, \"horizontal\", interactive=True)\nplt.show()\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "lib/matplotlib/widgets.py": "             self.artists.append(self._rect)\n \n     def _setup_edge_handle(self, props):\n# Define initial position using the axis bounds to keep the same bounds\nif self.direction == 'horizontal':\npositions = self.ax.get_xbound()\nelse:\npositions = self.ax.get_ybound()\nself._edge_handles = ToolLineHandles(self.ax, positions,\n                                              direction=self.direction,\n                                              line_props=props,\n                                              useblit=self.useblit)\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 is primarily focused on defining the behavior of a SpanSelector for a Matplotlib figure, where it establishes a rectangle to visually select spans of a plot based on the specified direction (horizontal or vertical). It retrieves the current axis limits and adjusts the rectangle's size and transformation accordingly. Meanwhile, code sample 2 describes a method for setting up an edge handle for a tool that manages line handles on an axis. It determines the initial position based on the axis bounds depending on the given direction and initializes ToolLineHandles with the specified properties.\", \"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they accomplish very different tasks related to distinct features within the Matplotlib library. Sample 1 deals with the span selection while sample 2 is about edge handle setup, showcasing different logic and structures.\"}"
}