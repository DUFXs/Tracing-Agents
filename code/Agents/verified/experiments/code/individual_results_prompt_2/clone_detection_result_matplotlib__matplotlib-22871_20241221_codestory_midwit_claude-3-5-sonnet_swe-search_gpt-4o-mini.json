{
    "instance_id": "matplotlib__matplotlib-22871",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "lib/matplotlib/dates.py": "index 4d8ddf3ee5..0584767d91 100644\n         # 3: hours, 4: minutes, 5: seconds, 6: microseconds\n         for level in range(5, -1, -1):\n             if len(np.unique(tickdate[:, level])) > 1:\n# Always show offset if we're not starting from January\nfirst_month = tickdate[0][1]  # Get month of first tick\nshow_offset = first_month != 1 or level > 1\n                 break\n             elif level == 0:\n                 # all tickdate are the same, so only micros might be different\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..fe35bc8c26\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime, timedelta\n\n#create time array\ninitial = datetime(2021,2,14,0,0,0)\ntime_array = [initial + timedelta(days=x) for x in range(1,200)]\n\n#create data array\ndata = [-x**2/20000 for x in range(1,200)]\n\n#plot data\nfig,ax = plt.subplots()\nax.plot(time_array,data) \n\nlocator = mdates.AutoDateLocator()\nformatter = mdates.ConciseDateFormatter(locator)\n\nax.grid(True)\nax.set_ylabel(\"Temperature ($\\degree$C)\")\nax.xaxis.set_major_locator(locator)   \nax.xaxis.set_major_formatter(formatter)\nfig.autofmt_xdate() #automatically makes the x-labels rotate\n\nplt.savefig('test_plot.png')\nplt.close()\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "lib/matplotlib/dates.py": "         # mostly 0: years,  1: months,  2: days,\n         # 3: hours, 4: minutes, 5: seconds, 6: microseconds\n         for level in range(5, -1, -1):\nunique = np.unique(tickdate[:, level])\nif len(unique) > 1:\n# if 1 is included in unique, the year is shown in ticks\nif level < 2 and np.any(unique == 1):\n                     show_offset = False\n                 break\n             elif level == 0:\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 appears to be part of a larger function that checks for duplicates in a date array (tickdate) across different levels (years, months, etc.), specifically if there are multiple unique values represented in the array. It includes logic for displaying a time offset unless certain conditions are met (e.g., starting from January). In contrast, the code in code sample 2 is syntactically similar but modifies some of the content and introduces new logic to determine the show_offset variable based on the condition involving the value '1'.\", \"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they are syntactically similar but with added or modified statements that change the flow and logic, specifically regarding the condition that determines the show_offset variable.\"}"
}