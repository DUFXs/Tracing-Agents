{
    "instance_id": "sphinx-doc__sphinx-7454",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "reproduce_error.py": "new file mode 100644\nindex 000000000..ddd14a9b3\nimport os\nimport shutil\nimport subprocess\n\n# Create test directory structure\ntest_dir = \"sphinx_type_hint_links\"\nif os.path.exists(test_dir):\nshutil.rmtree(test_dir)\nos.makedirs(test_dir)\nos.chdir(test_dir)\n\n# Create test files\nwith open(\"type_hint_test.py\", \"w\") as f:\nf.write(\"def f1() -> None: return None\\n\")\nf.write(\"def f2() -> int: return 42\\n\")\n\nos.makedirs(\"docs\", exist_ok=True)\n\nwith open(\"docs/conf.py\", \"w\") as f:\nf.write('extensions = [\"sphinx.ext.autodoc\", \"sphinx.ext.intersphinx\"]\\n')\nf.write('intersphinx_mapping = {\"python\": (\"https://docs.python.org/3\", None)}\\n')\nf.write('#autodoc_typehints = \"description\"\\n')\n\nwith open(\"docs/index.rst\", \"w\") as f:\nf.write(\".. automodule:: type_hint_test\\n\")\nf.write(\".. autofunction:: f1\\n\")\nf.write(\".. autofunction:: f2\\n\")\n\nos.makedirs(\"html\", exist_ok=True)\n\n# Run sphinx-build\nsubprocess.run([\"python3\", \"-m\", \"sphinx\", \"-nW\", \"-b\", \"html\", \"--keep-going\", \"docs\", \"html\"])\n\nprint(\"\\nSearching for links:\")\nwith open(\"html/index.html\", \"r\") as f:\ncontent = f.read()\nfor line in content.split(\"\\n\"):\nif \"docs.python.org\" in line:\nprint(line)\n\n# Now test with description mode\nprint(\"\\nTesting with description mode:\")\nwith open(\"docs/conf.py\", \"w\") as f:\nf.write('extensions = [\"sphinx.ext.autodoc\", \"sphinx.ext.intersphinx\"]\\n')\nf.write('intersphinx_mapping = {\"python\": (\"https://docs.python.org/3\", None)}\\n')\nf.write('autodoc_typehints = \"description\"\\n')\n\nsubprocess.run([\"python3\", \"-m\", \"sphinx\", \"-nW\", \"-b\", \"html\", \"--keep-going\", \"docs\", \"html\"])\n\nprint(\"\\nSearching for links (description mode):\")\nwith open(\"html/index.html\", \"r\") as f:\ncontent = f.read()\nfor line in content.split(\"\\n\"):\nif \"docs.python.org\" in line:\nprint(line)\n\\ No newline at end of file\n",
        "sphinx/domains/python.py": "index 893bb0a22..0d21df2f2 100644\n def _parse_annotation(annotation: str) -> List[Node]:\n     \"\"\"Parse type annotation.\"\"\"\n     def make_xref(text: str) -> addnodes.pending_xref:\n# Use 'obj' role for None, 'class' role for other types\nreftype = 'obj' if text == 'None' else 'class'\n         return pending_xref('', nodes.Text(text),\nrefdomain='py', reftype=reftype, reftarget=text)\n \n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n"
    },
    "ground_truth_patch": {
        "sphinx/domains/python.py": " def _parse_annotation(annotation: str) -> List[Node]:\n     \"\"\"Parse type annotation.\"\"\"\n     def make_xref(text: str) -> addnodes.pending_xref:\nif text == 'None':\nreftype = 'obj'\nelse:\nreftype = 'class'\n\n         return pending_xref('', nodes.Text(text),\nrefdomain='py', reftype=reftype, reftarget=text)\n \n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 sets up a directory structure and generates Python files for testing Sphinx documentation, including writing type hints and running the Sphinx build process. It checks for links in the generated HTML output. In contrast, the code in code sample 2 defines a function that parses type annotations for Python, with inner logic to create references based on the provided annotation. The two samples are entirely different in purpose and implementation.\", \"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they serve different purposes and functionalities; one is building a test environment for documentation generation, while the other is a function for parsing type annotations.\"}"
}