{
    "instance_id": "django__django-15103",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "django/template/defaultfilters.py": "index 5ccef38048..b4900608e7 100644\n \n \n @register.filter(is_safe=True)\ndef json_script(value, element_id=None):\n     \"\"\"\n     Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n     tag.\n         return pformat(value)\n     except Exception as e:\n         return \"Error in formatting: %s: %s\" % (e.__class__.__name__, e)\n\n",
        "django/utils/html.py": "index da1b5675ec..e541f3802d 100644\n }\n \n \ndef json_script(value, element_id=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\nif element_id is None:\nreturn format_html(\n'<script type=\"application/json\">{}</script>',\nmark_safe(json_str)\n)\n     return format_html(\n         '<script id=\"{}\" type=\"application/json\">{}</script>',\n         element_id, mark_safe(json_str)\n     )\n \n \n\n def conditional_escape(text):\n     \"\"\"\n     Similar to escape(), except that it doesn't operate on pre-escaped strings.\n     klass.__str__ = lambda self: mark_safe(klass_str(self))\n     klass.__html__ = lambda self: str(self)\n     return klass\n\n"
    },
    "ground_truth_patch": {
        "django/template/defaultfilters.py": "@register.filter(is_safe=True)\ndef json_script(value, element_id=None):\n    \"\"\"\n         Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n    tag (with an optional id).\n    \"\"\"\n    return _json_script(value, element_id)\n",
        "django/utils/html.py": " }\n \n \ndef json_script(value, element_id=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\nif element_id:\ntemplate = '<script id=\"{}\" type=\"application/json\">{}</script>'\nargs = (element_id, mark_safe(json_str))\nelse:\ntemplate = '<script type=\"application/json\">{}</script>'\nargs = (mark_safe(json_str),)\nreturn format_html(template, *args)\n \n \n def conditional_escape(text):\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 defines a function 'json_script' that outputs a JSON-encoded value wrapped in a <script> tag. It returns a formatted string, handling errors if the formatting fails. The code sample also includes an 'escape' function for HTML/XML special characters, but the focus is on the json_script function. In contrast, the code in code sample 2 also defines a function 'json_script' that produces a similar output, but it is structured differently by using a template and optional 'element_id'. The overall logic is similar, but the implementation details vary.', \"is_clone\": true, \"classification\": \"type-2\", \"reasoning\": \"These code samples are type-2 clones because they share the same functional logic in the 'json_script' function but differ in structure and implementation details, including variations in whitespace, comments, and the handling of element_id.\"}"
}