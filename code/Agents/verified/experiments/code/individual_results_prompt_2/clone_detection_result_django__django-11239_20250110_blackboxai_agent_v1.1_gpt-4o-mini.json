{
    "instance_id": "django__django-11239",
    "agent": "20250110_blackboxai_agent_v1.1",
    "agent_patch": {
        ".gitignore": "index 238fb3a200..521baaa795 100644\n tests/.coverage\n build/\n tests/report/\n.aider/\n",
        "django/db/backends/postgresql/client.py": "index cf4df76882..4c81b69f7e 100644\n         subprocess_env = os.environ.copy()\n         if passwd:\n             subprocess_env['PGPASSWORD'] = str(passwd)\n\n# Add SSL-related environment variables if present in connection parameters\nssl_mappings = {\n'sslmode': 'PGSSLMODE',\n'sslcert': 'PGSSLCERT',\n'sslkey': 'PGSSLKEY',\n'sslrootcert': 'PGSSLROOTCERT'\n}\nfor param, env_var in ssl_mappings.items():\nif param in conn_params:\nsubprocess_env[env_var] = str(conn_params[param])\n         try:\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n"
    },
    "ground_truth_patch": {
        "django/db/backends/postgresql/client.py": "         dbname = conn_params.get('database', '')\n         user = conn_params.get('user', '')\n         passwd = conn_params.get('password', '')\nsslmode = conn_params.get('sslmode', '')\nsslrootcert = conn_params.get('sslrootcert', '')\nsslcert = conn_params.get('sslcert', '')\nsslkey = conn_params.get('sslkey', '')\n \n         if user:\n             args += ['-U', user]\n         subprocess_env = os.environ.copy()\n         if passwd:\n             subprocess_env['PGPASSWORD'] = str(passwd)\nif sslmode:\nsubprocess_env['PGSSLMODE'] = str(sslmode)\nif sslrootcert:\nsubprocess_env['PGSSLROOTCERT'] = str(sslrootcert)\nif sslcert:\nsubprocess_env['PGSSLCERT'] = str(sslcert)\nif sslkey:\nsubprocess_env['PGSSLKEY'] = str(sslkey)\n         try:\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n"
    },
    "response": "{\"explanation\": \"The code in code sample 1 sets up the environment for a PostgreSQL connection by copying the current environment variables, checking if the password is present to add it to the environment, and then mapping SSL connection parameters from a dictionary to environment variables. The sample also includes a signal handling setup. In contrast, the code in code sample 2 retrieves the database connection parameters and directly checks if SSL parameters are provided to set corresponding environment variables, in addition to handling the case for the user. Both samples contain repeated logic for setting up subprocess environment variables based on the provided connection parameters.\", \"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they share similar logic and structure in establishing subprocess environment variables for connecting to PostgreSQL, but they include different variable names and added functionality in code sample 2 that retrieves additional connection parameters.\"}"
}