{
    "instance_id": "sympy__sympy-14976",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "reproduce.py": "new file mode 100644\nindex 0000000000..d7d65f737e\nfrom sympy import symbols, Eq, S, rf, lambdify, Float\nimport inspect\nimport mpmath\n\n# Set high precision\nmpmath.mp.dps = 64\n\nx = symbols('x')\neqn = Eq(rf(18,x), 77 + S(1)/3)\nf = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\nprint(\"Generated function source:\")\nprint(inspect.getsource(f))\n\n# Try solving it\nfrom sympy import nsolve\nx0 = nsolve(eqn, Float('1.5', 64), prec=64)\nprint(\"\\nValue at solution:\")\nprint(rf(18, x0).evalf(64))\n\n",
        "sympy/printing/pycode.py": "index d06901425d..c1e69995d1 100644\n         args = str(tuple(map(int, e._mpf_)))\n         return '{func}({args})'.format(func=self._module_format('mpmath.mpf'), args=args)\n \ndef _print_Rational(self, e):\nreturn \"{0}({1})/{0}({2})\".format(\nself._module_format('mpmath.mpf'),\nself._print(e.p),\nself._print(e.q))\n \n     def _print_uppergamma(self, e):\n\n         return \"{0}({1}, {2}, {3})\".format(\n             self._module_format('mpmath.gammainc'),\n             self._print(e.args[0]),\n         mod = expr.func.__module__ or ''\n         return '%s(%s)' % (self._module_format(mod + ('.' if mod else '') + expr.func.__name__),\n                            ', '.join(map(lambda arg: self._print(arg), expr.args)))\n\n\n"
    },
    "ground_truth_patch": {
        "sympy/printing/pycode.py": "         return '{func}({args})'.format(func=self._module_format('mpmath.mpf'), args=args)\n \n \ndef _print_Rational(self, e):\nreturn '{0}({1})/{0}({2})'.format(\nself._module_format('mpmath.mpf'),\ne.p,\ne.q,\n)\n\n     def _print_uppergamma(self, e):\n         return \"{0}({1}, {2}, {3})\".format(\n             self._module_format('mpmath.gammainc'),\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-2\", \"reasoning\": \"These code samples are type-2 clones because they are identical except for differences in whitespace, layout, and identifier names. The second snippet is a partial excerpt of a method from the first, showing how they share similar structures and function calls but differ in spacing and certain identifier names (like e.p and e.q in the second, which relate to expressions in SymPy).\"}"
}