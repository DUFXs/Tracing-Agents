{
    "instance_id": "django__django-14608",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "django/forms/formsets.py": "index a89c35599f..b81846138d 100644\n         self._non_form_errors.\n         \"\"\"\n         self._errors = []\nself._non_form_errors = self.error_class(error_class='nonform')\n         empty_forms_count = 0\n \n\n         if not self.is_bound:  # Stop further processing.\n             return\n \n             # Give self.clean() a chance to do cross-form validation.\n             self.clean()\n         except ValidationError as e:\nself._non_form_errors = self.error_class(e.error_list, error_class='nonform')\n\n \n     def clean(self):\n         \"\"\"\n     \"\"\"Validate every formset and return True if all are valid.\"\"\"\n     # List comprehension ensures is_valid() is called for all formsets.\n     return all([formset.is_valid() for formset in formsets])\n\n\n",
        "test_formset.py": "new file mode 100644\nindex 0000000000..41aa75c918\nfrom django.conf import settings\nsettings.configure(USE_I18N=False)\n\nfrom django import forms\nfrom django.forms import formset_factory\n\nclass SimpleForm(forms.Form):\nfield = forms.CharField()\n\nclass CustomFormSet(forms.BaseFormSet):\ndef clean(self):\nraise forms.ValidationError(\"Test formset error\")\n\nFormSet = formset_factory(SimpleForm, formset=CustomFormSet)\nformset = FormSet(data={'form-TOTAL_FORMS': '1', 'form-INITIAL_FORMS': '0'})\nprint(\"Is valid:\", formset.is_valid())\nprint(\"Non-form errors:\", formset.non_form_errors())\nprint(\"Non-form errors HTML:\", formset.non_form_errors().as_ul())\n"
    },
    "ground_truth_patch": {
        "django/forms/formsets.py": "         self._non_form_errors.\n         \"\"\"\n         self._errors = []\nself._non_form_errors = self.error_class(error_class='nonform')\n         empty_forms_count = 0\n \n         if not self.is_bound:  # Stop further processing.\n             # Give self.clean() a chance to do cross-form validation.\n             self.clean()\n         except ValidationError as e:\nself._non_form_errors = self.error_class(\ne.error_list,\nerror_class='nonform'\n)\n \n     def clean(self):\n         \"\"\"\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-1\", \"reasoning\": \"These code samples are type-1 clones because they are identical in structure and functionality except for minor differences in whitespace and layout. The methods and attributes are the same, and there are no changes in identifier names, literal values, or comments that affect the functionality.\"}"
}