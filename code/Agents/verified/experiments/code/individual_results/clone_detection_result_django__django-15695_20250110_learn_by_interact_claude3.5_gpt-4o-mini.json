{
    "instance_id": "django__django-15695",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "django/db/migrations/operations/models.py": "index d17232e4ec..b646776c7f 100644\n             old_index = from_model_state.get_index_by_name(self.old_name)\n \n         to_model_state = to_state.models[app_label, self.model_name_lower]\n# Create new index with same fields as old index but with new name\nnew_index = models.Index(fields=old_index.fields, name=self.new_name)\n# Update the state with the renamed index\nto_model_state.options['indexes'] = [\nindex if index.name != old_index.name else new_index \nfor index in to_model_state.options.get('indexes', [])\n]\n         schema_editor.rename_index(model, old_index, new_index)\n \n\n\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n             # Backward operation with unnamed index is a no-op.\n     @property\n     def migration_name_fragment(self):\n         return \"remove_%s_%s\" % (self.model_name_lower, self.name.lower())\n\n\n",
        "tests/migrations/test_rename_index_crash.py": "new file mode 100644\nindex 0000000000..469bc4c944\nimport django\nfrom django.db import connection, migrations, models\nfrom django.db.migrations.state import ProjectState\nfrom django.test.utils import CaptureQueriesContext\n\n# Set up Django settings before importing models\nfrom django.conf import settings\nif not settings.configured:\nsettings.configure(\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:',\n}\n},\nINSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],\nUSE_TZ=False,\n)\ndjango.setup()\n\ndef test_rename_index_crash():\n# Create initial state with a model that has an index\nproject_state = ProjectState()\nmodel_state = migrations.state.ModelState(\n\"test_app\",\n\"Pony\",\n[\n(\"id\", models.AutoField(primary_key=True)),\n(\"weight\", models.IntegerField()),\n(\"pink\", models.IntegerField()),\n],\n{\"indexes\": [models.Index(fields=[\"weight\", \"pink\"], name=\"initial_index\")]}\n)\nproject_state.add_model(model_state)\n\n# Create table and initial index\ncreate_table = migrations.CreateModel(\nname=\"Pony\",\nfields=[\n(\"id\", models.AutoField(primary_key=True)),\n(\"weight\", models.IntegerField()),\n(\"pink\", models.IntegerField()),\n],\n)\n\nadd_index = migrations.AddIndex(\nmodel_name=\"Pony\",\nindex=models.Index(fields=[\"weight\", \"pink\"], name=\"initial_index\"),\n)\n\n# Create rename operation\nrename_op = migrations.RenameIndex(\nmodel_name=\"Pony\",\nold_name=\"initial_index\",\nnew_name=\"new_pony_test_idx\"\n)\n\nwith connection.schema_editor() as editor:\n# Create table and add initial index\ncreate_table.database_forwards(\"test_app\", editor, ProjectState(), project_state)\nadd_index.database_forwards(\"test_app\", editor, project_state, project_state)\n\n# Clone state for rename operation\nnew_state = project_state.clone()\n\n# Apply forward operation\nprint(\"\\nApplying forward operation...\")\nrename_op.database_forwards(\"test_app\", editor, project_state, new_state)\n\n# Apply backward operation\nprint(\"\\nApplying backward operation...\")\nrename_op.database_backwards(\"test_app\", editor, new_state, project_state)\n\n# Re-apply forward operation (this was crashing before)\nprint(\"\\nRe-applying forward operation...\")\nrename_op.database_forwards(\"test_app\", editor, project_state, new_state)\n\nif __name__ == \"__main__\":\ntest_rename_index_crash()\nprint(\"\\nTest completed successfully!\")\n"
    },
    "ground_truth_patch": {
        "django/db/migrations/operations/models.py": "         else:\n             from_model_state = from_state.models[app_label, self.model_name_lower]\n             old_index = from_model_state.get_index_by_name(self.old_name)\n# Don't alter when the index name is not changed.\nif old_index.name == self.new_name:\nreturn\n \n         to_model_state = to_state.models[app_label, self.model_name_lower]\n         new_index = to_model_state.get_index_by_name(self.new_name)\n"
    },
    "response": "{\"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they show different logic and structure. The first sample is a more comprehensive code patch that includes additional context, while the second sample provides only a part of the logic referencing index renaming but has different conditions and structure in handling the indexes.\"}"
}