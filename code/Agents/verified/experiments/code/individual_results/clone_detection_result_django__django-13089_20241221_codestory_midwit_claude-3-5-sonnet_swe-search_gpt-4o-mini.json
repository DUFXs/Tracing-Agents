{
    "instance_id": "django__django-13089",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/core/cache/backends/db.py": "index 33c79c5a14..d54ca3881f 100644\n                 cursor.execute(\n                     connection.ops.cache_key_culling_sql() % table,\n                     [cull_num])\nresult = cursor.fetchone()\nif result:\ncursor.execute(\"DELETE FROM %s \"\n\"WHERE cache_key < %%s\" % table,\n[result[0]])\n \n     def clear(self):\n         db = router.db_for_write(self.cache_model_class)\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..105d70d750\nimport os\nimport django\nfrom django.conf import settings\nfrom django.core.cache import cache\nfrom django.core.management import call_command\nfrom django.db import connections\n\nif not settings.configured:\nsettings.configure(\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:',\n}\n},\nCACHES={\n'default': {\n'BACKEND': 'django.core.cache.backends.db.DatabaseCache',\n'LOCATION': 'cache_table',\n'OPTIONS': {\n'MAX_ENTRIES': 2,  # Set low to trigger culling\n'CULL_FREQUENCY': 2,  # Cull when table is full\n}\n}\n},\nINSTALLED_APPS=[\n'django.contrib.contenttypes',\n'django.contrib.auth',\n],\n)\ndjango.setup()\n\n# Create the cache table\ncall_command('createcachetable')\n\n# Clear the cache to ensure empty state\ncache.clear()\n\n# Monkey patch the cache_key_culling_sql to return a query that will return no results\ndef mock_culling_sql():\nreturn \"SELECT cache_key FROM %s WHERE cache_key < 'a' LIMIT 1\"\n\nconnection = connections['default']\noriginal_culling_sql = connection.ops.cache_key_culling_sql\nconnection.ops.cache_key_culling_sql = mock_culling_sql\n\n# Now try to set multiple values to trigger culling\nprint(\"Setting first value...\")\ncache.set('test_key1', 'test_value1', 30)\nprint(\"Setting second value...\")\ncache.set('test_key2', 'test_value2', 30)\nprint(\"Setting third value (should trigger culling)...\")\ncache.set('test_key3', 'test_value3', 30)\n\n# Verify we can read the values\nprint(\"\\nVerifying values:\")\nprint(f\"test_key1: {cache.get('test_key1')}\")\nprint(f\"test_key2: {cache.get('test_key2')}\")\nprint(f\"test_key3: {cache.get('test_key3')}\")\n\n# Restore original function\nconnection.ops.cache_key_culling_sql = original_culling_sql\n\nprint(\"\\nTest completed successfully\")\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/core/cache/backends/db.py": "                 cursor.execute(\n                     connection.ops.cache_key_culling_sql() % table,\n                     [cull_num])\nlast_cache_key = cursor.fetchone()\nif last_cache_key:\ncursor.execute(\n'DELETE FROM %s WHERE cache_key < %%s' % table,\n[last_cache_key[0]],\n)\n \n     def clear(self):\n         db = router.db_for_write(self.cache_model_class)\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they exhibit syntactical similarity with modifications in the content. Specifically, both samples contain the same database cursor operations and follow a similar structure, but they differ in variable names and other minor differences.\"}"
}