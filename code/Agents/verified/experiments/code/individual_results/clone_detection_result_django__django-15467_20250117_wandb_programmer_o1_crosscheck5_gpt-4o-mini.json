{
    "instance_id": "django__django-15467",
    "agent": "20250117_wandb_programmer_o1_crosscheck5",
    "agent_patch": {
        "django/contrib/admin/options.py": "index 64be087bf1..4ea6abd7e8 100644\n         Get a form Field for a ForeignKey.\n         \"\"\"\n         db = kwargs.get(\"using\")\n\n         if \"widget\" not in kwargs:\n             if db_field.name in self.get_autocomplete_fields(request):\n                 kwargs[\"widget\"] = AutocompleteSelect(\n                         \"class\": get_ul_class(self.radio_fields[db_field.name]),\n                     }\n                 )\nkwargs[\"empty_label\"] = (\nkwargs.get(\"empty_label\") or _(\"None\")\n) if db_field.blank else None\n\n         if \"queryset\" not in kwargs:\n             queryset = self.get_field_queryset(db, db_field, request)\n             if queryset is not None:\n                 kwargs[\"queryset\"] = queryset\n\n         return db_field.formfield(**kwargs)\n\n \n     def formfield_for_manytomany(self, db_field, request, **kwargs):\n         \"\"\"\n",
        "test_radio_fields_empty_label.py": "new file mode 100644\nindex 0000000000..d6f41682d6\nimport sys\nimport django\nfrom django.conf import settings\n\ndef main():\n# Configure Django settings before importing and defining models.\nsettings.configure(\nINSTALLED_APPS=[\n\"django.contrib.contenttypes\",\n\"django.contrib.auth\",\n\"django.contrib.admin\",\n],\nDATABASES={\"default\":{\"ENGINE\":\"django.db.backends.sqlite3\",\"NAME\":\":memory:\"}},\nMIDDLEWARE=[],\nSECRET_KEY=\"test\",\nDEFAULT_AUTO_FIELD=\"django.db.models.AutoField\",\n)\ndjango.setup()\n\nfrom django.test import TestCase\nfrom django.db import models\nfrom django.contrib.admin import ModelAdmin, AdminSite\n\nclass Foo(models.Model):\nclass Meta:\napp_label = \"admin\"\n\nclass Bar(models.Model):\nfoo = models.ForeignKey(Foo, blank=True, null=True, on_delete=models.CASCADE)\nclass Meta:\napp_label = \"admin\"\n\nclass BarAdmin(ModelAdmin):\nradio_fields = {\"foo\": True}\ndef formfield_for_foreignkey(self, db_field, request, **kwargs):\nif db_field.name == \"foo\":\nkwargs[\"empty_label\"] = \"I WANT TO SET MY OWN EMPTY LABEL\"\nreturn super().formfield_for_foreignkey(db_field, request, **kwargs)\n\nclass TestEmptyLabel(TestCase):\ndef test_empty_label(self):\nadmin = BarAdmin(Bar, AdminSite())\ndb_field = Bar._meta.get_field(\"foo\")\nformfield = admin.formfield_for_foreignkey(db_field, None)\nlabel = getattr(formfield, \"empty_label\", None)\nprint(\"Actual empty_label:\", label)\nif label == \"I WANT TO SET MY OWN EMPTY LABEL\":\nprint(\"Test passed: the custom empty_label was NOT overwritten.\")\nelse:\nprint(\"Test failed: custom empty_label was overwritten or missing.\")\nsys.exit(1)\n\nimport unittest\nsuite = unittest.TestLoader().loadTestsFromTestCase(TestEmptyLabel)\nresult = unittest.TextTestRunner(verbosity=2).run(suite)\nsys.exit(0 if result.wasSuccessful() else 1)\n\nif __name__ == \"__main__\":\nmain()\n"
    },
    "ground_truth_patch": {
        "django/contrib/admin/options.py": "                         \"class\": get_ul_class(self.radio_fields[db_field.name]),\n                     }\n                 )\nkwargs[\"empty_label\"] = (\nkwargs.get(\"empty_label\", _(\"None\")) if db_field.blank else None\n)\n \n         if \"queryset\" not in kwargs:\n             queryset = self.get_field_queryset(db, db_field, request)\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-1\", \"reasoning\": \"These code samples are type-1 clones because they are identical except for differences in whitespace, layout, and comments.\"}"
}