{
    "instance_id": "django__django-13109",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "django/db/models/fields/related.py": "index d517d7269b..f89aff117c 100644\n             return\n \n         using = router.db_for_read(self.remote_field.model, instance=model_instance)\nqs = self.remote_field.model._base_manager.using(using).filter(\n             **{self.remote_field.field_name: value}\n         )\n\n\n\n\n\n\n\n\n         qs = qs.complex_filter(self.get_limit_choices_to())\n         if not qs.exists():\n             raise exceptions.ValidationError(\n \n     def db_parameters(self, connection):\n         return {\"type\": None, \"check\": None}\n\n\n\n\n\n\n\n\n\ndiff --git \"a/django/db/models/fields/related.py\\\"\" \"b/django/db/models/fields/related.py\\\"\"\nnew file mode 100644\nindex 0000000000..9d66705ec2\nusing = router.db_for_read(self.remote_field.model, instance=model_instance)\nqs = self.remote_field.model._base_manager.using(using).filter(\n**{self.remote_field.field_name: value}\n)\n",
        "reproduce.py": "new file mode 100644\nindex 0000000000..4f00e2a357\nfrom django.db import models\nfrom django import forms\nfrom django.conf import settings\nimport os\nimport django\n\n# Configure Django settings\nsettings.configure(\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:',\n}\n},\nINSTALLED_APPS=['django.contrib.contenttypes'],\n)\ndjango.setup()\n\n# Define the models\nclass ArticleManager(models.Manager):\ndef get_queryset(self):\nqs = super().get_queryset()\nreturn qs.filter(archived=False)\n\nclass Article(models.Model):\ntitle = models.CharField(max_length=100)\narchived = models.BooleanField(default=False)\n# Don't include archived articles by default\nobjects = ArticleManager()\nclass Meta:\napp_label = 'reproduce'\n\nclass FavoriteArticle(models.Model):\narticle = models.ForeignKey(Article, on_delete=models.CASCADE)\nclass Meta:\napp_label = 'reproduce'\n\nclass FavoriteArticleForm(forms.ModelForm):\nclass Meta:\nmodel = FavoriteArticle\nfields = '__all__'\n\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\n# Use the base manager instead of the default manager to allow archived articles\nself.fields['article'].queryset = Article._base_manager.all()\n\n# Create tables\nfrom django.db import connection\nwith connection.schema_editor() as schema_editor:\nschema_editor.create_model(Article)\nschema_editor.create_model(FavoriteArticle)\n\n# Create test data\narticle = Article.objects.create(title=\"Test Article\", archived=True)\n\n# Test form validation\nform_data = {'article': article.id}\nform = FavoriteArticleForm(data=form_data)\nprint(f\"Form is valid: {form.is_valid()}\")  # Should print False with current code\nif not form.is_valid():\nprint(f\"Form errors: {form.errors}\")\n"
    },
    "ground_truth_patch": {
        "django/db/models/fields/related.py": "             return\n \n         using = router.db_for_read(self.remote_field.model, instance=model_instance)\nqs = self.remote_field.model._base_manager.using(using).filter(\n             **{self.remote_field.field_name: value}\n         )\n         qs = qs.complex_filter(self.get_limit_choices_to())\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they exhibit syntactical similarities but differ in the surrounding context, presence of additional lines, or modifications in the statements. In particular, Code Sample 1 contains additional statements and context beyond what is seen in Code Sample 2, which changes the overall structure but retains similar functionalities.\"}"
}