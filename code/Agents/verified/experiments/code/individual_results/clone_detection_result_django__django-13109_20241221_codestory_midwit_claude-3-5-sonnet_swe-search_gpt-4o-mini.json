{
    "instance_id": "django__django-13109",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/db/models/fields/related.py": "index d517d7269b..c2aea9c730 100644\n             return\n \n         using = router.db_for_read(self.remote_field.model, instance=model_instance)\nqs = self.remote_field.model._base_manager.using(using).filter(\n             **{self.remote_field.field_name: value}\n         )\n         qs = qs.complex_filter(self.get_limit_choices_to())\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..9aa32957ed\nfrom django.db import models\nfrom django.forms import ModelForm\nfrom django.core.exceptions import ValidationError\nimport os\nimport django\n\n# Set up Django settings\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.settings')\nfrom django.conf import settings\nif not settings.configured:\nsettings.configure(\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:',\n}\n},\nINSTALLED_APPS=[\n'django.contrib.contenttypes',\n'django.contrib.auth',\n'django.db.models.fields',  # Add this to handle our test models\n],\nSILENCED_SYSTEM_CHECKS=['models.E015'],  # Silence the explicit app_label warning\n)\ndjango.setup()\n\n# Define the models\nclass ArticleManager(models.Manager):\ndef get_queryset(self):\nqs = super().get_queryset()\nreturn qs.filter(archived=False)\n\nclass Article(models.Model):\ntitle = models.CharField(max_length=100)\narchived = models.BooleanField(default=False)\n# Don't include archived articles by default\nobjects = ArticleManager()\n\nclass Meta:\napp_label = 'testapp'\n\nclass FavoriteArticle(models.Model):\nclass Meta:\napp_label = 'testapp'\narticle = models.ForeignKey(Article, on_delete=models.CASCADE)\n\nclass FavoriteArticleForm(ModelForm):\nclass Meta:\nmodel = FavoriteArticle\nfields = '__all__'\n\ndef __init__(self, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\n# Use the base manager instead of the default manager to allow archived articles\nself.fields['article'].queryset = Article._base_manager.all()\n\ndef main():\n# Create the database tables\nfrom django.db import connection\nwith connection.schema_editor() as schema_editor:\nschema_editor.create_model(Article)\nschema_editor.create_model(FavoriteArticle)\n\n# Create an archived article\narchived_article = Article.objects.create(\ntitle=\"Archived Article\",\narchived=True\n)\n\n# Try to create a FavoriteArticle with the archived article\nform_data = {'article': archived_article.id}\nform = FavoriteArticleForm(data=form_data)\n\nprint(\"Form is valid:\", form.is_valid())\nif not form.is_valid():\nprint(\"Form errors:\", form.errors)\n\nif __name__ == '__main__':\nmain()\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/db/models/fields/related.py": "             return\n \n         using = router.db_for_read(self.remote_field.model, instance=model_instance)\nqs = self.remote_field.model._base_manager.using(using).filter(\n             **{self.remote_field.field_name: value}\n         )\n         qs = qs.complex_filter(self.get_limit_choices_to())\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-1\", \"reasoning\": \"These code samples are type-1 clones because they are identical except for differences in whitespace and layout. The same lines of code are present in both samples with no changes to content.\"}"
}