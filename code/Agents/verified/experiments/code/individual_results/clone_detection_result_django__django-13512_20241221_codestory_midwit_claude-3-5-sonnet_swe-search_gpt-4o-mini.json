{
    "instance_id": "django__django-13512",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/db/models/fields/json.py": "index a249f4cdbf..66c039c6e4 100644\n     def get_prep_value(self, value):\n         if value is None:\n             return value\nreturn json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def get_transform(self, name):\n         transform = super().get_transform(name)\n",
        "django/forms/fields.py": "index 9de2c60b35..8235aaac01 100644\n     def prepare_value(self, value):\n         if isinstance(value, InvalidJSONInput):\n             return value\nreturn json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def has_changed(self, initial, data):\n         if super().has_changed(initial, data):\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..2e7cafc9e7\nfrom django.contrib import admin\nfrom django.db import models\nfrom django.core.management import execute_from_command_line\nimport os\nimport sys\n\n# Set up Django settings\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')\n\n# Create a test project\nif not os.path.exists('test_project'):\nos.makedirs('test_project')\n\n# Create settings.py\nsettings_content = '''\nSECRET_KEY = 'dummy-key-for-test'\nINSTALLED_APPS = [\n'django.contrib.admin',\n'django.contrib.auth',\n'django.contrib.contenttypes',\n'django.contrib.sessions',\n'django.contrib.messages',\n'django.contrib.staticfiles',\n'test_app',\n]\nDATABASES = {\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': 'db.sqlite3',\n}\n}\nMIDDLEWARE = [\n'django.middleware.security.SecurityMiddleware',\n'django.contrib.sessions.middleware.SessionMiddleware',\n'django.middleware.common.CommonMiddleware',\n'django.middleware.csrf.CsrfViewMiddleware',\n'django.contrib.auth.middleware.AuthenticationMiddleware',\n'django.contrib.messages.middleware.MessageMiddleware',\n]\nROOT_URLCONF = 'test_project.urls'\nTEMPLATES = [\n{\n'BACKEND': 'django.template.backends.django.DjangoTemplates',\n'APP_DIRS': True,\n'OPTIONS': {\n'context_processors': [\n'django.template.context_processors.debug',\n'django.template.context_processors.request',\n'django.contrib.auth.context_processors.auth',\n'django.contrib.messages.context_processors.messages',\n],\n},\n},\n]\nSTATIC_URL = '/static/'\n'''\n\nwith open('test_project/settings.py', 'w') as f:\nf.write(settings_content)\n\n# Create __init__.py\nwith open('test_project/__init__.py', 'w') as f:\nf.write('')\n\n# Create urls.py\nurls_content = '''\nfrom django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\npath('admin/', admin.site.urls),\n]\n'''\n\nwith open('test_project/urls.py', 'w') as f:\nf.write(urls_content)\n\n# Create test app\nif not os.path.exists('test_app'):\nos.makedirs('test_app')\n\nwith open('test_app/__init__.py', 'w') as f:\nf.write('')\n\n# Create models.py\nmodels_content = '''\nfrom django.db import models\n\nclass TestModel(models.Model):\njson_field = models.JSONField()\n\ndef __str__(self):\nreturn str(self.json_field)\n'''\n\nwith open('test_app/models.py', 'w') as f:\nf.write(models_content)\n\n# Create admin.py\nadmin_content = '''\nfrom django.contrib import admin\nfrom .models import TestModel\n\n@admin.register(TestModel)\nclass TestModelAdmin(admin.ModelAdmin):\npass\n'''\n\nwith open('test_app/admin.py', 'w') as f:\nf.write(admin_content)\n\nif __name__ == '__main__':\n# Set up Django\nimport django\ndjango.setup()\n\n# Create tables\nexecute_from_command_line(['manage.py', 'makemigrations', 'test_app'])\nexecute_from_command_line(['manage.py', 'migrate'])\n\n# Create a superuser\nfrom django.contrib.auth.models import User\nif not User.objects.filter(username='admin').exists():\nUser.objects.create_superuser('admin', 'admin@example.com', 'admin')\n\n# Create a test object with Chinese characters\nfrom test_app.models import TestModel\nTestModel.objects.create(json_field={'name': '\u4e2d\u56fd'})\n\nprint(\"\\nTest setup complete!\")\nprint(\"1. A test model with JSONField containing Chinese characters has been created\")\nprint(\"2. You can now run the development server with:\")\nprint(\"   python manage.py runserver\")\nprint(\"3. Visit http://127.0.0.1:8000/admin/\")\nprint(\"4. Login with username: admin, password: admin\")\nprint(\"5. Click on TestModel to see how Chinese characters are displayed\")\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/contrib/admin/utils.py": " import datetime\n import decimal\nimport json\n from collections import defaultdict\n \n from django.core.exceptions import FieldDoesNotExist\n         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n     elif isinstance(field, models.JSONField) and value:\n         try:\nreturn json.dumps(value, ensure_ascii=False, cls=field.encoder)\n         except TypeError:\n             return display_for_value(value, empty_value_display)\n     else:\n",
        "django/forms/fields.py": "     def prepare_value(self, value):\n         if isinstance(value, InvalidJSONInput):\n             return value\nreturn json.dumps(value, ensure_ascii=False, cls=self.encoder)\n \n     def has_changed(self, initial, data):\n         if super().has_changed(initial, data):\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-2\", \"reasoning\": \"These code samples are type-2 clones because they exhibit identical structural logic but differ in identifier names and whitespace. For instance, both samples return `json.dumps(value, cls=self.encoder, ensure_ascii=False)`, yet they handle different variable names and conditions.\"}"
}