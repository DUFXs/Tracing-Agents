{
    "instance_id": "django__django-16136",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/views/generic/base.py": "index db1842e3e5..93979d1e9c 100644\n             request.path,\n             extra={\"status_code\": 405, \"request\": request},\n         )\nresponse = HttpResponseNotAllowed(self._allowed_methods())\nif self.view_is_async:\nasync def func():\nreturn response\nreturn func()\nreturn response\n \n     def options(self, request, *args, **kwargs):\n         \"\"\"Handle responding to requests for the OPTIONS HTTP verb.\"\"\"\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..2806e02f2d\nimport os\nimport django\nfrom django.conf import settings\nfrom django.urls import path\nfrom django.core.management import execute_from_command_line\nfrom django.views import View\nfrom django.http import HttpResponse\n\n# Configure minimal Django settings\nsettings.configure(\nDEBUG=True,\nSECRET_KEY='secret',\nROOT_URLCONF=__name__,\nMIDDLEWARE=[\n'django.middleware.common.CommonMiddleware',\n],\nALLOWED_HOSTS=['*'],\n)\n\n# Define the view that reproduces the issue\nclass Demo(View):\n\"\"\"This basic view supports only POST requests\"\"\"\nasync def post(self, request):\nreturn HttpResponse(\"ok\")\n\n# URL configuration\nurlpatterns = [\npath(\"demo\", Demo.as_view()),\n]\n\nif __name__ == \"__main__\":\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"settings\")\ndjango.setup()\nexecute_from_command_line(['manage.py', 'runserver', '8000'])\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/views/generic/base.py": "             request.path,\n             extra={\"status_code\": 405, \"request\": request},\n         )\nresponse = HttpResponseNotAllowed(self._allowed_methods())\n\nif self.view_is_async:\n\nasync def func():\nreturn response\n\nreturn func()\nelse:\nreturn response\n \n     def options(self, request, *args, **kwargs):\n         \"\"\"Handle responding to requests for the OPTIONS HTTP verb.\"\"\"\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-1\", \"reasoning\": \"These code samples are type-1 clones because they are identical except for minor differences in whitespace and layout.\"}"
}