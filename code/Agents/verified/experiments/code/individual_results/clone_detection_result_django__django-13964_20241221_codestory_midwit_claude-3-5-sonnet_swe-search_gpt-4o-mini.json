{
    "instance_id": "django__django-13964",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/db/models/fields/related_descriptors.py": "index 872a4c98dc..c2a797e46d 100644\n \n         # Set the values of the related field.\n         else:\n# If the related instance doesn't have a primary key value yet,\n# we need to track it for later updates\nneeds_pk_tracking = any(\ngetattr(value, rh_field.attname) is None or getattr(value, rh_field.attname) == ''\nfor _, rh_field in self.field.related_fields\nif rh_field.primary_key\n)\n\nif needs_pk_tracking:\n# Store a reference to update the foreign key when the PK is set\ndef _pk_monitor(sender, instance, **kwargs):\nif instance is value:\nfor lh_field, rh_field in self.field.related_fields:\nnew_value = getattr(instance, rh_field.attname)\nif new_value is not None and new_value != '':\nsetattr(sender_instance, lh_field.attname, new_value)\nself.field.set_cached_value(sender_instance, instance)\n\nsender_instance = instance\nsignals.post_save.connect(_pk_monitor, sender=value.__class__, weak=False)\n\n             for lh_field, rh_field in self.field.related_fields:\n                 setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n \n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..d5606faec3\nfrom django.db import models, transaction\nfrom django.test import TestCase\nfrom django.db import connection\nfrom django.conf import settings\nfrom django.apps import apps\n\n# Setup Django\nif not settings.configured:\nsettings.configure(\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:',\n}\n},\nINSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],\nUSE_TZ=False,\n)\nimport django\ndjango.setup()\n\n# Define the models\nclass Product(models.Model):\nsku = models.CharField(primary_key=True, max_length=50)\n\nclass Meta:\napp_label = 'auth'  # Using existing app for simplicity\n\nclass Order(models.Model):\nproduct = models.ForeignKey(Product, on_delete=models.CASCADE)\n\nclass Meta:\napp_label = 'auth'  # Using existing app for simplicity\n\n# Create the tables\nwith connection.schema_editor() as schema_editor:\nschema_editor.create_model(Product)\nschema_editor.create_model(Order)\n\ndef test_case_1():\n\"\"\"Test case where primary key is set after assignment\"\"\"\ntry:\nwith transaction.atomic():\norder = Order()\norder.product = Product()\norder.product.sku = \"foo\"\norder.product.save()\norder.save()\n\n# These assertions should both pass\nassert not Order.objects.filter(product_id=\"\").exists(), \"Found order with empty product_id\"\nassert Order.objects.filter(product=order.product).exists(), \"Could not find order with correct product\"\nprint(\"Test case 1 passed!\")\nexcept Exception as e:\nprint(f\"Test case 1 failed: {str(e)}\")\n\ndef test_case_2():\n\"\"\"Test case where primary key is set during initialization\"\"\"\ntry:\nwith transaction.atomic():\norder = Order()\norder.product = Product(sku=\"foo2\")\norder.product.save()\norder.save()\n\nassert Order.objects.filter(product=order.product).exists(), \"Could not find order with correct product\"\nprint(\"Test case 2 passed!\")\nexcept Exception as e:\nprint(f\"Test case 2 failed: {str(e)}\")\n\nif __name__ == '__main__':\ntest_case_1()\ntest_case_2()\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/db/models/base.py": "                         \"%s() prohibited to prevent data loss due to unsaved \"\n                         \"related object '%s'.\" % (operation_name, field.name)\n                     )\nelif getattr(self, field.attname) in field.empty_values:\n                     # Use pk from related object if it has been saved after\n                     # an assignment.\n                     setattr(self, field.attname, obj.pk)\n"
    },
    "response": "{\"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they are fundamentally different in both purpose and structure. The first code sample deals with Django model relationships and signal handling upon saving, while the second code sample addresses error prevention in model operations involving unsaved related objects. There is no syntactical resemblance or functional equivalence even if they are part of the same broader framework.\"}"
}