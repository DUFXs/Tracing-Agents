{
    "instance_id": "sphinx-doc__sphinx-8621",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "sphinx/builders/html/transforms.py": "index c91da57e9..86b598046 100644\n     \"\"\"\n     default_priority = 400\n     builders = ('html',)\n# Only split if there are actual keys around the separator\npattern = re.compile(r'(?<=\\S)(-|\\+|\\^|\\s+)(?=\\S)')\n \n     def run(self, **kwargs: Any) -> None:\n         matcher = NodeMatcher(nodes.literal, classes=[\"kbd\"])\n         for node in self.document.traverse(matcher):  # type: nodes.literal\ntext = node[-1].astext()\nparts = self.pattern.split(text)\n             if len(parts) == 1:\n                 continue\n \n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n     }\n\n",
        "test_kbd.py": "new file mode 100644\nindex 000000000..03d52af33\nfrom docutils import nodes\nfrom docutils.parsers.rst import roles\nfrom sphinx.builders.html.transforms import KeyboardTransform\nfrom docutils.core import publish_doctree\n\ndef kbd_role(role, rawtext, text, lineno, inliner, options={}, content=[]):\nnode = nodes.literal(rawtext, text, classes=['kbd'])\nreturn [node], []\n\n# Register the kbd role\nroles.register_local_role('kbd', kbd_role)\n\ndef test_kbd(text):\n# Create a test document with kbd role\nsource = f':kbd:`{text}`'\n\n# Parse the source into a doctree\ndoctree = publish_doctree(source)\n\n# Find the kbd node and apply our transform logic manually\nmatcher = nodes.literal\nfor node in doctree.traverse(matcher):\nif 'kbd' not in node.get('classes', []):\ncontinue\n\ntext = node[-1].astext()\nparts = KeyboardTransform.pattern.split(text)\nif len(parts) == 1:\ncontinue\n\nnode.pop()\nwhile parts:\nkey = parts.pop(0)\nnode += nodes.literal('', key, classes=[\"kbd\"])\n\ntry:\n# key separator (ex. -, +, ^)\nsep = parts.pop(0)\nnode += nodes.Text(sep)\nexcept IndexError:\npass\n\n# Print the result\nprint(f\"\\nInput: {text}\")\nprint(\"Output HTML:\")\nprint(doctree.asdom().toprettyxml(indent=\"  \"))\n\nif __name__ == '__main__':\n# Basic test cases from PR description\ntest_kbd('-')  # Single hyphen\ntest_kbd('+')  # Single plus\ntest_kbd('Shift-+')  # Compound with plus\n\n# Additional test cases for edge cases\ntest_kbd('Ctrl-Alt-Delete')  # Multiple separators\ntest_kbd('Alt+F4')          # Plus as separator\ntest_kbd('Ctrl^C')          # Caret as separator\ntest_kbd('Space')           # Single word\ntest_kbd('Ctrl-')           # Trailing separator\ntest_kbd('-X')              # Leading separator\n\n"
    },
    "ground_truth_patch": {
        "sphinx/builders/html/transforms.py": "     \"\"\"\n     default_priority = 400\n     builders = ('html',)\npattern = re.compile(r'(?<=.)(-|\\+|\\^|\\s+)(?=.)')\n \n     def run(self, **kwargs: Any) -> None:\n         matcher = NodeMatcher(nodes.literal, classes=[\"kbd\"])\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-1\", \"reasoning\": \"These code samples are type-1 clones because they are identical except for differences in whitespace and layout. The logic and content remain the same.\"}"
}