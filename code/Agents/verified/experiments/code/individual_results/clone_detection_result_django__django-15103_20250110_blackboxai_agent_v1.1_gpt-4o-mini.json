{
    "instance_id": "django__django-15103",
    "agent": "20250110_blackboxai_agent_v1.1",
    "agent_patch": {
        ".gitignore": "index 238fb3a200..521baaa795 100644\n tests/.coverage\n build/\n tests/report/\n.aider/\n",
        "django/template/defaultfilters.py": "index 5ccef38048..af9cfec7ff 100644\n \n \n @register.filter(is_safe=True)\ndef json_script(value, element_id=None):\n     \"\"\"\n     Output value JSON-encoded, wrapped in a <script type=\"application/json\">\ntag. If element_id is provided, the script tag will include an id attribute.\n     \"\"\"\n     return _json_script(value, element_id)\n \n",
        "django/utils/html.py": "index da1b5675ec..c9d315603c 100644\n }\n \n \ndef json_script(value, element_id=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n\nIf element_id is provided, the script tag will include an id attribute.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\nif element_id is not None and element_id != '':\nreturn format_html(\n'<script id=\"{}\" type=\"application/json\">{}</script>',\nelement_id, mark_safe(json_str)\n)\n     return format_html(\n'<script type=\"application/json\">{}</script>',\nmark_safe(json_str)\n     )\n"
    },
    "ground_truth_patch": {
        "django/template/defaultfilters.py": "@register.filter(is_safe=True)\ndef json_script(value, element_id=None):\n    \"\"\"\n         Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n    tag (with an optional id).\n    \"\"\"\n    return _json_script(value, element_id)\n",
        "django/utils/html.py": " }\n \n \ndef json_script(value, element_id=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\nif element_id:\ntemplate = '<script id=\"{}\" type=\"application/json\">{}</script>'\nargs = (element_id, mark_safe(json_str))\nelse:\ntemplate = '<script type=\"application/json\">{}</script>'\nargs = (mark_safe(json_str),)\nreturn format_html(template, *args)\n \n \n def conditional_escape(text):\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they share similar structures and functionality, but contain modifications in the statements and control flow. For example, the use of 'if element_id is not None and element_id != \\'\\':' in code sample 1 has been altered to 'if element_id:' in code sample 2, and the return statement has been refactored to use a template string and args. These changes indicate that while the underlying logic is similar, the implementation details differ significantly.\"}"
}