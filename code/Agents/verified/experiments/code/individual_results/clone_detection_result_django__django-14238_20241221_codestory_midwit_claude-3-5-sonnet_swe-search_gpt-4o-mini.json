{
    "instance_id": "django__django-14238",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/db/models/fields/__init__.py": "index 0f53d9c30b..ed6e482222 100644\n         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n \n     def __subclasscheck__(self, subclass):\nreturn (\nsubclass in self._subclasses or\nany(issubclass(subclass, c) for c in self._subclasses) or\nsuper().__subclasscheck__(subclass)\n)\n \n \n class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..20c6f2f0d2\nimport os\nimport django\nfrom django.conf import settings\n\n# Create the example app structure\nos.makedirs('example/core', exist_ok=True)\nos.makedirs('example/other', exist_ok=True)\n\n# Create the models.py files\nwith open('example/core/models.py', 'w') as f:\nf.write('''from django.db import models\n\nclass MyBigAutoField(models.BigAutoField):\npass\n\nclass MyModel(models.Model):\npass\n''')\n\nwith open('example/other/models.py', 'w') as f:\nf.write('''from django.db import models\n\nclass MySmallAutoField(models.SmallAutoField):\npass\n\nclass AnotherModel(models.Model):\npass\n''')\n\n# Create apps.py files\nwith open('example/core/apps.py', 'w') as f:\nf.write('''from django.apps import AppConfig\n\nclass CoreConfig(AppConfig):\nname = 'example.core'\ndefault_auto_field = 'example.core.models.MyBigAutoField'\n''')\n\nwith open('example/other/apps.py', 'w') as f:\nf.write('''from django.apps import AppConfig\n\nclass OtherConfig(AppConfig):\nname = 'example.other'\ndefault_auto_field = 'example.other.models.MySmallAutoField'\n''')\n\n# Create __init__.py files\nfor path in ['example/core', 'example/other', 'example']:\nwith open(f'{path}/__init__.py', 'w') as f:\nif path == 'example/core':\nf.write('default_app_config = \"example.core.apps.CoreConfig\"')\nelif path == 'example/other':\nf.write('default_app_config = \"example.other.apps.OtherConfig\"')\nelse:\nf.write('')\n\n# Configure Django settings\nsettings.configure(\nDEBUG=True,\nINSTALLED_APPS=[\n'example.core',\n'example.other',\n],\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:',\n}\n}\n)\n\ndjango.setup()\n\n# This should work with both custom auto field types\nfrom example.core.models import MyModel\nfrom example.other.models import AnotherModel\nprint(\"Success! The error has been fixed if you see this message.\")\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/db/models/fields/__init__.py": "         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n \n     def __subclasscheck__(self, subclass):\nreturn issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)\n \n \n class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-1\", \"reasoning\": \"These code samples are type-1 clones because they are identical apart from whitespace and layout differences.\"}"
}