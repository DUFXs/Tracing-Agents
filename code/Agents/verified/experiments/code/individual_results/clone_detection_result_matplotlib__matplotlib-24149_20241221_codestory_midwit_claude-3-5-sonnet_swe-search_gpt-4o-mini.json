{
    "instance_id": "matplotlib__matplotlib-24149",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "lib/matplotlib/cbook/__init__.py": "index 34c6ddb861..c61b2fed4c 100644\n     This is an type-independent way of obtaining the first non-None element,\n     supporting both index access and the iterator protocol.\n     The first non-None element will be obtained when skip_none is True.\nIf no finite values are found and skip_nonfinite is True, returns NaN.\n     \"\"\"\n     def safe_isfinite(val):\n         if val is None:\n         raise RuntimeError(\"matplotlib does not \"\n                            \"support generators as input\")\n     else:\ntry:\nreturn next(val for val in obj if safe_isfinite(val))\nexcept StopIteration:\n# If no finite values found, return NaN\nreturn np.nan\n \n \n def sanitize_sequence(data):\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..3a5f3b1e2b\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nf, ax = plt.subplots()\nax.bar([np.nan], [np.nan])\nplt.show()\n\\ No newline at end of file\n",
        "test_edge_cases.py": "new file mode 100644\nindex 0000000000..4b664f14e8\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Test all cases\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(12, 4))\n\n# Case 1: All NaN\nax1.bar([np.nan], [np.nan])\nax1.set_title('All NaN')\n\n# Case 2: NaN x, zero height\nax2.bar([np.nan], [0])\nax2.set_title('NaN x, zero height')\n\n# Case 3: zero x, NaN height\nax3.bar([0], [np.nan])\nax3.set_title('zero x, NaN height')\n\nplt.tight_layout()\nplt.show()\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "lib/matplotlib/axes/_axes.py": "                 x0 = cbook._safe_first_finite(x0)\n             except (TypeError, IndexError, KeyError):\n                 pass\nexcept StopIteration:\n# this means we found no finite element, fall back to first\n# element unconditionally\nx0 = cbook.safe_first_element(x0)\n \n             try:\n                 x = cbook._safe_first_finite(xconv)\n             except (TypeError, IndexError, KeyError):\n                 x = xconv\nexcept StopIteration:\n# this means we found no finite element, fall back to first\n# element unconditionally\nx = cbook.safe_first_element(xconv)\n \n             delist = False\n             if not np.iterable(dx):\n"
    },
    "response": "{\"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they exhibit different syntactic structures and functionality. Code sample 1 involves a function focused on handling non-None values and includes comments related to its behavior, while code sample 2 handles the retrieval of finite elements from a list, primarily focusing on exception handling and fallback strategies. The logic and context of both samples differ significantly.\"}"
}