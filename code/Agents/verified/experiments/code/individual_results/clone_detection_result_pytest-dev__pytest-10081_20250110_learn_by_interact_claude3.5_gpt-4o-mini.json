{
    "instance_id": "pytest-dev__pytest-10081",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "src/_pytest/unittest.py": "index 851e4943b..4e4717b92 100644\n             # Arguably we could always postpone tearDown(), but this changes the moment where the\n             # TestCase instance interacts with the results object, so better to only do it\n             # when absolutely needed.\nif self.config.getoption(\"usepdb\") and not (_is_skipped(self.obj) or _is_skipped(self._testcase.__class__)):\n\n                 self._explicit_tearDown = self._testcase.tearDown\n                 setattr(self._testcase, \"tearDown\", lambda *args: None)\n \n def _is_skipped(obj) -> bool:\n     \"\"\"Return True if the given object has been marked with @unittest.skip.\"\"\"\n     return bool(getattr(obj, \"__unittest_skip__\", False))\n\n"
    },
    "ground_truth_patch": {
        "src/_pytest/unittest.py": "# Arguably we could always postpone tearDown(), but this changes the moment where the\n# TestCase instance interacts with the results object, so better to only do it\n# when absolutely needed.\n# We need to consider if the test itself is skipped, or the whole class.\nassert isinstance(self.parent, UnitTestCase)\nskipped = _is_skipped(self.obj) or _is_skipped(self.parent.obj)\nif self.config.getoption(\"usepdb\") and not skipped:\n    self._explicit_tearDown = self._testcase.tearDown\n    setattr(self._testcase, \"tearDown\", lambda *args: None)\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they share a significant amount of syntactical structure but there are added, modified, or removed statements. Specifically, Code sample 2 introduces an assertion statement and modifies the way it checks for skipped tests, which changes the context within which the similar functionality operates.\"}"
}