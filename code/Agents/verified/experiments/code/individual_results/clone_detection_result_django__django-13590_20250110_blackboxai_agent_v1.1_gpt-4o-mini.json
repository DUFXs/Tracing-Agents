{
    "instance_id": "django__django-13590",
    "agent": "20250110_blackboxai_agent_v1.1",
    "agent_patch": {
        ".gitignore": "index 238fb3a200..521baaa795 100644\n tests/.coverage\n build/\n tests/report/\n.aider/\n",
        "django/db/models/sql/query.py": "index 4648daf395..93e7c58585 100644\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n# Handle named tuples by converting generator to tuple before construction\nresolved_values = tuple(\n                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                 for sub_value in value\n             )\nif hasattr(value, '_fields'):  # Named tuple check\nreturn type(value)(*resolved_values)\nreturn type(value)(resolved_values)\n         return value\n \n     def solve_lookup_type(self, lookup):\n"
    },
    "ground_truth_patch": {
        "django/db/models/sql/query.py": "         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\nvalues = (\n                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                 for sub_value in value\n             )\ntype_ = type(value)\nif hasattr(type_, '_make'):  # namedtuple\nreturn type_(*values)\nreturn type_(values)\n         return value\n \n     def solve_lookup_type(self, lookup):\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they exhibit syntactical similarity but there are several changes in the statements. Specifically, in Code Sample 1, the resolved values are collected into a tuple named 'resolved_values', while in Code Sample 2, they are collected into a variable named 'values'. Additionally, the check for named tuples uses 'type(value)' in Code Sample 1, while it uses 'type_' in Code Sample 2. These modifications indicate added or altered statements without changing the overall logic.\"}"
}