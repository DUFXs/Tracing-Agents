{
    "instance_id": "matplotlib__matplotlib-25287",
    "agent": "20250117_wandb_programmer_o1_crosscheck5",
    "agent_patch": {
        "lib/matplotlib/axis.py": "index c0e706e2b3..29dafc7ec1 100644\n         Initialize the label and offsetText instance values and\n         `label_position` / `offset_text_position`.\n         \"\"\"\nimport matplotlib as mpl\nimport matplotlib.transforms as mtransforms\n\n         # x in axes coords, y in display coords (to be updated at draw time by\n         # _update_label_positions and _update_offset_text_position).\n         self.label.set(\n                 self.axes.transAxes, mtransforms.IdentityTransform()),\n         )\n         self.label_position = 'bottom'\n\n# Decide the color for offset text based on labelcolor. If 'inherit',\n# fallback to tick.color.\noffset_labelcolor = mpl.rcParams['xtick.labelcolor']\nif offset_labelcolor == 'inherit':\noffset_labelcolor = mpl.rcParams['xtick.color']\n\n         self.offsetText.set(\n             x=1, y=0,\n             verticalalignment='top', horizontalalignment='right',\n             transform=mtransforms.blended_transform_factory(\n                 self.axes.transAxes, mtransforms.IdentityTransform()),\n             fontsize=mpl.rcParams['xtick.labelsize'],\ncolor=offset_labelcolor,\n         )\n         self.offset_text_position = 'bottom'\n\n \n     def contains(self, mouseevent):\n         \"\"\"Test whether the mouse event occurred in the x-axis.\"\"\"\n         Initialize the label and offsetText instance values and\n         `label_position` / `offset_text_position`.\n         \"\"\"\nimport matplotlib as mpl\nimport matplotlib.transforms as mtransforms\n\n         # x in display coords, y in axes coords (to be updated at draw time by\n         # _update_label_positions and _update_offset_text_position).\n         self.label.set(\n                 mtransforms.IdentityTransform(), self.axes.transAxes),\n         )\n         self.label_position = 'left'\n\n# Decide the color for offset text based on labelcolor. If 'inherit',\n# fallback to tick.color.\noffset_labelcolor = mpl.rcParams['ytick.labelcolor']\nif offset_labelcolor == 'inherit':\noffset_labelcolor = mpl.rcParams['ytick.color']\n\n         # x in axes coords, y in display coords(!).\n         self.offsetText.set(\n             x=0, y=0.5,\n             transform=mtransforms.blended_transform_factory(\n                 self.axes.transAxes, mtransforms.IdentityTransform()),\n             fontsize=mpl.rcParams['ytick.labelsize'],\ncolor=offset_labelcolor,\n         )\n         self.offset_text_position = 'left'\n\n \n     def contains(self, mouseevent):\n         # docstring inherited\n",
        "test_offset_text_color.py": "new file mode 100644\nindex 0000000000..d9d7a97e62\nimport sys\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nprint(\"Step: Setting rcParams with distinct ytick.labelcolor='red' and ytick.color='blue'\")\nmpl.rcParams.update({'ytick.labelcolor': 'red', 'ytick.color': 'blue', 'ytick.labelsize': 12})\n\nprint(\"Step: Plotting data that forces scientific notation on the y-axis.\")\nfig, ax = plt.subplots()\nax.plot([1e9, 2e9, 3e9])  # Forces offset text (like 1.0e9)\n\nprint(\"Step: Drawing the figure so that offset text is fully realized.\")\nfig.canvas.draw()\n\noffset_color = ax.yaxis.offsetText.get_color()\nprint(f\"Observed offset text color: {offset_color}\")\nexpected_color = 'red'\n\nif offset_color.lower() == expected_color:\nprint(\"Test PASS: offset text color matches ytick.labelcolor.\")\nsys.exit(0)\nelse:\nprint(\"Test FAIL: offset text color does NOT match ytick.labelcolor.\")\nprint(f\"Expected: {expected_color}, Observed: {offset_color}\")\nsys.exit(1)\n"
    },
    "ground_truth_patch": {
        "lib/matplotlib/axis.py": "         )\n         self.label_position = 'bottom'\n \nif mpl.rcParams['xtick.labelcolor'] == 'inherit':\ntick_color = mpl.rcParams['xtick.color']\nelse:\ntick_color = mpl.rcParams['xtick.labelcolor']\n\n         self.offsetText.set(\n             x=1, y=0,\n             verticalalignment='top', horizontalalignment='right',\n             transform=mtransforms.blended_transform_factory(\n                 self.axes.transAxes, mtransforms.IdentityTransform()),\n             fontsize=mpl.rcParams['xtick.labelsize'],\ncolor=tick_color\n         )\n         self.offset_text_position = 'bottom'\n \n                 mtransforms.IdentityTransform(), self.axes.transAxes),\n         )\n         self.label_position = 'left'\n\nif mpl.rcParams['ytick.labelcolor'] == 'inherit':\ntick_color = mpl.rcParams['ytick.color']\nelse:\ntick_color = mpl.rcParams['ytick.labelcolor']\n\n         # x in axes coords, y in display coords(!).\n         self.offsetText.set(\n             x=0, y=0.5,\n             transform=mtransforms.blended_transform_factory(\n                 self.axes.transAxes, mtransforms.IdentityTransform()),\n             fontsize=mpl.rcParams['ytick.labelsize'],\ncolor=tick_color\n         )\n         self.offset_text_position = 'left'\n \n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-2\", \"reasoning\": \"These code samples are type-2 clones because they are identical except for differences in identifier names and literal values. The samples have similar structures and functionalities but use different variable names for colors ('offset_labelcolor' in sample 1 and 'tick_color' in sample 2). They also contain different label color definitions with 'xtick.labelcolor' and 'ytick.labelcolor', demonstrating variations in the literal values being accessed.\"}"
}