{
    "instance_id": "django__django-16333",
    "agent": "20250117_wandb_programmer_o1_crosscheck5",
    "agent_patch": {
        "django/contrib/auth/forms.py": "index d73d1c8495..125f47f89a 100644\n         user.set_password(self.cleaned_data[\"password1\"])\n         if commit:\n             user.save()\nself.save_m2m()\n         return user\n\n \n \n class UserChangeForm(forms.ModelForm):\n",
        "tests/manual_test_usercreationform_m2m.py": "new file mode 100644\nindex 0000000000..cfa6665bd1\nimport sys\nimport os\nimport django\nfrom django.conf import settings\nfrom django.core.management import call_command\n\ndef configure_settings():\n# Minimal Django settings for an in-memory test.\nsettings.configure(\nINSTALLED_APPS=[\n\"django.contrib.auth\",\n\"django.contrib.contenttypes\",\n],\nDATABASES={\n\"default\": {\n\"ENGINE\": \"django.db.backends.sqlite3\",\n\"NAME\": \":memory:\",\n}\n},\nSECRET_KEY=\"secret\",\nMIDDLEWARE=[],\n)\ndjango.setup()\n\ndef main():\nprint(\"Configuring settings...\")\nconfigure_settings()\n\nprint(\"Running migrations (create tables in in-memory DB)...\")\ncall_command(\"migrate\", run_syncdb=True, interactive=False, verbosity=0)\n\nprint(\"Importing models and forms...\")\nfrom django.contrib.auth.models import User, Group\nfrom django.contrib.auth.forms import UserCreationForm\n\n# Subclass that includes 'groups' in the Meta fields.\nclass CustomUserCreationForm(UserCreationForm):\nclass Meta(UserCreationForm.Meta):\nmodel = User\nfields = (\"username\", \"groups\")\n\nprint(\"Creating test group...\")\ngroup = Group.objects.create(name=\"testgroup\")\n\n# Prepare form data including the group.\ndata = {\n\"username\": \"testuser\",\n\"password1\": \"secret123\",\n\"password2\": \"secret123\",\n\"groups\": [group.pk],\n}\n\nprint(\"Initializing form with data:\", data)\nform = CustomUserCreationForm(data=data)\nprint(\"Form valid?\", form.is_valid(), \"Form errors:\", form.errors)\n\nif not form.is_valid():\nprint(\"Form is not valid. Exiting with code 2.\")\nsys.exit(2)\n\nprint(\"Saving user...\")\nuser = form.save()\n\ngroup_count = user.groups.count()\nprint(f\"User is in {group_count} group(s). Expected 1.\")\n\nif group_count == 1:\nprint(\"SUCCESS - user is in the group. Exiting 0.\")\nsys.exit(0)\nelse:\nprint(\"FAILURE - user is NOT in the group. Exiting 1.\")\nsys.exit(1)\n\nif __name__ == \"__main__\":\nmain()\n"
    },
    "ground_truth_patch": {
        "django/contrib/auth/forms.py": "         user.set_password(self.cleaned_data[\"password1\"])\n         if commit:\n             user.save()\nif hasattr(self, \"save_m2m\"):\nself.save_m2m()\n         return user\n \n \n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-1\", \"reasoning\": \"These code samples are type-1 clones because they are identical except for differences in whitespace and layout. The only noticeable difference is the addition of a condition in the second sample with 'if hasattr(self, \\\"save_m2m\\\"):' which checks if the method exists before calling it, while the first version directly calls 'self.save_m2m()'.\"}"
}