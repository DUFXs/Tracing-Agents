{
    "instance_id": "django__django-10880",
    "agent": "20250117_wandb_programmer_o1_crosscheck5",
    "agent_patch": {
        "django/db/models/aggregates.py": "index ac0b62d0bf..033e08bf18 100644\n         return []\n \n     def as_sql(self, compiler, connection, **extra_context):\nextra_context[\"distinct\"] = \"DISTINCT \" if self.distinct else \"\"\n         if self.filter:\n             if connection.features.supports_aggregate_filter_clause:\n                 filter_sql, filter_params = self.filter.as_sql(compiler, connection)\ntemplate = self.filter_template % extra_context.get(\"template\", self.template)\n                 sql, params = super().as_sql(\n                     compiler, connection, template=template, filter=filter_sql,\n                     **extra_context\n                 copy.set_source_expressions([Case(condition)] + source_expressions[1:])\n                 return super(Aggregate, copy).as_sql(compiler, connection, **extra_context)\n         return super().as_sql(compiler, connection, **extra_context)\n\n \n     def _get_repr_options(self):\n         options = super()._get_repr_options()\n",
        "test_bug_count_case_distinct.py": "new file mode 100644\nindex 0000000000..6c6a2d4136\nimport sys\nimport os\nimport traceback\n\ndef main():\nprint(\"Step 1: Configure minimal Django settings in-memory for testing.\")\nos.environ[\"DJANGO_SETTINGS_MODULE\"] = \"test_bug_count_case_distinct_settings\"\ntry:\nfrom django.conf import settings\nif not settings.configured:\nsettings.configure(\nDEBUG=True,\nSECRET_KEY=\"test\",\nINSTALLED_APPS=[\"django.contrib.contenttypes\"],\nDATABASES={\n\"default\": {\n\"ENGINE\": \"django.db.backends.sqlite3\",\n\"NAME\": \":memory:\",\n}\n},\nMIDDLEWARE=[],\nTEMPLATES=[],\n)\nexcept Exception as e:\nprint(\"Failed to configure Django settings:\", e)\nsys.exit(1)\n\nprint(\"Step 2: Initialize Django and define a trivial model.\")\ntry:\nimport django\ndjango.setup()\nfrom django.db import models\n\nclass SimpleModel(models.Model):\nname = models.CharField(max_length=100)\nclass Meta:\napp_label = \"contenttypes\"\n\nprint(\"Step 3: Construct a query that uses Count with distinct=True and Case.\")\nfrom django.db.models import Count, Case, When, IntegerField\n\nqs = SimpleModel.objects.annotate(\ncount_case_distinct=Count(\nCase(\nWhen(name__isnull=False, then=\"id\"),\noutput_field=IntegerField(),\n),\ndistinct=True\n)\n)\ncompiled_sql = str(qs.query)\nprint(\"Compiled SQL:\", compiled_sql)\n\nprint(\"Step 4: Check if the compiled SQL contains 'DISTINCTCASE' substring (bug).\")\nif \"DISTINCTCASE\" in compiled_sql:\nprint(\"BUG DETECTED: 'DISTINCTCASE' found in compiled SQL.\")\nsys.exit(1)\nelse:\nprint(\"No 'DISTINCTCASE' substring found. Likely fixed.\")\nsys.exit(0)\nexcept Exception as e:\nprint(\"Unexpected exception while constructing query or checking output.\")\ntraceback.print_exc()\nsys.exit(1)\n\nif __name__ == \"__main__\":\nmain()\n"
    },
    "ground_truth_patch": {
        "django/db/models/aggregates.py": "         return []\n \n     def as_sql(self, compiler, connection, **extra_context):\nextra_context['distinct'] = 'DISTINCT ' if self.distinct else ''\n         if self.filter:\n             if connection.features.supports_aggregate_filter_clause:\n                 filter_sql, filter_params = self.filter.as_sql(compiler, connection)\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-1\", \"reasoning\": \"These code samples are type-1 clones because they are identical except for differences in whitespace, layout, and comments. The core logic and structure are the same.\"}"
}