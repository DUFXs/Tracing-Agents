{
    "instance_id": "sphinx-doc__sphinx-7440",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "sphinx/domains/std.py": "index d820cfe5c..178249a06 100644\n         term['ids'].append(node_id)\n \n     std = cast(StandardDomain, env.get_domain('std'))\nstd.note_object('term', termtext, node_id, location=term)  # Keep original case\n\n \n     # add an index entry too\n     indexnode = addnodes.index()\n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n     }\n\n",
        "test_glossary.py": "new file mode 100644\nindex 000000000..5c312a047\nfrom sphinx.domains.std import StandardDomain\nfrom sphinx.environment import BuildEnvironment\nfrom docutils import nodes\nfrom types import SimpleNamespace\n\nclass MockRegistry:\ndef __init__(self):\nself.enumerable_nodes = {}\n\nclass MockApp:\ndef __init__(self):\nself.config = None\nself.registry = MockRegistry()\n\n# Create minimal environment\nenv = BuildEnvironment()\nenv.app = MockApp()\nenv.domains = {}\nenv.temp_data = {'docname': 'index'}  # Set current docname\ndomain = StandardDomain(env)\nenv.domains['std'] = domain\n\n# Test noting objects with different cases\nprint(\"Testing terms with different cases...\")\n\n# First term\ndomain.note_object('term', 'MySQL', 'id1', None)\nprint(\"Added first term: MySQL\")\n\n# Second term (different case)\ntry:\ndomain.note_object('term', 'mysql', 'id2', None)\nprint(\"Added second term: mysql\")\nexcept Exception as e:\nprint(f\"Error: {str(e)}\")\n\n# Show stored terms\nprint(\"\\nStored terms:\")\nterms = {}\nfor (objtype, name), (docname, node_id) in domain.objects.items():\nif objtype == 'term':\nterms[name] = node_id\n\nfor term, node_id in sorted(terms.items()):\nprint(f\"- {term} (id: {node_id})\")\n\n# Verify both terms exist and are different\nif 'MySQL' in terms and 'mysql' in terms:\nprint(\"\\nSuccess: Both case-sensitive terms are stored separately!\")\nelse:\nprint(\"\\nFailure: Terms are not being stored case-sensitively\")\nprint(\"Stored terms:\", list(terms.keys()))\n\n"
    },
    "ground_truth_patch": {
        "sphinx/domains/std.py": "         term['ids'].append(node_id)\n \n     std = cast(StandardDomain, env.get_domain('std'))\nstd.note_object('term', termtext, node_id, location=term)\n \n     # add an index entry too\n     indexnode = addnodes.index()\n         # links to tokens in grammar productions\n         'token':   TokenXRefRole(),\n         # links to terms in glossary\n'term':    XRefRole(innernodeclass=nodes.inline,\n                             warn_dangling=True),\n         # links to headings or arbitrary labels\n         'ref':     XRefRole(lowercase=True, innernodeclass=nodes.inline,\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-1\", \"reasoning\": \"These code samples are type-1 clones because they are identical except for differences in whitespace, layout, and comments. The structural code and logic appear to be the same, with only formatting and possibly comment changes.\"}"
}