{
    "instance_id": "django__django-14373",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "django/utils/dateformat.py": "index 38e89c47bb..6da843006c 100644\n \n     def Y(self):\n         \"Year, 4 digits; e.g. '1999'\"\nreturn '%04d' % self.data.year\n\n \n     def z(self):\n         \"\"\"Day of the year, i.e. 1 to 366.\"\"\"\n     \"Convenience function\"\n     tf = TimeFormat(value)\n     return tf.format(format_string)\n\n",
        "test_dateformat.py": "new file mode 100644\nindex 0000000000..759dc04df2\n\nimport datetime\nfrom django.utils.dateformat import DateFormat\n\n# Test various edge cases\ntest_years = [1, 99, 999, 1000, 9999]\nfor year in test_years:\ndate = datetime.date(year, 1, 1)\ndf = DateFormat(date)\nformatted = df.Y()\nprint(f\"Year {year} formatted: '{formatted}' (length: {len(str(formatted))})\")\n"
    },
    "ground_truth_patch": {
        "django/utils/dateformat.py": "         return '%02d' % (self.data.year % 100)\n \n     def Y(self):\n\"\"\"Year, 4 digits with leading zeros; e.g. '1999'.\"\"\"\nreturn '%04d' % self.data.year\n \n     def z(self):\n         \"\"\"Day of the year, i.e. 1 to 366.\"\"\"\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-2\", \"reasoning\": \"These code samples are type-2 clones because they are identical except for differences in whitespace, layout, and comments, as well as the use of different literal formatting (`'%02d'` vs. `'%04d'` in the same context). The logic and structure remain the same, but the formatting of the return statement in the first patch differs.\"}"
}