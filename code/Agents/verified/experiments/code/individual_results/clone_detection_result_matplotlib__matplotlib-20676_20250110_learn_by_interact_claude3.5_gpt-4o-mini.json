{
    "instance_id": "matplotlib__matplotlib-20676",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "lib/matplotlib/widgets.py": "index a199e45d40..a9b99222e4 100644\n \n         if self.direction == 'horizontal':\n             trans = ax.get_xaxis_transform()\nxmin, xmax = ax.get_xbound()\nself._rect = Rectangle((xmin, 0), xmax - xmin, 1,\ntransform=trans,\nvisible=False,\n**self._rectprops)\n         else:\n             trans = ax.get_yaxis_transform()\nymin, ymax = ax.get_ybound()\nself._rect = Rectangle((0, ymin), 1, ymax - ymin,\n                                transform=trans,\n                                visible=False,\n                                **self._rectprops)\n \n\n         self.ax.add_patch(self._rect)\n         if len(self.artists) > 0:\n             self.artists[0] = self._rect\n             self.canvas.blit(self.ax.bbox)\n         else:\n             self.canvas.draw_idle()\n\n",
        "reproduce_span.py": "new file mode 100644\nindex 0000000000..265aff84fd\nfrom matplotlib import pyplot as plt\nfrom matplotlib.widgets import SpanSelector\n\nfig, ax = plt.subplots()\nax.plot([10, 20], [10, 20])\nss = SpanSelector(ax, print, \"horizontal\", interactive=True)\nplt.show()\n",
        "test_span.py": "new file mode 100644\nindex 0000000000..0368e85c16\nimport matplotlib.pyplot as plt\nfrom matplotlib.widgets import SpanSelector\n\n# Test 1: Original case (positive range)\nfig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(8, 8))\n\n# Positive range\nax1.plot([10, 20], [10, 20])\nss1 = SpanSelector(ax1, print, \"horizontal\", interactive=True)\nax1.set_title(\"Positive range\")\n\n# Negative range\nax2.plot([-20, -10], [-20, -10])\nss2 = SpanSelector(ax2, print, \"horizontal\", interactive=True)\nax2.set_title(\"Negative range\")\n\n# Vertical selector\nax3.plot([10, 20], [10, 20])\nss3 = SpanSelector(ax3, print, \"vertical\", interactive=True)\nax3.set_title(\"Vertical selector\")\n\nplt.tight_layout()\nplt.show()\n"
    },
    "ground_truth_patch": {
        "lib/matplotlib/widgets.py": "             self.artists.append(self._rect)\n \n     def _setup_edge_handle(self, props):\n# Define initial position using the axis bounds to keep the same bounds\nif self.direction == 'horizontal':\npositions = self.ax.get_xbound()\nelse:\npositions = self.ax.get_ybound()\nself._edge_handles = ToolLineHandles(self.ax, positions,\n                                              direction=self.direction,\n                                              line_props=props,\n                                              useblit=self.useblit)\n"
    },
    "response": "{\"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they have different functionalities and implementations. The first sample involves creating and managing rectangles and selections for plotting, while the second sample is concerned with setting up edge handles for a tool, and there are no syntactical similarities or structural relations between the two.\"}"
}