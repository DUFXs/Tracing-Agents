{
    "instance_id": "django__django-13033",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/db/models/sql/compiler.py": "index abbb1e37cb..3742347600 100644\n         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)\n \n         # If we get to this point and the field is a relation to another model,\n# append the default ordering for that model unless:\n# - it is the pk shortcut\n# - it is the attribute name of the field\n# - it ends with _id (direct foreign key reference)\nif (field.is_relation and opts.ordering and \ngetattr(field, 'attname', None) != name and \nname != 'pk' and \nnot name.endswith('_id')):\n             # Firstly, avoid infinite loops.\n             already_seen = already_seen or set()\n             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..f0ee5feef9\nfrom django.db import models\nfrom django.test.utils import setup_test_environment\nfrom django.conf import settings\n\nif not settings.configured:\nsettings.configure(\nDATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},\nDEFAULT_AUTO_FIELD='django.db.models.BigAutoField',\nINSTALLED_APPS=['django.contrib.contenttypes'],\n)\n\nimport django\ndjango.setup()\nsetup_test_environment()\n\n# Define test models\nclass OneModel(models.Model):\nclass Meta:\nordering = (\"-id\",)\napp_label = 'test'\n\nid = models.BigAutoField(primary_key=True)\nroot = models.ForeignKey('self', on_delete=models.CASCADE, null=True)\noneval = models.BigIntegerField(null=True)\n\nclass TwoModel(models.Model):\nclass Meta:\napp_label = 'test'\n\nid = models.BigAutoField(primary_key=True)\nrecord = models.ForeignKey(OneModel, on_delete=models.CASCADE)\ntwoval = models.BigIntegerField(null=True)\n\n# Create schema\nfrom django.db import connection\nwith connection.schema_editor() as schema_editor:\nschema_editor.create_model(OneModel)\nschema_editor.create_model(TwoModel)\n\n# Test queries\ndef print_query(description, queryset):\nprint(f\"\\n{description}:\")\nprint(queryset.query)\n\n# Base queryset\nbase_qs = TwoModel.objects.filter(record__oneval__in=[1,2,3])\n\n# Test different ordering scenarios\nprint_query(\"1. Using record__root_id (problematic)\", \nbase_qs.order_by(\"record__root_id\"))\n\nprint_query(\"2. Using record__root__id (works correctly)\", \nbase_qs.order_by(\"record__root__id\"))\n\nfrom django.db.models import F\nprint_query(\"3. Using annotation (works correctly)\",\nbase_qs.annotate(root_id=F(\"record__root_id\")).order_by(\"root_id\"))\n\nprint_query(\"4. Using -record__root_id (shows inverted behavior)\",\nbase_qs.order_by(\"-record__root_id\"))\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/db/models/sql/compiler.py": "# If we get to this point and the field is a relation to another model,\n# append the default ordering for that model unless it is the pk\n# shortcut or the attribute name of the field that is specified.\nif (\n    field.is_relation\n    and opts.ordering\n    and getattr(field, \"attname\", None) != pieces[-1]\n    and name != \"pk\"\n):\n    # Firstly, avoid infinite loops.\n    already_seen = already_seen or set()\n    join_tuple = tuple(\n        getattr(self.query.alias_map[j], \"join_cols\", None) for j in joins\n    )\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-2\", \"reasoning\": \"These code samples are type-2 clones because they have similar structure and functionality, but there are differences in identifier names, whitespace, layout, and comments.\"}"
}