{
    "instance_id": "pytest-dev__pytest-7982",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "reproduce_symlink_issue.py": "new file mode 100644\nindex 000000000..d070bc8f5\nimport os\nimport tempfile\nfrom pathlib import Path\nimport pytest\n\n# Create a temporary test structure\nwith tempfile.TemporaryDirectory() as tmpdir:\n# Create test directory structure\ntest_dir = Path(tmpdir) / \"test_dir\"\ntest_dir.mkdir()\n\n# Create a subdirectory with a test file\nsub_dir = Path(tmpdir) / \"sub_dir\"\nsub_dir.mkdir()\n(sub_dir / \"test_example.py\").write_text(\"def test_example(): pass\")\n\n# Create symlink to sub_dir inside test_dir\nos.symlink(str(sub_dir), str(test_dir / \"symlink_dir\"))\n\n# Use the visit function from pytest\nfrom _pytest.pathlib import visit\n\ndef recurse(entry):\nreturn True\n\n# Try to visit the directory\nprint(\"Found files:\")\nfor entry in visit(str(test_dir), recurse):\nprint(f\"- {entry.name} ({'symlink' if entry.is_symlink() else 'regular'})\")\n",
        "src/_pytest/pathlib.py": "index f0bdb1481..945966cab 100644\n     entries = sorted(os.scandir(path), key=lambda entry: entry.name)\n     yield from entries\n     for entry in entries:\nif entry.is_dir() and recurse(entry):\n             yield from visit(entry.path, recurse)\n \n \n\n def absolutepath(path: Union[Path, str]) -> Path:\n     \"\"\"Convert a path to an absolute path using os.path.abspath.\n \n         # Forward from base to dest.\n         *reldest.parts,\n     )\n\n"
    },
    "ground_truth_patch": {
        "src/_pytest/pathlib.py": "     entries = sorted(os.scandir(path), key=lambda entry: entry.name)\n     yield from entries\n     for entry in entries:\nif entry.is_dir() and recurse(entry):\n             yield from visit(entry.path, recurse)\n \n \n"
    },
    "response": "{\"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they come from different files and serve different purposes. The first code sample is a complete script for testing symlinks, while the second sample is a snippet from a function that deals with directory entries. They do not share enough structure or intent to be classified as clones.\"}"
}