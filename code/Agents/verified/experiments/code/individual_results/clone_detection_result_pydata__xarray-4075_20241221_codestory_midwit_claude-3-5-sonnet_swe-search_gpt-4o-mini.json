{
    "instance_id": "pydata__xarray-4075",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "edge_cases.py": "new file mode 100644\nindex 00000000..4f3672cd\nimport numpy as np\nimport xarray as xr\n\n# Test 1: Original case\nprint(\"Test 1: Original case\")\ndta = xr.DataArray([1., 1., 1.])\nwgt = xr.DataArray(np.array([1, 1, 0], dtype=bool))\nresult = dta.weighted(wgt).mean()\nprint(\"Result:\", result.values)\nprint(\"Expected: 1.0\")\nprint()\n\n# Test 2: All weights False\nprint(\"Test 2: All weights False\")\ndta = xr.DataArray([1., 1., 1.])\nwgt = xr.DataArray(np.array([0, 0, 0], dtype=bool))\ntry:\nresult = dta.weighted(wgt).mean()\nprint(\"Result:\", result.values)\nexcept Exception as e:\nprint(\"Got expected error for zero weights:\", str(e))\nprint()\n\n# Test 3: Mixed data with some NaN\nprint(\"Test 3: Mixed data with NaN\")\ndta = xr.DataArray([1., np.nan, 3.])\nwgt = xr.DataArray(np.array([1, 0, 1], dtype=bool))\nresult = dta.weighted(wgt).mean()\nprint(\"Result:\", result.values)\nprint(\"Expected: 2.0\")  # (1 + 3) / 2\nprint()\n\n# Test 4: Different shapes with broadcasting\nprint(\"Test 4: Different shapes with broadcasting\")\ndta = xr.DataArray([[1., 2.], [3., 4.]], dims=['x', 'y'])\nwgt = xr.DataArray([True, False], dims=['x'])\nresult = dta.weighted(wgt).mean('x')\nprint(\"Result:\", result.values)\nprint(\"Expected: [1. 2.]\")  # Only first row counts\n\\ No newline at end of file\n",
        "reproduce_error.py": "new file mode 100644\nindex 00000000..7c7abbc9\nimport numpy as np\nimport xarray as xr\n\ndta = xr.DataArray([1., 1., 1.])\nwgt = xr.DataArray(np.array([1, 1, 0], dtype=np.bool))\n\nresult = dta.weighted(wgt).mean()\nprint(\"Current result:\", result)\nprint(\"Expected result: 1.0\")\n\\ No newline at end of file\n",
        "xarray/core/weighted.py": "index 996d2e4c..c6b8206e 100644\n             )\n \n         self.obj = obj\n# Convert boolean weights to float to ensure correct arithmetic\nself.weights = weights if weights.dtype.kind != 'b' else weights.astype(float)\n \n     @staticmethod\n     def _reduce(\n"
    },
    "ground_truth_patch": {
        "xarray/core/weighted.py": "         # we need to mask data values that are nan; else the weights are wrong\n         mask = da.notnull()\n \n# bool -> int, because ``xr.dot([True, True], [True, True])`` -> True\n# (and not 2); GH4074\nif self.weights.dtype == bool:\nsum_of_weights = self._reduce(\nmask, self.weights.astype(int), dim=dim, skipna=False\n)\nelse:\nsum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)\n \n         # 0-weights are not valid\n         valid_weights = sum_of_weights != 0.0\n"
    },
    "response": "{\"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they belong to different contexts and have different content. Sample 1 contains complete test cases for evaluating a weighted mean with various inputs and expected outputs, whereas sample 2 is a snippet focusing on some implementation details of handling weights in a general function context. They do not share structural similarities or common logic that would classify them as clones.\"}"
}