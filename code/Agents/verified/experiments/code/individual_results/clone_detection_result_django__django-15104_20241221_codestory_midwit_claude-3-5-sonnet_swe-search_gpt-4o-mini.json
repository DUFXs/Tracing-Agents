{
    "instance_id": "django__django-15104",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/db/migrations/autodetector.py": "index 97977d72ef..bf9c2acd26 100644\n         for name, field in sorted(fields.items()):\n             deconstruction = self.deep_deconstruct(field)\n             if field.remote_field and field.remote_field.model:\ndeconstruction[2].pop('to', None)\n             fields_def.append(deconstruction)\n         return fields_def\n \n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..eba09adffa\nimport os\nimport django\nfrom django.db import models\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.state import ModelState, ProjectState\nfrom django.apps import apps\nfrom django.conf import settings\n\n# Configure Django settings\nif not settings.configured:\nsettings.configure(\nDATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}},\nINSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],\n)\ndjango.setup()\n\nclass CustomFKField(models.ForeignKey):\ndef __init__(self, *args, **kwargs):\nkwargs['to'] = 'testapp.HardcodedModel'\nsuper().__init__(*args, **kwargs)\n\ndef deconstruct(self):\nname, path, args, kwargs = super().deconstruct()\ndel kwargs[\"to\"]\nreturn name, path, args, kwargs\n\ndef test_reproduction():\nbefore = ProjectState()\nbefore.add_model(ModelState('testapp', 'HardcodedModel', []))\nafter = ProjectState()\nafter.add_model(ModelState('testapp', 'HardcodedModel', []))\nafter.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))\ntry:\nchanges = MigrationAutodetector(before, after)._detect_changes()\nprint(\"Test completed successfully - no KeyError was raised\")\nexcept KeyError as e:\nprint(f\"Test failed - KeyError was raised: {e}\")\nexit(1)\n\nif __name__ == \"__main__\":\ntest_reproduction()\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/db/migrations/autodetector.py": "         for name, field in sorted(fields.items()):\n             deconstruction = self.deep_deconstruct(field)\n             if field.remote_field and field.remote_field.model:\ndeconstruction[2].pop('to', None)\n             fields_def.append(deconstruction)\n         return fields_def\n \n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-1\", \"reasoning\": \"These code samples are type-1 clones because they are identical except for differences in whitespace. The lines of code in both samples are exactly the same, with no differences in logic or structure, only the presence of additional formatting whitespace in the first code sample.\"}"
}