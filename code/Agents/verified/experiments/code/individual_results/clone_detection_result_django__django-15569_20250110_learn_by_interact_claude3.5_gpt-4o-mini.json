{
    "instance_id": "django__django-15569",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "django/db/models/query_utils.py": "index 0caa165e15..a0dbac604b 100644\n         if lookup_name is None:\n             lookup_name = lookup.lookup_name\n         del cls.class_lookups[lookup_name]\ncls._clear_cached_lookups()\n \n \n def select_related_descend(field, restricted, requested, load_fields, reverse=False):\n         query = compiler.query\n         where = query.build_filtered_relation_q(self.condition, reuse=set(self.path))\n         return compiler.compile(where)\n\n",
        "reproduce.py": "new file mode 100644\nindex 0000000000..08d58ce0df\nfrom django.db.models.query_utils import RegisterLookupMixin\n\nclass TestLookup:\nlookup_name = 'test_lookup'\n\nclass TestMixin(RegisterLookupMixin):\nclass_lookups = {}\n\n# Register a lookup\nTestMixin.register_lookup(TestLookup)\nprint(\"Lookups after register:\", TestMixin.get_lookups())\n\n# Unregister the lookup\nTestMixin._unregister_lookup(TestLookup)\nprint(\"Lookups after unregister:\", TestMixin.get_lookups())  # Cache still contains old value!\n"
    },
    "ground_truth_patch": {
        "django/db/models/query_utils.py": "         if lookup_name is None:\n             lookup_name = lookup.lookup_name\n         del cls.class_lookups[lookup_name]\ncls._clear_cached_lookups()\n \n \n def select_related_descend(field, restricted, requested, load_fields, reverse=False):\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-1\", \"reasoning\": \"These code samples are type-1 clones because they are identical except for differences in whitespace and layout. The actual logic and structure of the code are the same.\"}"
}