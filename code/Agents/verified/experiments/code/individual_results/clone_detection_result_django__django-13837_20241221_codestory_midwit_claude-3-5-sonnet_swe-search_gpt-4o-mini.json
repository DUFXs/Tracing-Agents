{
    "instance_id": "django__django-13837",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/utils/autoreload.py": "index b8efb9f881..c8996f85d1 100644\n     Return the executable. This contains a workaround for Windows if the\n     executable is reported to not have the .exe extension which can cause bugs\n     on reloading.\n\nThis function detects if Python was launched with -m pkg using Python's\ndocumented way: checking __main__.__spec__.parent.\n     \"\"\"\nimport __main__\n     py_script = Path(sys.argv[0])\n \n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n\n# Check if Python was launched with -m pkg using __main__.__spec__.parent\nif hasattr(__main__, '__spec__') and __main__.__spec__ is not None:\nparent = __main__.__spec__.parent\nif parent:  # Not empty string (which would indicate directory/zipfile)\n# The server was started with `python -m pkg runserver`\nargs += ['-m', parent]\nargs += sys.argv[1:]\nreturn args\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\n         # It may exist with a .exe extension or have a -script.py suffix.\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..ec38a2bb2b\nimport os\nimport sys\nimport tempfile\nfrom pathlib import Path\n\n# Create a temporary package directory\nwith tempfile.TemporaryDirectory() as temp_dir:\npkg_dir = Path(temp_dir) / \"test_pkg\"\npkg_dir.mkdir()\n\n# Create __init__.py files\n(pkg_dir / \"__init__.py\").write_text(\"\")\n\n# Create settings.py with minimal settings\n(pkg_dir / \"settings.py\").write_text(\"\"\"\nSECRET_KEY = 'dummy'\nDEBUG = True\nALLOWED_HOSTS = ['*']\nROOT_URLCONF = 'test_pkg.urls'\nINSTALLED_APPS = []\nDATABASES = {\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:',\n}\n}\nMIDDLEWARE = []\nTEMPLATES = []\n\"\"\")\n\n# Create urls.py\n(pkg_dir / \"urls.py\").write_text(\"\"\"\nfrom django.urls import path\nurlpatterns = []\n\"\"\")\n\n# Create __main__.py that uses Django's runserver\n(pkg_dir / \"__main__.py\").write_text(\"\"\"\nimport os\nimport sys\nimport django\nfrom django.core.management import execute_from_command_line\n\nif __name__ == '__main__':\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_pkg.settings')\ndjango.setup()\nexecute_from_command_line(sys.argv)\n\"\"\")\n\n# Change to the temp directory and add it to Python path\nos.chdir(temp_dir)\nsys.path.insert(0, temp_dir)\n\n# Try to run the package with -m\nprint(\"Running: python -m test_pkg runserver\")\nos.system(f\"{sys.executable} -m test_pkg runserver\")\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/utils/autoreload.py": "     executable is reported to not have the .exe extension which can cause bugs\n     on reloading.\n     \"\"\"\nimport __main__\n     py_script = Path(sys.argv[0])\n \n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n# __spec__ is set when the server was started with the `-m` option,\n# see https://docs.python.org/3/reference/import.html#main-spec\nif __main__.__spec__ is not None and __main__.__spec__.parent:\nargs += ['-m', __main__.__spec__.parent]\n         args += sys.argv[1:]\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-1\", \"reasoning\": \"These code samples are type-1 clones because they are identical except for differences in whitespace and comments. The functional logic remains unchanged, and there are no modifications to variables or structures, just reformatting and commentary differences.\"}"
}