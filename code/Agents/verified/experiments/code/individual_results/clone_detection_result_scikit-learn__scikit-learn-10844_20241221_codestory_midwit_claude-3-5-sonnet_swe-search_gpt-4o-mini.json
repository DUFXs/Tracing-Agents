{
    "instance_id": "scikit-learn__scikit-learn-10844",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "reproduce_error.py": "new file mode 100644\nindex 000000000..a5b8dff4b\nimport numpy as np\nfrom sklearn.metrics.cluster import fowlkes_mallows_score\n\ndef test_case(labels_true, labels_pred, case_name):\nscore = fowlkes_mallows_score(labels_true, labels_pred)\nprint(f\"{case_name}: {score}\")\n\n# Test case 1: Original overflow case (should work now)\nn = 100000\nlabels_true = np.zeros(n, dtype=np.int)\nlabels_pred = np.zeros(n, dtype=np.int)\nlabels_true[n//2:] = 1\nlabels_pred[n//2:] = 1\ntest_case(labels_true, labels_pred, \"Large matching clusters\")\n\n# Test case 2: tk = 0 case (completely different clusters)\nlabels_true = np.array([0, 0, 0, 1, 1, 1])\nlabels_pred = np.array([1, 1, 1, 0, 0, 0])\ntest_case(labels_true, labels_pred, \"Completely different clusters\")\n\n# Test case 3: Small numbers\nlabels_true = np.array([0, 0, 1])\nlabels_pred = np.array([0, 0, 1])\ntest_case(labels_true, labels_pred, \"Small matching clusters\")\n\n# Test case 4: Single element clusters\nlabels_true = np.array([0, 1, 2, 3])\nlabels_pred = np.array([0, 1, 2, 3])\ntest_case(labels_true, labels_pred, \"Single element clusters\")\n\\ No newline at end of file\n",
        "sklearn/metrics/cluster/supervised.py": "index a987778ae..9bcca75a2 100644\n     tk = np.dot(c.data, c.data) - n_samples\n     pk = np.sum(np.asarray(c.sum(axis=0)).ravel() ** 2) - n_samples\n     qk = np.sum(np.asarray(c.sum(axis=1)).ravel() ** 2) - n_samples\nreturn np.sqrt(tk / pk) * np.sqrt(tk / qk) if tk != 0. else 0.\n \n \n def entropy(labels):\n"
    },
    "ground_truth_patch": {
        "sklearn/metrics/cluster/supervised.py": "     labels_true, labels_pred = check_clusterings(labels_true, labels_pred)\n     n_samples, = labels_true.shape\n \nc = contingency_matrix(labels_true, labels_pred,\nsparse=True).astype(np.int64)\n     tk = np.dot(c.data, c.data) - n_samples\n     pk = np.sum(np.asarray(c.sum(axis=0)).ravel() ** 2) - n_samples\n     qk = np.sum(np.asarray(c.sum(axis=1)).ravel() ** 2) - n_samples\nreturn np.sqrt(tk / pk) * np.sqrt(tk / qk) if tk != 0. else 0.\n \n \n def entropy(labels):\n"
    },
    "response": "{\"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they belong to different contexts and serve different purposes. Sample 1 contains specific test cases for evaluating the fowlkes_mallows_score metric using clustering labels, while Sample 2 is a snippet dealing with the calculation of a contingency matrix and related metrics. The two samples do not exhibit similarity in structure or functionality.\"}"
}