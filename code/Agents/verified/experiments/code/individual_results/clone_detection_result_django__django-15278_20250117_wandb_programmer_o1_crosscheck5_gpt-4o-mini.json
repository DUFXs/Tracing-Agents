{
    "instance_id": "django__django-15278",
    "agent": "20250117_wandb_programmer_o1_crosscheck5",
    "agent_patch": {
        "django/db/backends/sqlite3/schema.py": "index 6752a8e3c0..82f9dc1eea 100644\n \n     def add_field(self, model, field):\n         \"\"\"Create a field on a model.\"\"\"\n# Fields with default values cannot be handled by ALTER TABLE ADD COLUMN\n# statement because DROP DEFAULT is not supported in ALTER TABLE.\n# Also, SQLite does not allow adding a UNIQUE column via ALTER TABLE.\nif not field.null or self.effective_default(field) is not None or field.unique:\n             self._remake_table(model, create_field=field)\n         else:\n             super().add_field(model, field)\n\n \n     def remove_field(self, model, field):\n         \"\"\"\n",
        "test_add_nullable_o2o_sqlite.py": "new file mode 100644\nindex 0000000000..3be2b36e9e\nimport sys\nimport os\nimport traceback\nimport django\nfrom django.conf import settings\n\ndef main():\nprint('Starting test: Add nullable OneToOneField on SQLite.')\ndirectory = 'tmp_testapp'\ntry:\n# Ensure tmp_testapp is on sys.path so we can import \"testapp\"\nsys.path.insert(0, os.path.abspath(directory))\n\nif not os.path.exists(directory):\nos.makedirs(directory)\napp_dir = os.path.join(directory, 'testapp')\nif not os.path.exists(app_dir):\nos.makedirs(app_dir)\nmigrations_dir = os.path.join(app_dir, 'migrations')\nif not os.path.exists(migrations_dir):\nos.makedirs(migrations_dir)\n\n# Create __init__.py files\nopen(os.path.join(app_dir, '__init__.py'), 'w').close()\nopen(os.path.join(migrations_dir, '__init__.py'), 'w').close()\n\n# Create apps.py\nwith open(os.path.join(app_dir, 'apps.py'), 'w') as f:\nf.write(\n'from django.apps import AppConfig\\n'\n'\\n'\n'class TestappConfig(AppConfig):\\n'\n'    name = \\\"testapp\\\"\\n'\n)\n\n# Create models.py\nwith open(os.path.join(app_dir, 'models.py'), 'w') as f:\nf.write(\n'from django.db import models\\n'\n'\\n'\n'class MyModel(models.Model):\\n'\n'    name = models.CharField(max_length=255)\\n'\n)\n\n# Create 0001_initial.py\nwith open(os.path.join(migrations_dir, '0001_initial.py'), 'w') as f:\nf.write(\n'from django.db import migrations, models\\n'\n'\\n'\n'class Migration(migrations.Migration):\\n'\n'    initial = True\\n'\n'    dependencies = []\\n'\n'    operations = [\\n'\n'        migrations.CreateModel(\\n'\n'            name=\\\"MyModel\\\",\\n'\n'            fields=[\\n'\n'                (\\\"id\\\", models.AutoField(primary_key=True, auto_created=True, serialize=False, verbose_name=\\\"ID\\\")),\\n'\n'                (\\\"name\\\", models.CharField(max_length=255)),\\n'\n'            ],\\n'\n'        ),\\n'\n'    ]\\n'\n)\n\n# Create 0002_one_to_one.py\nwith open(os.path.join(migrations_dir, '0002_one_to_one.py'), 'w') as f:\nf.write(\n'from django.db import migrations, models\\n'\n'import django.db.models.deletion\\n'\n'\\n'\n'class Migration(migrations.Migration):\\n'\n'    dependencies = [\\n'\n'        (\\\"testapp\\\", \\\"0001_initial\\\"),\\n'\n'    ]\\n'\n'    operations = [\\n'\n'        migrations.AddField(\\n'\n'            model_name=\\\"mymodel\\\",\\n'\n'            name=\\\"myo2o\\\",\\n'\n'            field=models.OneToOneField(null=True, blank=True, to=\\\"testapp.MyModel\\\", on_delete=django.db.models.deletion.SET_NULL),\\n'\n'        ),\\n'\n'    ]\\n'\n)\n\n# Configure Django\nif not settings.configured:\nsettings.configure(\nINSTALLED_APPS=[\n'django.contrib.contenttypes',\n'testapp',\n],\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': 'test_o2o_db.sqlite3',\n}\n},\nMIDDLEWARE=[],\nROOT_URLCONF=None,\nTEMPLATES=[],\nSECRET_KEY='testsecretkey',\n)\ndjango.setup()\n\nfrom django.core.management import call_command\n\nprint('Running migrate for 0001...')\ncall_command('migrate', 'testapp', '0001_initial', '--verbosity=2')\nprint('Running migrate for 0002...')\ncall_command('migrate', 'testapp', '0002_one_to_one', '--verbosity=2')\n\nprint('SUCCESS: it did not crash.')\nsys.exit(0)\n\nexcept Exception as e:\nprint('FAIL: encountered an exception:', e)\ntraceback.print_exc()\nsys.exit(1)\n\nif __name__ == '__main__':\nmain()\n",
        "test_o2o_db.sqlite3": "new file mode 100644\nindex 0000000000..c76863e239\nBinary files /dev/null and b/test_o2o_db.sqlite3 differ\n",
        "tmp_testapp/testapp/__init__.py": "new file mode 100644\nindex 0000000000..e69de29bb2\n",
        "tmp_testapp/testapp/apps.py": "new file mode 100644\nindex 0000000000..d42cf542a5\nfrom django.apps import AppConfig\n\nclass TestappConfig(AppConfig):\nname = \"testapp\"\n",
        "tmp_testapp/testapp/migrations/0001_initial.py": "new file mode 100644\nindex 0000000000..73bf8ef245\nfrom django.db import migrations, models\n\nclass Migration(migrations.Migration):\ninitial = True\ndependencies = []\noperations = [\nmigrations.CreateModel(\nname=\"MyModel\",\nfields=[\n(\"id\", models.AutoField(primary_key=True, auto_created=True, serialize=False, verbose_name=\"ID\")),\n(\"name\", models.CharField(max_length=255)),\n],\n),\n]\n",
        "tmp_testapp/testapp/migrations/0002_one_to_one.py": "new file mode 100644\nindex 0000000000..4fa2c2da44\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\nclass Migration(migrations.Migration):\ndependencies = [\n(\"testapp\", \"0001_initial\"),\n]\noperations = [\nmigrations.AddField(\nmodel_name=\"mymodel\",\nname=\"myo2o\",\nfield=models.OneToOneField(null=True, blank=True, to=\"testapp.MyModel\", on_delete=django.db.models.deletion.SET_NULL),\n),\n]\n",
        "tmp_testapp/testapp/migrations/__init__.py": "new file mode 100644\nindex 0000000000..e69de29bb2\n",
        "tmp_testapp/testapp/models.py": "new file mode 100644\nindex 0000000000..91e1b749b1\nfrom django.db import models\n\nclass MyModel(models.Model):\nname = models.CharField(max_length=255)\n"
    },
    "ground_truth_patch": {
        "django/db/backends/sqlite3/schema.py": " \n     def add_field(self, model, field):\n         \"\"\"Create a field on a model.\"\"\"\nif (\n# Primary keys and unique fields are not supported in ALTER TABLE\n# ADD COLUMN.\nfield.primary_key or field.unique or\n# Fields with default values cannot by handled by ALTER TABLE ADD\n# COLUMN statement because DROP DEFAULT is not supported in\n# ALTER TABLE.\nnot field.null or self.effective_default(field) is not None\n):\n             self._remake_table(model, create_field=field)\n         else:\n             super().add_field(model, field)\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they are syntactically similar but contain different statements and comments. In particular, the conditions in the if statement differ, where the second code sample introduces parentheses and changes the order and formulation of conditions. Additionally, the comments vary slightly in content, indicating modified statements.\"}"
}