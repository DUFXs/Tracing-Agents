{
    "instance_id": "django__django-13964",
    "agent": "20250117_wandb_programmer_o1_crosscheck5",
    "agent_patch": {
        "django/db/models/base.py": "index 2428218696..4050791d37 100644\n                         \"%s() prohibited to prevent data loss due to unsaved \"\n                         \"related object '%s'.\" % (operation_name, field.name)\n                     )\nelif getattr(self, field.attname) in (None, ''):\n                     # Use pk from related object if it has been saved after\n# an assignment and the parent's FK is still uninitialized.\n                     setattr(self, field.attname, obj.pk)\n                 # If the relationship's pk/to_field was changed, clear the\n                 # cached relationship.\n                 if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n                     field.delete_cached_value(self)\n\n \n     def delete(self, using=None, keep_parents=False):\n         using = using or router.db_for_write(self.__class__, instance=self)\n",
        "test_nonauto_fk.py": "new file mode 100644\nindex 0000000000..ecdaa4849f\nimport sys\nimport django\nfrom django.conf import settings\nfrom django.db import connection, transaction, models\n\ndef main():\n# Configure settings if not already.\nif not settings.configured:\nsettings.configure(\nSECRET_KEY='abc123',\nINSTALLED_APPS=['django.contrib.contenttypes'],\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:',\n},\n},\n)\ndjango.setup()\n\nclass Product(models.Model):\nsku = models.CharField(primary_key=True, max_length=50)\nclass Meta:\napp_label = '__test__'\n\nclass Order(models.Model):\nproduct = models.ForeignKey(Product, on_delete=models.CASCADE)\nclass Meta:\napp_label = '__test__'\n\n# Create database tables in memory.\nwith connection.schema_editor() as schema_editor:\nschema_editor.create_model(Product)\nschema_editor.create_model(Order)\n\n# Replicate the problematic scenario in a transaction.\ntry:\nwith transaction.atomic():\norder = Order()\norder.product = Product()\norder.product.sku = 'foo'\norder.product.save()\norder.save()\n# Check if the parent's FK is \"foo\".\nactual_product_id = order.product_id\nif actual_product_id == 'foo':\nprint('PASS: Foreign key updated. product_id is \"foo\".')\nsys.exit(0)\nelse:\nprint(f'FAIL: product_id is \"{actual_product_id}\", expected \"foo\".')\nsys.exit(1)\n\nexcept Exception as e:\nprint('FAIL: Exception occurred (possibly a constraint violation).', e)\nsys.exit(1)\n\nif __name__ == '__main__':\nmain()\n"
    },
    "ground_truth_patch": {
        "django/db/models/base.py": "                         \"%s() prohibited to prevent data loss due to unsaved \"\n                         \"related object '%s'.\" % (operation_name, field.name)\n                     )\nelif getattr(self, field.attname) in field.empty_values:\n                     # Use pk from related object if it has been saved after\n                     # an assignment.\n                     setattr(self, field.attname, obj.pk)\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-1\", \"reasoning\": \"These code samples are type-1 clones because they are identical except for differences in whitespace and layout. The logic and content of the code are the same, with only minor formatting variations.\"}"
}