{
    "instance_id": "django__django-11149",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "django/contrib/admin/options.py": "index 880a2cc17b..ebcfb048b3 100644\n         if self.opts.auto_created:\n             # We're checking the rights to an auto-created intermediate model,\n             # which doesn't have its own individual permissions. The user needs\n# to have the change permission for the related model in order to\n# be able to add intermediate model instances.\nopts = self.opts\n# Find the target model that's not the parent model\nfor field in opts.fields:\nif field.remote_field and field.remote_field.model != self.parent_model:\nopts = field.remote_field.model._meta\nbreak\nreturn request.user.has_perm(\n'%s.%s' % (opts.app_label, get_permission_codename('change', opts))\n)\n         return super().has_add_permission(request)\n \n     def has_change_permission(self, request, obj=None):\n         if self.opts.auto_created:\n             # We're checking the rights to an auto-created intermediate model,\n             # which doesn't have its own individual permissions. The user needs\n# to have the change permission for the related model in order to\n# be able to change intermediate model instances.\nopts = self.opts\n# Find the target model that's not the parent model\nfor field in opts.fields:\nif field.remote_field and field.remote_field.model != self.parent_model:\nopts = field.remote_field.model._meta\nbreak\nreturn request.user.has_perm(\n'%s.%s' % (opts.app_label, get_permission_codename('change', opts))\n)\n         return super().has_change_permission(request)\n \n     def has_delete_permission(self, request, obj=None):\n         if self.opts.auto_created:\n             # We're checking the rights to an auto-created intermediate model,\n             # which doesn't have its own individual permissions. The user needs\n# to have the change permission for the related model in order to\n# be able to delete intermediate model instances.\nreturn self.has_change_permission(request, obj)\n         return super().has_delete_permission(request, obj)\n \n     def has_view_permission(self, request, obj=None):\n         if self.opts.auto_created:\n             opts = self.opts\n             # The model was auto-created as intermediary for a many-to-many\n# relationship; find the target model.\n             for field in opts.fields:\n                 if field.remote_field and field.remote_field.model != self.parent_model:\n                     opts = field.remote_field.model._meta\n         return super().has_view_permission(request)\n \n \n\n class StackedInline(InlineModelAdmin):\n     template = 'admin/edit_inline/stacked.html'\n \n \n class TabularInline(InlineModelAdmin):\n     template = 'admin/edit_inline/tabular.html'\n\n",
        "reproduce_m2m.py": "new file mode 100644\nindex 0000000000..835ae72744\nimport os\nimport django\nfrom django.conf import settings\n\n# Configure settings before importing any other Django modules\nsettings.configure(\nDEBUG=True,\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:'\n}\n},\nINSTALLED_APPS=[\n'django.contrib.auth',\n'django.contrib.contenttypes',\n'django.contrib.admin',\n],\nROOT_URLCONF='__main__',  # This module is the URLconf\nMIDDLEWARE=[\n'django.contrib.sessions.middleware.SessionMiddleware',\n'django.contrib.auth.middleware.AuthenticationMiddleware',\n]\n)\ndjango.setup()\n\n# Now we can import Django modules\nfrom django.contrib.auth import get_user_model\nfrom django.contrib.auth.models import Permission\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.db import models\nfrom django.contrib import admin\nfrom django.test import RequestFactory\nfrom django.core.management import call_command\n\n# Test models\nclass Photo(models.Model):\nclass Meta:\napp_label = 'admin'\n\nclass Report(models.Model):\nphotos = models.ManyToManyField(Photo)\nclass Meta:\napp_label = 'admin'\n\n# Admin class\nclass ReportPhotoInline(admin.TabularInline):\nmodel = Report.photos.through\nshow_change_link = True\n\ndef run_test():\n# Run migrations first\ncall_command('migrate', verbosity=0)\n\n# Create test models\nfrom django.db import connection\nwith connection.schema_editor() as schema_editor:\nschema_editor.create_model(Photo)\nschema_editor.create_model(Report)\n\n# Create test user with view permission only\nUser = get_user_model()\nuser = User.objects.create_user('testuser', 'test@example.com', 'password')\nct = ContentType.objects.get_for_model(Photo)\nview_perm = Permission.objects.get_or_create(\ncodename='view_photo',\nname='Can view photo',\ncontent_type=ct\n)[0]\nuser.user_permissions.add(view_perm)\n\n# Create test objects\nphoto = Photo.objects.create()\nreport = Report.objects.create()\n\n# Create inline instance\ninline = ReportPhotoInline(Report, admin.site)\nrequest = RequestFactory().get('/')\nrequest.user = user\n\nprint(\"\\nTesting permissions for user with only view permission:\")\nprint(\"View permission (should be True):\", inline.has_view_permission(request))\nprint(\"Add permission (should be False):\", inline.has_add_permission(request, None))\nprint(\"Change permission (should be False):\", inline.has_change_permission(request, None))\nprint(\"Delete permission (should be False):\", inline.has_delete_permission(request, None))\n\nif __name__ == '__main__':\nrun_test()\n\n"
    },
    "ground_truth_patch": {
        "django/contrib/admin/options.py": "             queryset = queryset.none()\n         return queryset\n \ndef _has_any_perms_for_target_model(self, request, perms):\n\"\"\"\nThis method is called only when the ModelAdmin's model is for an\nManyToManyField's implicit through model (if self.opts.auto_created).\nReturn True if the user has any of the given permissions ('add',\n'change', etc.) for the model that points to the through model.\n\"\"\"\nopts = self.opts\n# Find the target model of an auto-created many-to-many relationship.\nfor field in opts.fields:\nif field.remote_field and field.remote_field.model != self.parent_model:\nopts = field.remote_field.model._meta\nbreak\nreturn any(\nrequest.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename(perm, opts)))\nfor perm in perms\n)\n\n     def has_add_permission(self, request, obj):\n         if self.opts.auto_created:\n# Auto-created intermediate models don't have their own\n# permissions. The user needs to have the change permission for the\n# related model in order to be able to do anything with the\n# intermediate model.\nreturn self._has_any_perms_for_target_model(request, ['change'])\n         return super().has_add_permission(request)\n \n     def has_change_permission(self, request, obj=None):\n         if self.opts.auto_created:\n# Same comment as has_add_permission().\nreturn self._has_any_perms_for_target_model(request, ['change'])\n         return super().has_change_permission(request)\n \n     def has_delete_permission(self, request, obj=None):\n         if self.opts.auto_created:\n# Same comment as has_add_permission().\nreturn self._has_any_perms_for_target_model(request, ['change'])\n         return super().has_delete_permission(request, obj)\n \n     def has_view_permission(self, request, obj=None):\n         if self.opts.auto_created:\n# Same comment as has_add_permission(). The 'change' permission\n# also implies the 'view' permission.\nreturn self._has_any_perms_for_target_model(request, ['view', 'change'])\n         return super().has_view_permission(request)\n \n \n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they share similar logic related to permissions in Django admin for auto-created models, but Sample 1 includes detailed comments and structured blocks that are absent in Sample 2. Furthermore, Sample 2 has helper functions, such as '_has_any_perms_for_target_model', that modify the original logic present in Sample 1 and make it explicitly more flexible by allowing permission checks for multiple permissions. Both share a common functional intent related to managing permissions based on auto-created intermediate models in Django.\"}"
}