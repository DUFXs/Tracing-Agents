{
    "instance_id": "django__django-16145",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/core/management/commands/runserver.py": "index 3c39f57e4d..aa25787c03 100644\n             if not self.port.isdigit():\n                 raise CommandError(\"%r is not a valid port number.\" % self.port)\n             if self.addr:\nif self.addr == \"0\":\nself.addr = \"0.0.0.0\"\nelif _ipv6:\n                     self.addr = self.addr[1:-1]\n                     self.use_ipv6 = True\n                     self._raw_ipv6 = True\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..69b0888aad\nimport os\nimport sys\nimport django\nimport re\nfrom django.core.management import execute_from_command_line\nfrom django.conf import settings\nfrom django.core.management.commands.runserver import Command\nfrom django.utils.regex_helper import _lazy_re_compile\n\n# Define the same regex pattern as in runserver.py\nnaiveip_re = _lazy_re_compile(\nr\"\"\"^(?:\n(?P<addr>\n(?P<ipv4>\\d{1,3}(?:\\.\\d{1,3}){3}) |         # IPv4 address\n(?P<ipv6>\\[[a-fA-F0-9:]+\\]) |               # IPv6 address\n(?P<fqdn>[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*) # FQDN\n):)?(?P<port>\\d+)$\"\"\",\nre.X,\n)\n\ndef get_display_address(addr_port):\n\"\"\"Simulate the address display without actually running the server\"\"\"\ncmd = Command()\ncmd.default_addr = \"127.0.0.1\"\ncmd.default_addr_ipv6 = \"::1\"\ncmd.default_port = \"8000\"\ncmd._raw_ipv6 = False\ncmd.use_ipv6 = False\n\ntry:\nif not addr_port:\ncmd.addr = ''\ncmd.port = cmd.default_port\nelse:\nm = re.match(naiveip_re, addr_port)\nif m is None:\nreturn f\"Error: {addr_port} is not a valid port number or address:port pair.\"\n\ncmd.addr, _ipv4, _ipv6, _fqdn, cmd.port = m.groups()\n\nif cmd.addr:\nif cmd.addr == \"0\":\ncmd.addr = \"0.0.0.0\"\nelif _ipv6:\ncmd.addr = cmd.addr[1:-1]\ncmd.use_ipv6 = True\ncmd._raw_ipv6 = True\n\nif not cmd.addr:\ncmd.addr = cmd.default_addr_ipv6 if cmd.use_ipv6 else cmd.default_addr\ncmd._raw_ipv6 = cmd.use_ipv6\n\naddr = f\"[{cmd.addr}]\" if cmd._raw_ipv6 else cmd.addr\nreturn f\"Would start development server at http://{addr}:{cmd.port}/\"\nexcept Exception as e:\nreturn f\"Error: {str(e)}\"\n\n# Set up Django environment\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')\nsettings.configure(DEBUG=True)\ndjango.setup()\n\n# Test various address formats\ntest_cases = [\n'0:8080',           # Our main test case\n'127.0.0.1:8081',   # Regular IP address\n'[::1]:8082',       # IPv6 address\n'8083',             # No address specified\n'0.0.0.0:8084',     # Explicit all interfaces IPv4\n]\n\nfor test_case in test_cases:\nprint(f\"\\nTesting address format: {test_case}\")\nprint(get_display_address(test_case))\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/core/management/commands/runserver.py": "         shutdown_message = options.get(\"shutdown_message\", \"\")\n         quit_command = \"CTRL-BREAK\" if sys.platform == \"win32\" else \"CONTROL-C\"\n \nif self._raw_ipv6:\naddr = f\"[{self.addr}]\"\nelif self.addr == \"0\":\naddr = \"0.0.0.0\"\nelse:\naddr = self.addr\n\n         if not options[\"skip_checks\"]:\n             self.stdout.write(\"Performing system checks...\\n\\n\")\n             self.check(display_num_errors=True)\n                 \"version\": self.get_version(),\n                 \"settings\": settings.SETTINGS_MODULE,\n                 \"protocol\": self.protocol,\n\"addr\": addr,\n                 \"port\": self.port,\n                 \"quit_command\": quit_command,\n             }\n"
    },
    "response": "{\"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they are not syntactically similar nor functionally equivalent. The first code sample involves checking and setting the address and port for a Django server, while the second code sample appears to be related to shutdown messages and checks in server management. They serve different purposes and do not share any similar code structure or logic.\"}"
}