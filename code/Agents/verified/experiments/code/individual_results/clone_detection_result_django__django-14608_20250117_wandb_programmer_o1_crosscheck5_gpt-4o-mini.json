{
    "instance_id": "django__django-14608",
    "agent": "20250117_wandb_programmer_o1_crosscheck5",
    "agent_patch": {
        "django/forms/formsets.py": "index a89c35599f..e9d77c1b35 100644\n         self._non_form_errors.\n         \"\"\"\n         self._errors = []\nself._non_form_errors = self.error_class(error_class='nonform')\n         empty_forms_count = 0\n\n         if not self.is_bound:  # Stop further processing.\n             return\n\n         if not self.management_form.is_valid():\n             error = ValidationError(\n                 self.error_messages['missing_management_form'],\n                 code='missing_management_form',\n             )\n             self._non_form_errors.append(error)\n\n         for i, form in enumerate(self.forms):\n             # Empty forms are unchanged forms beyond those with initial data.\n             if not form.has_changed() and i >= self.initial_form_count():\n             # Give self.clean() a chance to do cross-form validation.\n             self.clean()\n         except ValidationError as e:\nself._non_form_errors = self.error_class(e.error_list, error_class='nonform')\n\n \n     def clean(self):\n         \"\"\"\n",
        "test_formset_nonform.py": "new file mode 100644\nindex 0000000000..a31d828b18\nimport sys\nimport django\nfrom django.conf import settings\nfrom django.forms import Form, CharField, BaseFormSet, ValidationError\n\n# Configure settings if not already configured.\nif not settings.configured:\nsettings.configure(\nSECRET_KEY='fake-key',\nUSE_I18N=False,\nUSE_L10N=False,\nUSE_TZ=False,\n)\ndjango.setup()\n\nclass MyTestForm(Form):\nname = CharField(required=True)\n\nclass MyTestFormSet(BaseFormSet):\n# Provide defaults normally assigned by formset_factory()\nform = MyTestForm\nextra = 1\ncan_order = False\ncan_delete = False\nmax_num = 1000\nvalidate_max = False\nmin_num = 0\nvalidate_min = False\nabsolute_max = 2000\ncan_delete_extra = True\n\ndef clean(self):\n# Force a formset-level error\nprint(\"Inside MyTestFormSet.clean(). Raising ValidationError.\")\nraise ValidationError(\"Simulated formset-wide error.\")\n\ndef main():\nprint(\"STEP 1: Creating MyTestFormSet instance with data to make it bound...\")\nfs = MyTestFormSet(data={'form-TOTAL_FORMS': '1', 'form-INITIAL_FORMS': '0'})\nprint(\"STEP 2: Calling is_valid() to trigger validation and non-form errors...\")\nfs.is_valid()\nprint(\"STEP 3: Retrieving non_form_errors...\")\nerrors_html = str(fs.non_form_errors())\nprint(f'Observed non_form_errors HTML: {errors_html}')\nprint(\"STEP 4: Checking if 'nonform' CSS class is present in the error HTML.\")\nif 'nonform' in errors_html:\nprint(\"PASS: 'nonform' class is present in formset non_form_errors.\")\nsys.exit(0)\nelse:\nprint(\"FAIL: 'nonform' class is NOT present in formset non_form_errors.\")\nsys.exit(1)\n\nif __name__ == \"__main__\":\nmain()\n"
    },
    "ground_truth_patch": {
        "django/forms/formsets.py": "         self._non_form_errors.\n         \"\"\"\n         self._errors = []\nself._non_form_errors = self.error_class(error_class='nonform')\n         empty_forms_count = 0\n \n         if not self.is_bound:  # Stop further processing.\n             # Give self.clean() a chance to do cross-form validation.\n             self.clean()\n         except ValidationError as e:\nself._non_form_errors = self.error_class(\ne.error_list,\nerror_class='nonform'\n)\n \n     def clean(self):\n         \"\"\"\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-1\", \"reasoning\": \"These code samples are type-1 clones because they are identical except for whitespace and layout differences. The core content and structure of the code are unchanged, with only formatting differences present.\"}"
}