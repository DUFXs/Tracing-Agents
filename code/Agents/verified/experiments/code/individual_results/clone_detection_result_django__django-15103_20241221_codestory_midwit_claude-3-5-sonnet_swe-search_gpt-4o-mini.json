{
    "instance_id": "django__django-15103",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/template/defaultfilters.py": "index 5ccef38048..606bb69056 100644\n \n \n @register.filter(is_safe=True)\ndef json_script(value, element_id=None):\n     \"\"\"\n     Output value JSON-encoded, wrapped in a <script type=\"application/json\">\ntag. If element_id is provided, the script tag will include an id attribute\nwith that value.\n     \"\"\"\n     return _json_script(value, element_id)\n \n",
        "django/utils/html.py": "index da1b5675ec..18401e10d2 100644\n }\n \n \ndef json_script(value, element_id=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n\nIf element_id is provided, the script tag will include an id attribute with that value.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\nif element_id is not None:\nreturn format_html(\n'<script id=\"{}\" type=\"application/json\">{}</script>',\nelement_id, mark_safe(json_str)\n)\n     return format_html(\n'<script type=\"application/json\">{}</script>',\nmark_safe(json_str)\n     )\n \n \n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..0171ad0014\nfrom django.utils.html import json_script\n\n# Current behavior - requires element_id\ntry:\nresult = json_script({\"key\": \"value\"}, None)\nprint(\"Test with None as element_id:\")\nprint(result)\nexcept TypeError as e:\nprint(\"Error when element_id is None:\", str(e))\n\ntry:\nresult = json_script({\"key\": \"value\"})\nprint(\"\\nTest without element_id:\")\nprint(result)\nexcept TypeError as e:\nprint(\"Error when element_id is not provided:\", str(e))\n\n# This should work in both current and new implementation\nresult = json_script({\"key\": \"value\"}, \"my-id\")\nprint(\"\\nTest with element_id provided:\")\nprint(result)\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/template/defaultfilters.py": "@register.filter(is_safe=True)\ndef json_script(value, element_id=None):\n    \"\"\"\n         Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n    tag (with an optional id).\n    \"\"\"\n    return _json_script(value, element_id)\n",
        "django/utils/html.py": " }\n \n \ndef json_script(value, element_id=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\nif element_id:\ntemplate = '<script id=\"{}\" type=\"application/json\">{}</script>'\nargs = (element_id, mark_safe(json_str))\nelse:\ntemplate = '<script type=\"application/json\">{}</script>'\nargs = (mark_safe(json_str),)\nreturn format_html(template, *args)\n \n \n def conditional_escape(text):\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they share a similar structure and functionality, but there are added, modified, or removed statements. Specifically, the two 'json_script' functions have different implementations and return statements, indicating they are not identical in syntax but are related in functionality.\"}"
}