{
    "instance_id": "django__django-15863",
    "agent": "20250117_wandb_programmer_o1_crosscheck5",
    "agent_patch": {
        "django/template/defaultfilters.py": "index 7a5b28d159..89372ebe70 100644\n     If the input float is infinity or NaN, display the string representation\n     of that value.\n     \"\"\"\nfrom decimal import ROUND_HALF_UP, Context, Decimal, InvalidOperation\nfrom django.utils import formats\nfrom django.utils.safestring import mark_safe\n\n     force_grouping = False\n     use_l10n = True\n     if isinstance(arg, str):\n         elif last_char == \"u\":\n             use_l10n = False\n             arg = arg[:-1] or -1\n\n     try:\n# Bypass fallback if text is already a Decimal\nif isinstance(text, Decimal):\ninput_val = str(text)\nd = text\nelse:\ninput_val = repr(text)\nd = Decimal(input_val)\n     except InvalidOperation:\n         try:\n             d = Decimal(str(float(text)))\n     )\n \n \n\n @register.filter(is_safe=True)\n @stringfilter\n def iriencode(value):\n",
        "test_floatformat_decimal.py": "new file mode 100644\nindex 0000000000..7b21e35c42\nimport sys\nfrom decimal import Decimal\nfrom django.conf import settings\nfrom django.template import Template, Context\nfrom django import setup\n\ndef main():\nprint(\"Configuring settings with in-memory templates..\")\nTEMPLATES = [\n{\n'BACKEND': 'django.template.backends.django.DjangoTemplates',\n},\n]\nsettings.configure(TEMPLATES=TEMPLATES)\nsetup()\nprint(\"Creating template..\")\nt = Template('{{ value|floatformat:20 }}')\nmy_decimal = Decimal('42.12345678901234567890')\nc = Context({'value': my_decimal})\nprint(\"Rendering template..\")\nresult = t.render(c)\nprint(\"Result is:\", result)\nexpected = '42.12345678901234567890'\nprint(\"Expected is:\", expected)\nif result.strip() == expected:\nprint(\"Test passed.\")\nsys.exit(0)\nelse:\nprint(\"Test failed.\")\nsys.exit(1)\n\nif __name__ == '__main__':\nmain()\n"
    },
    "ground_truth_patch": {
        "django/template/defaultfilters.py": "             use_l10n = False\n             arg = arg[:-1] or -1\n     try:\ninput_val = str(text)\n         d = Decimal(input_val)\n     except InvalidOperation:\n         try:\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-2\", \"reasoning\": \"These code samples are type-2 clones because they are identical except for differences in whitespace and layout. Both code samples contain the logic related to the variable 'use_l10n' and the 'try' block for handling Decimal operations, but the identifier names and their placement are consistent across both samples.\"}"
}