{
    "instance_id": "django__django-12273",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/db/models/base.py": "index 844c01e95e..0ea0bf6b52 100644\n         inserted = False\n         for parent, field in meta.parents.items():\n             # Make sure the link fields are synced between parent and self.\nif field:\n# If child PK is None, we want to force this to be treated as an insert\nif getattr(self, parent._meta.pk.attname) is None:\n# Ensure parent PK is also None for consistent insert behavior\nsetattr(self, field.attname, None)\nparent_inserted = True\nelse:\n# Normal case - sync parent and child PKs\nif getattr(self, field.attname) is not None:\nsetattr(self, parent._meta.pk.attname, getattr(self, field.attname))\nparent_inserted = self._save_parents(cls=parent, using=using, update_fields=update_fields)\nelse:\nparent_inserted = self._save_parents(cls=parent, using=using, update_fields=update_fields)\n\n             updated = self._save_table(\n                 cls=parent, using=using, update_fields=update_fields,\n                 force_insert=parent_inserted,\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..296dcc5262\nfrom django.db import models, connection\nfrom django.test import TestCase\nimport os\nimport django\nfrom django.conf import settings\nfrom django.core.management import call_command\n\nif not settings.configured:\nsettings.configure(\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:'\n}\n},\nINSTALLED_APPS=['django.contrib.contenttypes'],\nSECRET_KEY='dummy-key-for-tests',\nMIDDLEWARE_CLASSES=[],\nMIDDLEWARE=[]\n)\ndjango.setup()\n\nclass Item(models.Model):\nuid = models.AutoField(primary_key=True, editable=False)\nf = models.BooleanField(default=False)\n\ndef reset(self):\nself.uid = None\nself.f = False\n\nclass Meta:\napp_label = 'django_db_models_base'\n\nclass Derived(Item):\nclass Meta:\napp_label = 'django_db_models_base'\n\nclass SaveTestCase(TestCase):\n@classmethod\ndef setUpClass(cls):\nsuper().setUpClass()\n# Create tables\nwith connection.schema_editor() as schema_editor:\nschema_editor.create_model(Item)\nschema_editor.create_model(Derived)\n\ndef setUp(self):\nself.derived = Derived.objects.create(f=True)\nitem = Item.objects.get(pk=self.derived.pk)\nobj1 = item.derived\nobj1.reset()\nobj1.save()\n\ndef test_f_true(self):\nobj = Item.objects.get(pk=self.derived.pk)\nself.assertTrue(obj.f)\n\nif __name__ == '__main__':\nfrom django.test.utils import setup_test_environment, teardown_test_environment\n\nsetup_test_environment()\nconnection.creation.create_test_db(verbosity=2)\n\nimport unittest\nsuite = unittest.TestLoader().loadTestsFromTestCase(SaveTestCase)\nresult = unittest.TextTestRunner(verbosity=2).run(suite)\n\nconnection.creation.destroy_test_db(':memory:', verbosity=2)\nteardown_test_environment()\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/db/models/base.py": "         return getattr(self, meta.pk.attname)\n \n     def _set_pk_val(self, value):\nfor parent_link in self._meta.parents.values():\nif parent_link and parent_link != self._meta.pk:\nsetattr(self, parent_link.target_field.attname, value)\n         return setattr(self, self._meta.pk.attname, value)\n \n     pk = property(_get_pk_val, _set_pk_val)\n"
    },
    "response": "{\"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they are syntactically and semantically different. The first sample contains logic to handle parent-child relationships in Django models, while the second sample primarily deals with getting and setting primary key values. They serve different purposes in the context of a Django application.\"}"
}