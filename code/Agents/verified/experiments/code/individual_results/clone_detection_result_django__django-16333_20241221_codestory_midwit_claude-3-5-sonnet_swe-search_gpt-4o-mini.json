{
    "instance_id": "django__django-16333",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/contrib/auth/forms.py": "index d73d1c8495..4c9a4f5556 100644\n         user.set_password(self.cleaned_data[\"password1\"])\n         if commit:\n             user.save()\nself.save_m2m()\n         return user\n \n \n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..e3eccce354\nimport os\nimport django\nfrom django.conf import settings\nfrom django.db import connection\nfrom django.core.management import call_command\n\n# Configure Django settings\nif not settings.configured:\nsettings.configure(\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:',\n}\n},\nINSTALLED_APPS=[\n'django.contrib.auth',\n'django.contrib.contenttypes',\n],\nUSE_TZ=False,\n)\ndjango.setup()\n\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User, Group\nfrom django.db import models\nfrom django import forms\n\n# Create a custom user model with a ManyToMany field\nclass CustomUser(User):\ncustom_groups = models.ManyToManyField(Group, related_name='custom_user_set')\n\nclass Meta:\napp_label = 'auth'\n\n# Create a custom UserCreationForm for our CustomUser\nclass CustomUserCreationForm(UserCreationForm):\ncustom_groups = forms.ModelMultipleChoiceField(\nqueryset=Group.objects.all(),\nrequired=False\n)\n\nclass Meta(UserCreationForm.Meta):\nmodel = CustomUser\nfields = UserCreationForm.Meta.fields + ('custom_groups',)\n\ndef main():\n# Create all necessary database tables\ncall_command('migrate', 'auth', verbosity=0)\ncall_command('migrate', 'contenttypes', verbosity=0)\n\n# Create the custom user table\nwith connection.schema_editor() as schema_editor:\nschema_editor.create_model(CustomUser)\n\n# Create a test group\ngroup = Group.objects.create(name='test_group')\n\n# Create form data with username, password and group\nform_data = {\n'username': 'testuser',\n'password1': 'testpass123',\n'password2': 'testpass123',\n'custom_groups': [group.id]\n}\n\n# Create and validate the form\nform = CustomUserCreationForm(data=form_data)\nif form.is_valid():\nuser = form.save()\n# Check if the group was saved\nprint(f\"User created: {user.username}\")\nprint(f\"Custom groups assigned: {list(user.custom_groups.all())}\")\nelse:\nprint(\"Form errors:\", form.errors)\n\nif __name__ == '__main__':\nmain()\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/contrib/auth/forms.py": "         user.set_password(self.cleaned_data[\"password1\"])\n         if commit:\n             user.save()\nif hasattr(self, \"save_m2m\"):\nself.save_m2m()\n         return user\n \n \n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-1\", \"reasoning\": \"These code samples are type-1 clones because they are identical except for differences in whitespace and layout. The statements in both code samples are the same, with only changes in indentation and the presence of a check for 'save_m2m' in the second sample.\"}"
}