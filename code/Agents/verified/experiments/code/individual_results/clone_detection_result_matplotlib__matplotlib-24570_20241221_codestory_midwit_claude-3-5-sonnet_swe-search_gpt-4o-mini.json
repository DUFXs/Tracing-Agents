{
    "instance_id": "matplotlib__matplotlib-24570",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "lib/matplotlib/offsetbox.py": "index 3a506543ac..059a6c8ae3 100644\n         descent = max(d for h, d in hd_list)\n         height = height_descent + descent\n         offsets = [0. for h, d in hd_list]\nelif align in [\"left\", \"bottom\"]:\n         descent = 0.\n         offsets = [d for h, d in hd_list]\nelif align in [\"right\", \"top\"]:\n         descent = 0.\n         offsets = [height - h + d for h, d in hd_list]\n     elif align == \"center\":\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..859ad1a7bb\nimport matplotlib.pyplot as plt\nfrom matplotlib.offsetbox import DrawingArea, HPacker, VPacker, AnchoredOffsetbox, TextArea\nfrom matplotlib.patches import Rectangle\n\nda1 = DrawingArea(10, 20)\nrect1 = Rectangle((0, 0), 10, 20)\nda1.add_artist(rect1)\n\nda2 = DrawingArea(10, 30)\nrect2 = Rectangle((0, 0), 10, 30)\nda2.add_artist(rect2)\n\nalign = \"bottom\"\n\npack = HPacker(children=[da1, da2], pad=10, sep=10, align=align)\ntitle = TextArea(f\"align='{align}'\")\npack = VPacker(children=[title, pack], sep=10, pad=10, align=\"center\")\n\nbox = AnchoredOffsetbox(child=pack, loc=\"center\")\n\n_, ax = plt.subplots()\nax.add_artist(box)\nplt.savefig('output_before.png')\nplt.close()\n\n# Create new drawing areas for top alignment\nda1_top = DrawingArea(10, 20)\nrect1_top = Rectangle((0, 0), 10, 20)\nda1_top.add_artist(rect1_top)\n\nda2_top = DrawingArea(10, 30)\nrect2_top = Rectangle((0, 0), 10, 30)\nda2_top.add_artist(rect2_top)\n\n# Now test with top alignment\nalign = \"top\"\npack = HPacker(children=[da1_top, da2_top], pad=10, sep=10, align=align)\ntitle = TextArea(f\"align='{align}'\")\npack = VPacker(children=[title, pack], sep=10, pad=10, align=\"center\")\n\nbox = AnchoredOffsetbox(child=pack, loc=\"center\")\n\n_, ax = plt.subplots()\nax.add_artist(box)\nplt.savefig('output_top.png')\nplt.close()\n\\ No newline at end of file\n",
        "test_alignments.py": "new file mode 100644\nindex 0000000000..905d52a773\nimport matplotlib.pyplot as plt\nfrom matplotlib.offsetbox import DrawingArea, HPacker, VPacker, AnchoredOffsetbox, TextArea\nfrom matplotlib.patches import Rectangle\n\n# Test different height combinations and alignments\nalignments = ['top', 'bottom', 'center']\nheights = [(10, 20), (20, 10), (10, 30, 20)]  # Different height combinations\n\nfor align in alignments:\nfor height_set in heights:\n# Create drawing areas\ndrawing_areas = []\nfor h in height_set:\nda = DrawingArea(10, h)\nrect = Rectangle((0, 0), 10, h)\nda.add_artist(rect)\ndrawing_areas.append(da)\n\n# Create HPacker with current alignment\npack = HPacker(children=drawing_areas, pad=10, sep=10, align=align)\ntitle = TextArea(f\"align='{align}', heights={height_set}\")\npack = VPacker(children=[title, pack], sep=10, pad=10, align=\"center\")\n\nbox = AnchoredOffsetbox(child=pack, loc=\"center\")\n\n# Create new figure for this test case\n_, ax = plt.subplots(figsize=(8, 4))\nax.add_artist(box)\nplt.savefig(f'output_{align}_{\"-\".join(map(str, height_set))}.png')\nplt.close()\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "lib/matplotlib/offsetbox.py": "         descent = max(d for h, d in hd_list)\n         height = height_descent + descent\n         offsets = [0. for h, d in hd_list]\nelif align in [\"left\", \"bottom\"]:\n         descent = 0.\n         offsets = [d for h, d in hd_list]\nelif align in [\"right\", \"top\"]:\n         descent = 0.\n         offsets = [height - h + d for h, d in hd_list]\n     elif align == \"center\":\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-1\", \"reasoning\": \"These code samples are type-1 clones because they are identical except for differences in whitespace and layout. Both samples contain the same code structure and logic related to calculating descent, height, and offsets based on alignments. The differences are only in whitespace, which does not affect the functionality of the code.\"}"
}