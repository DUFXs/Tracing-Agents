{
    "instance_id": "django__django-13925",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "django/db/models/base.py": "index 4038859cfa..cd22b0af22 100644\n \n     @classmethod\n     def _check_default_pk(cls):\n\nif cls._meta.pk.auto_created:\n# Check if we inherit primary key from a parent model\nfor parent in cls._meta.get_parent_list():\nif (\nnot parent._meta.abstract and  # Only check concrete models\nany(f.primary_key for f in parent._meta.local_fields)  # Has explicit PK\n):\n# Primary key is inherited from parent - no warning needed\nreturn []\n\n\n# No parent defines primary key, check if we need to warn\nif (\nnot settings.is_overridden('DEFAULT_AUTO_FIELD') and\nnot cls._meta.app_config._is_default_auto_field_overridden\n):\nreturn [\nchecks.Warning(\nf\"Auto-created primary key used when not defining a \"\nf\"primary key type, by default \"\nf\"'{settings.DEFAULT_AUTO_FIELD}'.\",\nhint=(\nf\"Configure the DEFAULT_AUTO_FIELD setting or the \"\nf\"{cls._meta.app_config.__class__.__qualname__}.\"\nf\"default_auto_field attribute to point to a subclass \"\nf\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n),\nobj=cls,\nid='models.W042',\n                     ),\n]\n         return []\n \n\n\n\n     @classmethod\n     def _check_swappable(cls):\n         \"\"\"Check if the swapped model exists.\"\"\"\n \n \n model_unpickle.__safe_for_unpickle__ = True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndiff --git \"a/django/db/models/base.py\\\"\" \"b/django/db/models/base.py\\\"\"\nnew file mode 100644\nindex 0000000000..b910aa14d5\n@classmethod\ndef _check_default_pk(cls):\nif cls._meta.pk.auto_created:\n# Check if we inherit primary key from a parent model\nfor parent in cls._meta.get_parent_list():\nif (\nnot parent._meta.abstract and  # Only check concrete models\nany(f.primary_key for f in parent._meta.local_fields)  # Has explicit PK\n):\n# Primary key is inherited from parent - no warning needed\nreturn []\n\n# No parent defines primary key, check if we need to warn\nif (\nnot settings.is_overridden('DEFAULT_AUTO_FIELD') and\nnot cls._meta.app_config._is_default_auto_field_overridden\n):\nreturn [\nchecks.Warning(\nf\"Auto-created primary key used when not defining a \"\nf\"primary key type, by default \"\nf\"'{settings.DEFAULT_AUTO_FIELD}'.\",\nhint=(\nf\"Configure the DEFAULT_AUTO_FIELD setting or the \"\nf\"{cls._meta.app_config.__class__.__qualname__}.\"\nf\"default_auto_field attribute to point to a subclass \"\nf\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n),\nobj=cls,\nid='models.W042',\n),\n]\nreturn []\n\n",
        "reproduce.py": "new file mode 100644\nindex 0000000000..119ec18b07\nfrom django.conf import settings\nfrom django.apps import apps\n\nsettings.configure(\nINSTALLED_APPS=[\n'django.contrib.contenttypes',\n],\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:'\n}\n}\n)\n\nimport django\ndjango.setup()\n\nfrom django.db import models\nfrom django.core import checks\n\n# Parent model with explicit primary key\nclass Entity(models.Model):\nid = models.AutoField(primary_key=True)\nname = models.CharField(max_length=100)\n\nclass Meta:\napp_label = 'testapp'\n\n# Child model that should inherit primary key\nclass User(Entity):\nemail = models.EmailField()\n\nclass Meta:\napp_label = 'testapp'\n\n# Run model checks\nprint(\"Running model checks...\")\nissues = checks.run_checks()\nfor issue in issues:\nif isinstance(issue.obj, type) and issubclass(issue.obj, models.Model):\nprint(f\"{issue.obj.__name__}: {issue.msg} (ID: {issue.id})\")\n"
    },
    "ground_truth_patch": {
        "django/db/models/base.py": "     def _check_default_pk(cls):\n         if (\n             cls._meta.pk.auto_created and\n# Inherited PKs are checked in parents models.\nnot (\nisinstance(cls._meta.pk, OneToOneField) and\ncls._meta.pk.remote_field.parent_link\n) and\n             not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n             not cls._meta.app_config._is_default_auto_field_overridden\n         ):\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they have syntactical differences in terms of structure and logic. The first sample contains extensive checks and a more complex warning system, while the second sample is a simplified version that adds a check for OneToOneField and modifies the logic for checking inherited primary keys.\"}"
}