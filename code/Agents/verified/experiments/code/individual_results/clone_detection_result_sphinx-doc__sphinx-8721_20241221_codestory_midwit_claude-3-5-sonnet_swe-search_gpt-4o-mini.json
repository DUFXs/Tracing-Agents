{
    "instance_id": "sphinx-doc__sphinx-8721",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "reproduce_error.py": "new file mode 100644\nindex 000000000..532c93153\nimport os\nimport shutil\nimport tempfile\nfrom pathlib import Path\nfrom sphinx.application import Sphinx\n\ndef main():\n# Create a temporary directory for our test documentation\nwith tempfile.TemporaryDirectory() as temp_dir:\n# Create source directory\nsrc_dir = Path(temp_dir) / 'source'\nsrc_dir.mkdir()\n\n# Create a simple Python module to document\nmodule_dir = src_dir / 'example'\nmodule_dir.mkdir()\nwith open(module_dir / '__init__.py', 'w') as f:\nf.write('\"\"\"Example module.\"\"\"\\n\\ndef example_function():\\n    \"\"\"Example function.\"\"\"\\n    pass\\n')\n\n# Create conf.py\nwith open(src_dir / 'conf.py', 'w') as f:\nf.write('''\nextensions = ['sphinx.ext.viewcode']\nviewcode_enable_epub = False\n''')\n\n# Create index.rst\nwith open(src_dir / 'index.rst', 'w') as f:\nf.write('''\nWelcome to Test Documentation\n===========================\n\n.. automodule:: example\n:members:\n''')\n\n# Build documentation\nout_dir = Path(temp_dir) / 'build'\nepub_dir = out_dir / 'epub'\nhtml_dir = out_dir / 'html'\n\napp = Sphinx(\nsrcdir=str(src_dir),\nconfdir=str(src_dir),\noutdir=str(html_dir),\ndoctreedir=str(out_dir / 'doctrees'),\nbuildername='html'\n)\napp.build()\n\napp = Sphinx(\nsrcdir=str(src_dir),\nconfdir=str(src_dir),\noutdir=str(epub_dir),\ndoctreedir=str(out_dir / 'doctrees'),\nbuildername='epub'\n)\napp.build()\n\n# Check if _modules directory exists in epub output\nmodules_dir = epub_dir / '_modules'\nif modules_dir.exists():\nprint(\"ERROR: _modules directory exists in epub output even though viewcode_enable_epub=False\")\nreturn 1\nelse:\nprint(\"SUCCESS: No _modules directory in epub output\")\nreturn 0\n\nif __name__ == '__main__':\nexit(main())\n\\ No newline at end of file\n",
        "sphinx/ext/viewcode.py": "index a7d52a91c..060604e25 100644\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\nif app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\nreturn\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n \n"
    },
    "ground_truth_patch": {
        "sphinx/ext/viewcode.py": "     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\nif app.builder.name == \"singlehtml\":\nreturn\nif app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\nreturn\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n \n"
    },
    "response": "{\"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they contain different logical conditions within their if-statements. The first sample contains an if-condition that checks for the existence of a '_modules' directory in the 'epub' output, while the second sample has an if-condition checking for the builder name 'singlehtml'. This difference in functionality means they are syntactically dissimilar and not functionally equivalent.\"}"
}