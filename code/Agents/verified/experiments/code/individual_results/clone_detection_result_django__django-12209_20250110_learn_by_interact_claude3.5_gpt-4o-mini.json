{
    "instance_id": "django__django-12209",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "django/db/models/base.py": "index e3b14a41a0..1db5f63052 100644\n         if not pk_set and (force_update or update_fields):\n             raise ValueError(\"Cannot force an update in save() with no primary key.\")\n         updated = False\n# Skip an UPDATE when adding an instance with no explicit PK value and primary key has a default.\n         if (\n             not force_insert and\n             self._state.adding and\n             self._meta.pk.default and\nself._meta.pk.default is not NOT_PROVIDED and\npk_val is None\n         ):\n             force_insert = True\n\n\n\n\n\n\n\n\n\nforce_insert = True\n\nforce_insert = True\n\n\n         # If possible, try an UPDATE. If that doesn't update anything, do an INSERT.\n         if pk_set and not force_insert:\n             base_qs = cls._base_manager.using(using)\n \n \n model_unpickle.__safe_for_unpickle__ = True\n\n\n\n\n\n\n\n\n\n\n\n\n\ndiff --git \"a/django/db/models/base.py\\\"\" \"b/django/db/models/base.py\\\"\"\nnew file mode 100644\nindex 0000000000..45db38e3c4\n# Skip an UPDATE when adding an instance with no explicit PK value and primary key has a default.\nif (\nnot force_insert and\nself._state.adding and\nself._meta.pk.default and\nself._meta.pk.default is not NOT_PROVIDED and\npk_val is None\n):\n",
        "reproduce_issue.py": "new file mode 100644\nindex 0000000000..9f604b4570\nfrom uuid import uuid4\nfrom django.db import models\nfrom django.conf import settings\nimport os\n\n# Configure minimal Django settings\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\nsettings.configure(\nDEBUG=True,\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:',\n}\n},\nINSTALLED_APPS=[\n'django.contrib.contenttypes',\n'django.contrib.auth',\n],\n)\n\nimport django\ndjango.setup()\n\n# Create test model\nclass Sample(models.Model):\nid = models.UUIDField(primary_key=True, default=uuid4)\nname = models.CharField(blank=True, max_length=100)\n\nclass Meta:\n# This tells Django this is a temporary model\nabstract = False\napp_label = 'django.contrib.contenttypes'\n\n# Create tables\nfrom django.db import connection\nwith connection.schema_editor() as schema_editor:\nschema_editor.create_model(Sample)\n\n# Reproduce the issue\ns0 = Sample.objects.create()\nprint(f\"Created s0 with id: {s0.pk}\")\n\ns1 = Sample(pk=s0.pk, name='Test 1')\nprint(f\"Created s1 with same id: {s1.pk}\")\n\ntry:\ns1.save()\nprint(\"Save successful!\")\nexcept Exception as e:\nprint(f\"Save failed with: {e}\")\n",
        "test_fix.py": "new file mode 100644\nindex 0000000000..e7db6f2666\nfrom uuid import uuid4\nfrom django.db import models\nfrom django.conf import settings\nimport os\n\n# Configure minimal Django settings\nsettings.configure(\nDEBUG=True,\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:',\n}\n},\nINSTALLED_APPS=[\n'django.contrib.contenttypes',\n'django.contrib.auth',\n],\n)\n\nimport django\ndjango.setup()\n\nclass Sample(models.Model):\nid = models.UUIDField(primary_key=True, default=uuid4)\nname = models.CharField(blank=True, max_length=100)\n\nclass Meta:\napp_label = 'django.contrib.contenttypes'\n\n# Create tables\nfrom django.db import connection\nwith connection.schema_editor() as schema_editor:\nschema_editor.create_model(Sample)\n\n# Test the fix\ns0 = Sample.objects.create()\nprint(f\"Created s0 with id: {s0.pk}\")\n\ns1 = Sample(pk=s0.pk, name='Test 1')\nprint(f\"Created s1 with same id: {s1.pk}\")\n\ntry:\ns1.save()\nprint(\"Save successful! Fix works!\")\nexcept Exception as e:\nprint(f\"Save failed with: {e}\")\n"
    },
    "ground_truth_patch": {
        "django/db/models/base.py": "         updated = False\n         # Skip an UPDATE when adding an instance and primary key has a default.\n         if (\nnot raw and\n             not force_insert and\n             self._state.adding and\n             self._meta.pk.default and\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-2\", \"reasoning\": \"These code samples are type-2 clones because they are identical in functionality and structure except for minor differences in comments and some variable names. Both samples include existing functionality for handling primary key conditions during object saving in a Django model, but there are variations in the wording of the comments.\"}"
}