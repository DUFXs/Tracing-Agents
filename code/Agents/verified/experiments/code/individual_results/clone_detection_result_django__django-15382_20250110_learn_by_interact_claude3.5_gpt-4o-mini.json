{
    "instance_id": "django__django-15382",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "django/db/models/expressions.py": "index 81f8f79c71..48b6a5a24f 100644\n         return clone\n \n     def as_sql(self, compiler, connection, template=None, **extra_context):\ntry:\nquery = self.query.exists(using=connection.alias)\nsql, params = super().as_sql(\ncompiler,\nconnection,\ntemplate=template,\nquery=query,\n**extra_context,\n)\nif self.negated:\nsql = 'NOT {}'.format(sql)\nreturn sql, params\nexcept EmptyResultSet:\n# For empty querysets:\n# - Exists() should evaluate to FALSE\n# - ~Exists() should evaluate to TRUE\nif self.negated:\nsql = '(1=1)'  # TRUE\nelse:\nsql = '(1=0)'  # FALSE\nreturn sql, []\n\n \n     def select_format(self, compiler, sql, params):\n         # Wrap EXISTS() with a CASE WHEN expression if a database backend\n \n     def window_frame_start_end(self, connection, start, end):\n         return connection.ops.window_frame_range_start_end(start, end)\n\n",
        "reproduce.py": "new file mode 100644\nindex 0000000000..01ae69285b\nfrom django.db import models\nfrom django.conf import settings\n\n# Configure Django settings\nsettings.configure(\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:',\n}\n},\nINSTALLED_APPS=['django.contrib.contenttypes'],\n)\n\nimport django\ndjango.setup()\n\n# Create test model\nclass MyModel(models.Model):\nname = models.CharField(max_length=100)\n\nclass Meta:\napp_label = 'myapp'\n\n# Set up database\nfrom django.db import connection\nwith connection.schema_editor() as schema_editor:\nschema_editor.create_model(MyModel)\n\n# Reproduce the issue\nqs = MyModel.objects.filter(~models.Exists(MyModel.objects.none()), name='test')\nprint(\"QuerySet:\", qs)\nprint(\"SQL Query:\", qs.query)\n"
    },
    "ground_truth_patch": {
        "django/db/models/expressions.py": " \n     def as_sql(self, compiler, connection, template=None, **extra_context):\n         query = self.query.exists(using=connection.alias)\ntry:\nsql, params = super().as_sql(\ncompiler,\nconnection,\ntemplate=template,\nquery=query,\n**extra_context,\n)\nexcept EmptyResultSet:\nif self.negated:\nreturn '', ()\nraise\n         if self.negated:\n             sql = 'NOT {}'.format(sql)\n         return sql, params\n"
    },
    "response": "{\"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they differ significantly in structure and functionality. Code sample 1 contains a complete function definition with detailed logic and additional functions, while code sample 2 shows only a partial method that includes a different error handling mechanism. The lack of similarity in functionality and structure indicates that they are not related as clones.\"}"
}