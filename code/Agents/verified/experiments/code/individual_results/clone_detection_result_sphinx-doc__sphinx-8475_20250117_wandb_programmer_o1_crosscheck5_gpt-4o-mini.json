{
    "instance_id": "sphinx-doc__sphinx-8475",
    "agent": "20250117_wandb_programmer_o1_crosscheck5",
    "agent_patch": {
        "sphinx/builders/linkcheck.py": "index 1dc0337c3..037bb61d2 100644\n     :copyright: Copyright 2007-2020 by the Sphinx team, see AUTHORS.\n     :license: BSD, see LICENSE for details.\n \"\"\"\n import json\n import queue\n import re\n \n from docutils import nodes\n from docutils.nodes import Node\nfrom requests.exceptions import HTTPError, TooManyRedirects\n \n from sphinx.application import Sphinx\n from sphinx.builders import Builder\n \n logger = logging.getLogger(__name__)\n \nuri_re = re.compile('([a-z]+:)?//')  # matches to foo:// and //\n \n DEFAULT_REQUEST_HEADERS = {\n     'Accept': 'text/html,application/xhtml+xml;q=0.9,*/*;q=0.8',\n                                                  config=self.app.config, auth=auth_info,\n                                                  **kwargs)\n                         response.raise_for_status()\nexcept (HTTPError, TooManyRedirects):\n# retry with GET request if that fails, or if HEAD causes infinite redirects\n                         response = requests.get(req_url, stream=True, config=self.app.config,\n                                                 auth=auth_info, **kwargs)\n                         response.raise_for_status()\n",
        "test_infinite_redirect.py": "new file mode 100644\nindex 000000000..227f8af0c\n#!/usr/bin/env python3\nimport subprocess\nimport sys\nimport os\n\ndef main():\nprint(\"STEP 1: Create minimal Sphinx project with link to a site causing HEAD infinite redirects.\")\nos.makedirs(\"test_infinite_redirect\", exist_ok=True)\nindex_path = os.path.join(\"test_infinite_redirect\", \"index.rst\")\nwith open(index_path, \"w\") as f:\nf.write(\"Test Document\\\\n===========\\\\n\\\\nLink that triggers infinite HEAD-redirect:\\\\n\\\\n`IDR Redirect <https://idr.openmicroscopy.org/webclient/?show=well-119093>`_\\\\n\")\n\nprint(\"STEP 2: Run 'sphinx-build -b linkcheck' on the new project.\")\ncmd = [\n\"sphinx-build\",\n\"-b\",\n\"linkcheck\",\n\"test_infinite_redirect\",\n\"test_infinite_redirect/_build\"\n]\nprint(\"Running:\", \" \".join(cmd))\nproc = subprocess.run(cmd, capture_output=True, text=True)\n\nprint(\"sphinx-build stdout:\")\nprint(proc.stdout)\nprint(\"sphinx-build stderr:\")\nprint(proc.stderr)\n\n# If 'broken' is in stdout, that means the link was considered broken\n# We'll use that as a signal to exit 1. Otherwise exit 0.\nif \"broken\" in proc.stdout:\nprint(\"Link was reported broken --> test script returning status 1.\")\nsys.exit(1)\nelse:\nprint(\"No 'broken' link found in output --> test script returning status 0.\")\nsys.exit(0)\n\nif __name__ == \"__main__\":\nmain()\n",
        "test_infinite_redirect/_build/.doctrees/environment.pickle": "new file mode 100644\nindex 000000000..dfc158c56\nBinary files /dev/null and b/test_infinite_redirect/_build/.doctrees/environment.pickle differ\n",
        "test_infinite_redirect/_build/.doctrees/index.doctree": "new file mode 100644\nindex 000000000..a1131027f\nBinary files /dev/null and b/test_infinite_redirect/_build/.doctrees/index.doctree differ\n",
        "test_infinite_redirect/_build/output.json": "new file mode 100644\nindex 000000000..e69de29bb\n",
        "test_infinite_redirect/_build/output.txt": "new file mode 100644\nindex 000000000..e69de29bb\n",
        "test_infinite_redirect/conf.py": "new file mode 100644\nindex 000000000..c9017bd47\n# Minimal Sphinx config for linkcheck testing\nextensions = []\nmaster_doc = \"index\"\nexclude_patterns = []\n",
        "test_infinite_redirect/index.rst": "new file mode 100644\nindex 000000000..b3fa55988\nTest Document\\n===========\\n\\nLink that triggers infinite HEAD-redirect:\\n\\n`IDR Redirect <https://idr.openmicroscopy.org/webclient/?show=well-119093>`_\\n\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "sphinx/builders/linkcheck.py": " \n from docutils import nodes\n from docutils.nodes import Node\nfrom requests.exceptions import HTTPError, TooManyRedirects\n \n from sphinx.application import Sphinx\n from sphinx.builders import Builder\n                                                  config=self.app.config, auth=auth_info,\n                                                  **kwargs)\n                         response.raise_for_status()\nexcept (HTTPError, TooManyRedirects):\n                         # retry with GET request if that fails, some servers\n                         # don't like HEAD requests.\n                         response = requests.get(req_url, stream=True, config=self.app.config,\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they share a significant amount of syntactic structure and logic, but they contain differences such as added comments and slight variations in the handling of responses, which indicate modifications rather than simple variations in identifiers or whitespace.\"}"
}