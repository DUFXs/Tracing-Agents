{
    "instance_id": "django__django-16662",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "django/db/migrations/writer.py": "index a59f0c8dcb..543992ea8a 100644\n         else:\n             imports.add(\"from django.db import migrations\")\n \n# Separate direct imports and from imports, then sort each group\ndirect_imports = sorted(i for i in imports if i.startswith('import '))\nfrom_imports = sorted(i for i in imports if i.startswith('from '))\nsorted_imports = direct_imports + from_imports\n         items[\"imports\"] = \"\\n\".join(sorted_imports) + \"\\n\" if imports else \"\"\n\n         if migration_imports:\n             items[\"imports\"] += (\n                 \"\\n\\n# Functions from the following migrations need manual \"\n %(operations)s\\\n     ]\n \"\"\"\n\n",
        "repro.py": "new file mode 100644\nindex 0000000000..d9c5846baa\nfrom django.conf import settings\nfrom django.db.migrations.writer import MigrationWriter\nfrom django.db.migrations import Migration\nfrom django.db.models import CharField\n\n# Configure minimal settings\nsettings.configure(USE_TZ=True)\n\n# Create a simple migration\nmigration = Migration('myapp', 'test_migration')\n\n# Create a list of imports that would be generated\nimports = {\n'import datetime',\n'from django.db import migrations, models',\n'import time',\n}\n\n# Set the imports directly on the migration writer\nwriter = MigrationWriter(migration)\ncontent = writer.as_string()\n\nprint(\"Before our fix, imports would be sorted as:\")\nsorted_imports = sorted(imports, key=lambda i: i.split()[1])\nprint(\"\\n\".join(sorted_imports))\n\nprint(\"\\nBut according to Django style guide, they should be:\")\ndirect_imports = sorted(i for i in imports if i.startswith('import '))\nfrom_imports = sorted(i for i in imports if i.startswith('from '))\nprint(\"\\n\".join(direct_imports + from_imports))\n",
        "verify_fix.py": "new file mode 100644\nindex 0000000000..d433b8adc4\nfrom django.conf import settings\nsettings.configure(USE_TZ=True)\n\nfrom django.db.migrations.writer import MigrationWriter\nfrom django.db.migrations import Migration\nfrom django.db import migrations, models\nimport datetime\nimport time\nimport sys\n\ndef forwards_code(apps, schema_editor):\ntime.sleep(0)\n\ndef backwards_code(apps, schema_editor):\nsys.exit(0) if False else None  # Never actually exit\n\n# Create a migration with operations that will use various imports\nmigration = Migration('testapp', 'test_migration')\n\n# Add operations that will trigger multiple imports naturally\nmigration.operations = [\nmigrations.CreateModel(\nname='TestModel',\nfields=[\n('id', models.AutoField(primary_key=True)),\n('timestamp', models.DateTimeField(default=datetime.datetime.now)),\n('updated_at', models.DateTimeField(auto_now=True)),\n],\n),\nmigrations.RunPython(\ncode=forwards_code,\nreverse_code=backwards_code,\n),\n]\n\n# Write the migration and check its imports\nwriter = MigrationWriter(migration)\nprint(\"Generated migration with imports:\")\nprint(writer.as_string())\n"
    },
    "ground_truth_patch": {
        "django/db/migrations/writer.py": " \n         # Sort imports by the package / module to be imported (the part after\n         # \"from\" in \"from ... import ...\" or after \"import\" in \"import ...\").\n# First group the \"import\" statements, then \"from ... import ...\".\nsorted_imports = sorted(\nimports, key=lambda i: (i.split()[0] == \"from\", i.split()[1])\n)\n         items[\"imports\"] = \"\\n\".join(sorted_imports) + \"\\n\" if imports else \"\"\n         if migration_imports:\n             items[\"imports\"] += (\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-2\", \"reasoning\": \"These code samples are type-2 clones because they are identical in structure and logic but differ in their identifier names and comments. The first code sample describes import sorting in relation to a migration's imports while the second code sample comments on the sorting process without altering the core functionality, making them syntactically similar but distinct in their presentation.\"}"
}