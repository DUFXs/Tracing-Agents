{
    "instance_id": "django__django-15382",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "django/db/models/expressions.py": "index 81f8f79c71..e776eb1072 100644\n \n     def as_sql(self, compiler, connection, template=None, **extra_context):\n         query = self.query.exists(using=connection.alias)\ntry:\nsql, params = super().as_sql(\ncompiler,\nconnection,\ntemplate=template,\nquery=query,\n**extra_context,\n)\nexcept EmptyResultSet:\n# When the inner query is empty and this is a negated Exists,\n# we need to return a valid SQL query that evaluates to True\nif self.negated:\nreturn '1=1', []\nraise\n         if self.negated:\n             sql = 'NOT {}'.format(sql)\n         return sql, params\n",
        "django/db/models/sql/compiler.py": "index d405a203ee..135998fc1f 100644\n                 except EmptyResultSet:\n                     if self.elide_empty:\n                         raise\n# For negated EXISTS with empty queryset, we should return a valid query\nif (isinstance(self.where, WhereNode) and len(self.where.children) == 1 and\nisinstance(self.where.children[0], WhereNode) and self.where.children[0].negated and\nlen(self.where.children[0].children) == 1 and\nhasattr(self.where.children[0].children[0], 'empty_result_set_value')):\nwhere, w_params = '1=1', []\nelse:\n# Use a predicate that's always False.\nwhere, w_params = '0=1', []\n                 having, h_params = self.compile(self.having) if self.having is not None else (\"\", [])\n                 result = ['SELECT']\n                 params = []\n",
        "django/db/models/sql/where.py": "index 50ff13be75..43ecdd75b4 100644\n             try:\n                 sql, params = compiler.compile(child)\n             except EmptyResultSet:\n# For negated EXISTS with empty queryset, we should not count it as empty\nif not (isinstance(child, WhereNode) and child.negated and \nlen(child.children) == 1 and hasattr(child.children[0], 'empty_result_set_value')):\nempty_needed -= 1\nelse:\n# For negated EXISTS with empty queryset, treat it as a valid condition\nresult.append('1=1')\n             else:\n                 if sql:\n                     result.append(sql)\n         query = self.query_object\n         query.set_values(self.targets)\n         query_compiler = query.get_compiler(connection=connection)\nreturn query_compiler.as_subquery_condition(self.alias, self.columns, compiler)\n\\ No newline at end of file\n",
        "reproduce_error.py": "new file mode 100644\nindex 0000000000..266c35f491\n# Setup Django settings\nfrom django.conf import settings\nif not settings.configured:\nsettings.configure(\nDATABASES={\n'default': {\n'ENGINE': 'django.db.backends.sqlite3',\n'NAME': ':memory:',\n}\n},\nINSTALLED_APPS=[\n'django.contrib.auth',\n'django.contrib.contenttypes',\n],\n)\n\nimport django\ndjango.setup()\n\nfrom django.db import models\nfrom django.contrib.auth.models import User\n\n# Create the tables\nfrom django.core.management import call_command\ncall_command('migrate', run_syncdb=True, verbosity=0)\n\n# Reproduce the issue\nqs = User.objects.filter(~models.Exists(User.objects.none()), username='test')\nprint(\"QuerySet:\", qs)\nprint(\"SQL Query:\", str(qs.query))\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "django/db/models/expressions.py": " \n     def as_sql(self, compiler, connection, template=None, **extra_context):\n         query = self.query.exists(using=connection.alias)\ntry:\nsql, params = super().as_sql(\ncompiler,\nconnection,\ntemplate=template,\nquery=query,\n**extra_context,\n)\nexcept EmptyResultSet:\nif self.negated:\nreturn '', ()\nraise\n         if self.negated:\n             sql = 'NOT {}'.format(sql)\n         return sql, params\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-2\", \"reasoning\": \"These code samples are type-2 clones because they contain identical code structures with differences in whitespace and some identifier names. The logic of the two samples is similar, but there are changes in how the method handles the parameters and return values.\"}"
}