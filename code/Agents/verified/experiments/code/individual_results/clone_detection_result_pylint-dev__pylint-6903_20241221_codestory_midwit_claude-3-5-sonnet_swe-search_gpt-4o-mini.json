{
    "instance_id": "pylint-dev__pylint-6903",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "pylint/lint/run.py": "index a7e5d5574..d75608d25 100644\n         with open(\"/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as file:\n             cpu_shares = int(file.read().rstrip())\n         # For AWS, gives correct value * 1024.\n# Ensure we return at least 1 CPU when shares are present but small\navail_cpu = max(1, int(cpu_shares / 1024))\n     return avail_cpu\n \n \n",
        "reproduce_error.py": "new file mode 100644\nindex 000000000..eeeb02f70\n\"\"\"Script to reproduce the pylint CPU calculation error in Kubernetes environments.\"\"\"\nimport os\nfrom pathlib import Path\n\n# Mock the cgroup filesystem\ndef setup_mock_cgroup_files():\nos.makedirs(\"/tmp/mock_cgroup/cpu\", exist_ok=True)\n\n# Write the test values\nwith open(\"/tmp/mock_cgroup/cpu/cpu.cfs_quota_us\", \"w\") as f:\nf.write(\"-1\\n\")\nwith open(\"/tmp/mock_cgroup/cpu/cpu.cfs_period_us\", \"w\") as f:\nf.write(\"100000\\n\")\nwith open(\"/tmp/mock_cgroup/cpu/cpu.shares\", \"w\") as f:\nf.write(\"2\\n\")\n\n# Import the function with modified paths\ndef mock_query_cpu():\n\"\"\"Mock version of _query_cpu() that uses our test files.\"\"\"\ncpu_quota, avail_cpu = None, None\nbase_path = \"/tmp/mock_cgroup/cpu\"\n\nif Path(f\"{base_path}/cpu.cfs_quota_us\").is_file():\nwith open(f\"{base_path}/cpu.cfs_quota_us\", encoding=\"utf-8\") as file:\ncpu_quota = int(file.read().rstrip())\n\nif (\ncpu_quota\nand cpu_quota != -1\nand Path(f\"{base_path}/cpu.cfs_period_us\").is_file()\n):\nwith open(f\"{base_path}/cpu.cfs_period_us\", encoding=\"utf-8\") as file:\ncpu_period = int(file.read().rstrip())\navail_cpu = int(cpu_quota / cpu_period)\nelif Path(f\"{base_path}/cpu.shares\").is_file():\nwith open(f\"{base_path}/cpu.shares\", encoding=\"utf-8\") as file:\ncpu_shares = int(file.read().rstrip())\navail_cpu = max(1, int(cpu_shares / 1024))  # Using the fixed logic\nreturn avail_cpu\n\ndef main():\nsetup_mock_cgroup_files()\ncpu_count = mock_query_cpu()\nprint(f\"Calculated CPU count: {cpu_count}\")\n\n# This will raise ValueError just like in the real code\nif cpu_count == 0:\nraise ValueError(\"Number of processes must be at least 1\")\n\nif __name__ == \"__main__\":\nmain()\n\\ No newline at end of file\n"
    },
    "ground_truth_patch": {
        "pylint/lint/run.py": "             cpu_shares = int(file.read().rstrip())\n         # For AWS, gives correct value * 1024.\n         avail_cpu = int(cpu_shares / 1024)\n\n# In K8s Pods also a fraction of a single core could be available\n# As multiprocessing is not able to run only a \"fraction\" of process\n# assume we have 1 CPU available\nif avail_cpu == 0:\navail_cpu = 1\n\n     return avail_cpu\n \n \n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they exhibit syntactical similarities but have additional statements in the second sample. Specifically, the second sample has additional logic for handling the case when 'avail_cpu' is 0, which is not present in the first sample.\"}"
}