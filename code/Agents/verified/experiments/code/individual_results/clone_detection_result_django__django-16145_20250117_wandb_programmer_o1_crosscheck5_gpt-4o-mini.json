{
    "instance_id": "django__django-16145",
    "agent": "20250117_wandb_programmer_o1_crosscheck5",
    "agent_patch": {
        "django/core/management/commands/runserver.py": "index 3c39f57e4d..4fa94d514b 100644\n     def handle(self, *args, **options):\n         if not settings.DEBUG and not settings.ALLOWED_HOSTS:\n             raise CommandError(\"You must set settings.ALLOWED_HOSTS if DEBUG is False.\")\n\n         self.use_ipv6 = options[\"use_ipv6\"]\n         if self.use_ipv6 and not socket.has_ipv6:\n             raise CommandError(\"Your Python does not support IPv6.\")\n         if not self.addr:\n             self.addr = self.default_addr_ipv6 if self.use_ipv6 else self.default_addr\n             self._raw_ipv6 = self.use_ipv6\n\n# If the user specified a single \"0\" for the address, treat it as \"0.0.0.0\"\nif self.addr == '0' and not self._raw_ipv6:\nself.addr = '0.0.0.0'\n\n         self.run(**options)\n\n \n     def run(self, **options):\n         \"\"\"Run the server, using the autoreloader if needed.\"\"\"\n",
        "test_scripts/__init__.py": "new file mode 100644\nindex 0000000000..8b13789179\n\n",
        "test_scripts/manual_test_runserver_0.py": "new file mode 100644\nindex 0000000000..775e27c48a\nimport sys\nimport os\nimport django\nfrom django.core.management.commands.runserver import Command as RunserverCommand\nfrom django.core.management import call_command\n\n\"\"\"\nThis script checks that runserver \"0:8000\" normalizes \"0\" to \"0.0.0.0\" in the Command object.\nWe don't need to let runserver actually do anything beyond argument parsing.\n\nSteps:\n1. Set DJANGO_SETTINGS_MODULE to a minimal config and django.setup().\n2. Instantiate RunserverCommand and override both check_migrations() and run() so nothing truly runs.\n3. call_command(cmd, \"0:8000\") so handle() parses the address into cmd.addr.\n4. Check whether cmd.addr == \"0.0.0.0\". Exit 0 if so, else 1.\n\"\"\"\n\ndef main():\nos.environ[\"DJANGO_SETTINGS_MODULE\"] = \"test_scripts.testbed_settings\"\ndjango.setup()\n\ncmd = RunserverCommand()\n# Prevent migrations from running.\ncmd.check_migrations = lambda: None\n# Prevent the actual inner_run logic.\ncmd.run = lambda *args, **kwargs: None\n\n# This should parse arguments and set cmd.addr without spinning up a server.\ncall_command(cmd, \"0:8000\", use_reloader=False, skip_checks=True)\n\nif cmd.addr == \"0.0.0.0\":\nprint('TEST PASS: \"0\" was normalized to \"0.0.0.0\".')\nsys.exit(0)\nelse:\nprint(f'TEST FAIL: cmd.addr is \"{cmd.addr}\", expected \"0.0.0.0\".')\nsys.exit(1)\n\nif __name__ == \"__main__\":\nmain()\n",
        "test_scripts/testbed_settings.py": "new file mode 100644\nindex 0000000000..c3629968b1\nimport os\n\nSECRET_KEY = \"fake-key-for-testing\"\nDEBUG = True\nALLOWED_HOSTS = []\nROOT_URLCONF = \"\"\nDATABASES = {\n\"default\": {\n\"ENGINE\": \"django.db.backends.sqlite3\",\n\"NAME\": \":memory:\",\n}\n}\nINSTALLED_APPS = [\n\"django.contrib.auth\",\n\"django.contrib.contenttypes\",\n]\nMIDDLEWARE = []\n"
    },
    "ground_truth_patch": {
        "django/core/management/commands/runserver.py": "         shutdown_message = options.get(\"shutdown_message\", \"\")\n         quit_command = \"CTRL-BREAK\" if sys.platform == \"win32\" else \"CONTROL-C\"\n \nif self._raw_ipv6:\naddr = f\"[{self.addr}]\"\nelif self.addr == \"0\":\naddr = \"0.0.0.0\"\nelse:\naddr = self.addr\n\n         if not options[\"skip_checks\"]:\n             self.stdout.write(\"Performing system checks...\\n\\n\")\n             self.check(display_num_errors=True)\n                 \"version\": self.get_version(),\n                 \"settings\": settings.SETTINGS_MODULE,\n                 \"protocol\": self.protocol,\n\"addr\": addr,\n                 \"port\": self.port,\n                 \"quit_command\": quit_command,\n             }\n"
    },
    "response": "{\"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they exhibit significant syntactical and functional differences. The first sample is a complete command handler, while the second sample is a fragment dealing with shutdown messages and IPv6 address formatting. The context, structure, and purpose of the code snippets differ significantly, thus disqualifying them from being considered clones even under the most lenient classifications.\"}"
}