{
    "instance_id": "sphinx-doc__sphinx-7910",
    "agent": "20250110_learn_by_interact_claude3.5",
    "agent_patch": {
        "sphinx/ext/napoleon/__init__.py": "index 10b1ff3a3..8c8b5b7e0 100644\n                         mod_path = cls_path.split('.')\n                         cls = functools.reduce(getattr, mod_path, mod)\n                     else:\nfrom sphinx.util.inspect import unwrap_all\nunwrapped = unwrap_all(obj)\ncls = unwrapped.__globals__[cls_path]\n                 except Exception:\n\n                     cls_is_owner = False\n                 else:\n                     cls_is_owner = (cls and hasattr(cls, name) and  # type: ignore\n                     (is_init and inc_init)):\n                 return False\n     return None\n\n",
        "test_docs/Makefile": "new file mode 100644\nindex 000000000..d0c3cbf10\n# Minimal makefile for Sphinx documentation\n#\n\n# You can set these variables from the command line, and also\n# from the environment for the first two.\nSPHINXOPTS    ?=\nSPHINXBUILD   ?= sphinx-build\nSOURCEDIR     = source\nBUILDDIR      = build\n\n# Put it first so that \"make\" without argument is like \"make help\".\nhelp:\n@$(SPHINXBUILD) -M help \"$(SOURCEDIR)\" \"$(BUILDDIR)\" $(SPHINXOPTS) $(O)\n\n.PHONY: help Makefile\n\n# Catch-all target: route all unknown targets to Sphinx using the new\n# \"make mode\" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).\n%: Makefile\n@$(SPHINXBUILD) -M $@ \"$(SOURCEDIR)\" \"$(BUILDDIR)\" $(SPHINXOPTS) $(O)\n",
        "test_docs/make.bat": "new file mode 100644\nindex 000000000..6247f7e23\n@ECHO OFF\n\npushd %~dp0\n\nREM Command file for Sphinx documentation\n\nif \"%SPHINXBUILD%\" == \"\" (\nset SPHINXBUILD=sphinx-build\n)\nset SOURCEDIR=source\nset BUILDDIR=build\n\nif \"%1\" == \"\" goto help\n\n%SPHINXBUILD% >NUL 2>NUL\nif errorlevel 9009 (\necho.\necho.The 'sphinx-build' command was not found. Make sure you have Sphinx\necho.installed, then set the SPHINXBUILD environment variable to point\necho.to the full path of the 'sphinx-build' executable. Alternatively you\necho.may add the Sphinx directory to PATH.\necho.\necho.If you don't have Sphinx installed, grab it from\necho.http://sphinx-doc.org/\nexit /b 1\n)\n\n%SPHINXBUILD% -M %1 %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%\ngoto end\n\n:help\n%SPHINXBUILD% -M help %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%\n\n:end\npopd\n",
        "test_docs/source/conf.py": "new file mode 100644\nindex 000000000..003c9316e\n# Configuration file for the Sphinx documentation builder.\n#\n# This file only contains a selection of the most common options. For a full\n# list see the documentation:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n\n# -- Path setup --------------------------------------------------------------\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n#\n# import os\n# import sys\n# sys.path.insert(0, os.path.abspath('.'))\n\n\n# -- Project information -----------------------------------------------------\n\nproject = 'Test'\ncopyright = '2024, Test'\nauthor = 'Test'\n\n\n# -- General configuration ---------------------------------------------------\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n'sphinx.ext.autodoc',\n'sphinx.ext.napoleon'\n]\n\n# Napoleon settings\nnapoleon_google_docstring = True\nnapoleon_numpy_docstring = True\nnapoleon_include_init_with_doc = True\nnapoleon_include_private_with_doc = False\nnapoleon_include_special_with_doc = True\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.\nexclude_patterns = []\n\n\n# -- Options for HTML output -------------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = 'alabaster'\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n\n\n# -- Extension configuration -------------------------------------------------\n\n",
        "test_docs/source/index.rst": "new file mode 100644\nindex 000000000..a983f47c0\n.. Test documentation master file, created by\nsphinx-quickstart on Fri Jan 10 08:11:04 2025.\nYou can adapt this file completely to your liking, but it should at least\ncontain the root `toctree` directive.\n\nWelcome to Test's documentation!\n==============================\n\n.. toctree::\n:maxdepth: 2\n:caption: Contents:\n\nTest Class\n=========\n\n.. autoclass:: test_module.TestClass\n:members:\n:undoc-members:\n:special-members:\n\nIndices and tables\n==================\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n\n",
        "test_docs/source/test_module.py": "new file mode 100644\nindex 000000000..b93134205\nfrom functools import wraps\n\ndef decorator(f):\n@wraps(f)\ndef wrapped(*args, **kwargs):\nreturn f(*args, **kwargs)\nreturn wrapped\n\nclass TestClass:\n@decorator \ndef __init__(self):\n\"\"\"This is a test docstring that should appear in documentation.\n\nThis init method is decorated but should still show up in docs.\n\"\"\"\npass\n\ndef normal_method(self):\n\"\"\"This is a normal undecorated method.\"\"\"\npass\n",
        "test_repro.py": "new file mode 100644\nindex 000000000..da8a5b10f\nfrom functools import wraps\n\ndef decorator(f):\n@wraps(f)\ndef wrapped(*args, **kwargs):\nreturn f(*args, **kwargs)\nreturn wrapped\n\nclass TestClass:\n@decorator \ndef __init__(self):\n\"\"\"This is a test docstring that should appear in documentation.\n\nThis init method is decorated but should still show up in docs.\n\"\"\"\npass\n\nif __name__ == \"__main__\":\n# Print globals to debug\nprint(\"Class name in globals:\", 'TestClass' in TestClass.__init__.__globals__)\nprint(\"Docstring present:\", TestClass.__init__.__doc__ is not None)\nprint(\"Globals keys:\", list(TestClass.__init__.__globals__.keys()))\n"
    },
    "ground_truth_patch": {
        "sphinx/ext/napoleon/__init__.py": " from sphinx import __display_version__ as __version__\n from sphinx.application import Sphinx\n from sphinx.ext.napoleon.docstring import GoogleDocstring, NumpyDocstring\nfrom sphinx.util import inspect\n \n \n class Config:\n                         mod_path = cls_path.split('.')\n                         cls = functools.reduce(getattr, mod_path, mod)\n                     else:\ncls = inspect.unwrap(obj).__globals__[cls_path]\n                 except Exception:\n                     cls_is_owner = False\n                 else:\n"
    },
    "response": "{\"is_clone\": true, \"classification\": \"type-3\", \"reasoning\": \"These code samples are type-3 clones because they exhibit syntactical similarity with some added, modified, or removed statements. While both samples contain similar structures and logic, the second code sample has additional imports at the beginning (e.g., importing Sphinx and related components) and changes in how the object unwrapping and ownership checking are handled without altering the fundamental functional behavior.\"}"
}