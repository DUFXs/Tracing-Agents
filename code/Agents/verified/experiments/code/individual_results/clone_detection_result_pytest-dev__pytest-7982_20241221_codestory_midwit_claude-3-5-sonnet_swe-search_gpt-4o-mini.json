{
    "instance_id": "pytest-dev__pytest-7982",
    "agent": "20241221_codestory_midwit_claude-3-5-sonnet_swe-search",
    "agent_patch": {
        "reproduce_error.py": "new file mode 100644\nindex 000000000..cb32fc0b2\nimport os\nimport shutil\nimport subprocess\nimport sys\nimport tempfile\nfrom pathlib import Path\n\ndef create_test_structure():\n# Create a temporary directory for our test structure\nbase_dir = tempfile.mkdtemp()\ntest_dir = Path(base_dir) / \"test_dir\"\nlinked_dir = Path(base_dir) / \"linked_dir\"\n\n# Create the directories\ntest_dir.mkdir()\nlinked_dir.mkdir()\n\n# Create a test file in the main test directory\nwith open(test_dir / \"test_main.py\", \"w\") as f:\nf.write(\"\"\"\ndef test_main():\nassert True\n\"\"\")\n\n# Create a test file in the directory that will be symlinked\nwith open(linked_dir / \"test_linked.py\", \"w\") as f:\nf.write(\"\"\"\ndef test_linked():\nassert True\n\"\"\")\n\n# Create the symlink\nos.symlink(linked_dir, test_dir / \"linked\")\n\nreturn test_dir\n\ndef main():\ntest_dir = create_test_structure()\nprint(f\"\\nTest directory structure created at: {test_dir}\")\n\n# Run pytest with -v to show all collected tests\nresult = subprocess.run(\n[sys.executable, \"-m\", \"pytest\", \"-v\", str(test_dir)],\ncapture_output=True,\ntext=True,\n)\n\nprint(\"\\nPytest output:\")\nprint(result.stdout)\n\n# Clean up\nshutil.rmtree(test_dir.parent)\n\nif __name__ == \"__main__\":\nmain()\n\\ No newline at end of file\n",
        "src/_pytest/pathlib.py": "index f0bdb1481..b96cba069 100644\n     entries = sorted(os.scandir(path), key=lambda entry: entry.name)\n     yield from entries\n     for entry in entries:\nif entry.is_dir() and recurse(entry):\n             yield from visit(entry.path, recurse)\n \n \n"
    },
    "ground_truth_patch": {
        "src/_pytest/pathlib.py": "     entries = sorted(os.scandir(path), key=lambda entry: entry.name)\n     yield from entries\n     for entry in entries:\nif entry.is_dir() and recurse(entry):\n             yield from visit(entry.path, recurse)\n \n \n"
    },
    "response": "{\"is_clone\": false, \"classification\": \"N/A\", \"reasoning\": \"These code samples are not clones because they are from different files and do not exhibit similarities in syntax or functionality. Sample 1 defines a complete function for creating a test structure and running tests using pytest, while Sample 2 just includes a few lines of code related to scanning directory entries. There is no functional equivalence or syntactical similarity between the two samples.\"}"
}